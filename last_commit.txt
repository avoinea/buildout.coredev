Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-21T08:32:40+01:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/8832625c5484c4d4c17b6ceb057f66aa3c14b245

Use custom werkzeugdebugger.ini file. This magically fixes the jMeter errors on content creation.

Files changed:
A werkzeugdebugger.ini.in
M base.cfg
M performance.jmx
M plone-5.2.x-performance.cfg

b'diff --git a/base.cfg b/base.cfg\nindex 3fbb6442..5bed5493 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -39,6 +39,7 @@ recipe = plone.recipe.zope2instance\n user = admin:admin\n http-address = 8080\n deprecation-warnings = on\n+debug-exceptions = on\n eggs =\n     Plone\n     Pillow\ndiff --git a/performance.jmx b/performance.jmx\nindex 2d8b1c1f..126edf31 100644\n--- a/performance.jmx\n+++ b/performance.jmx\n@@ -1,5 +1,5 @@\n <?xml version="1.0" encoding="UTF-8"?>\n-<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2">\n+<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">\n   <hashTree>\n     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="plone.restapi" enabled="true">\n       <stringProp name="TestPlan.comments"></stringProp>\n@@ -76,7 +76,6 @@\n               <stringProp name="Header.value"></stringProp>\n             </elementProp>\n           </collectionProp>\n-          <stringProp name="TestPlan.comments">: Bearer</stringProp>\n         </HeaderManager>\n         <hashTree/>\n         <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Document" enabled="true">\n@@ -248,7 +247,13 @@\n                 <stringProp name="Argument.value">{&#xd;\n \t&quot;@type&quot;: &quot;Collection&quot;, &#xd;\n \t&quot;title&quot;: &quot;My Collection&quot;, &#xd;\n-\t&quot;query&quot;: []&#xd;\n+\t&quot;query&quot;: [&#xd;\n+    \t\t{&#xd;\n+      \t\t&quot;i&quot;: &quot;portal_type&quot;, &#xd;\n+      \t\t&quot;o&quot;: &quot;plone.app.querystring.operation.string.is&quot;, &#xd;\n+      \t\t&quot;v&quot;: &quot;Document&quot;&#xd;\n+    \t\t}&#xd;\n+  \t]&#xd;\n }</stringProp>\n                 <stringProp name="Argument.metadata">=</stringProp>\n               </elementProp>\ndiff --git a/plone-5.2.x-performance.cfg b/plone-5.2.x-performance.cfg\nindex dfc54eee..7fe36fd8 100644\n--- a/plone-5.2.x-performance.cfg\n+++ b/plone-5.2.x-performance.cfg\n@@ -7,11 +7,14 @@ recipe = plone.recipe.zope2instance\n user = admin:admin\n http-address = 12345\n deprecation-warnings = on\n+debug-exceptions = on\n eggs =\n     Plone\n     Pillow\n     plone.app.debugtoolbar\n     plone.restapi [test]\n+    dataflake.wsgi.werkzeug\n+wsgi-ini-template = ${buildout:directory}/werkzeugdebugger.ini.in\n \n [plonesite]\n recipe = collective.recipe.plonesite\ndiff --git a/werkzeugdebugger.ini.in b/werkzeugdebugger.ini.in\nnew file mode 100644\nindex 00000000..ddbad53d\n--- /dev/null\n+++ b/werkzeugdebugger.ini.in\n@@ -0,0 +1,84 @@\n+[server:main]\n+use = egg:dataflake.wsgi.werkzeug#debugger\n+hostname = 127.0.0.1\n+port = 12345\n+\n+[app:zope]\n+use = egg:Zope#main\n+zope_conf = %(location)s/etc/zope.conf\n+\n+[filter:translogger]\n+use = egg:Paste#translogger\n+setup_console_handler = False\n+\n+[filter:sentry]\n+use = egg:plone.recipe.zope2instance#sentry\n+dsn = %(sentry_dsn)s\n+level = %(sentry_level)s\n+event_level = %(sentry_event_level)s\n+ignorelist = %(sentry_ignore)s\n+\n+[pipeline:main]\n+pipeline =\n+    %(pipeline)s\n+\n+[loggers]\n+keys = root, plone, waitress.queue, waitress, wsgi\n+\n+[handlers]\n+keys = console, accesslog, eventlog\n+\n+[formatters]\n+keys = generic, message\n+\n+[logger_root]\n+level = %(eventlog_level)s\n+handlers = %(root_handlers)s\n+\n+[logger_plone]\n+level = %(eventlog_level)s\n+handlers = %(event_handlers)s\n+qualname = plone\n+\n+[logger_waitress.queue]\n+level = INFO\n+handlers = eventlog\n+qualname = waitress.queue\n+propagate = 0\n+\n+[logger_waitress]\n+level = %(eventlog_level)s\n+handlers = %(event_handlers)s\n+qualname = waitress\n+\n+[logger_wsgi]\n+level = %(accesslog_level)s\n+handlers = accesslog\n+qualname = wsgi\n+propagate = 0\n+\n+[handler_console]\n+class = StreamHandler\n+args = (sys.stderr,)\n+level = NOTSET\n+formatter = generic\n+\n+[handler_accesslog]\n+class = %(accesslog_handler)s\n+args = %(accesslog_args)s\n+kwargs = %(accesslog_kwargs)s\n+level = %(accesslog_level)s\n+formatter = message\n+\n+[handler_eventlog]\n+class = %(eventlog_handler)s\n+args = %(eventlog_args)s\n+kwargs = %(eventlog_kwargs)s\n+level = NOTSET\n+formatter = generic\n+\n+[formatter_generic]\n+format = %%(asctime)s %%(levelname)-7.7s [%%(name)s:%%(lineno)s][%%(threadName)s] %%(message)s\n+\n+[formatter_message]\n+format = %%(message)s\n\\ No newline at end of file\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-21T08:33:01+01:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/6ba77df84938ac0f70434b6d3c52b8c93e2e7377

Merge branch 'master' of github.com:plone/plone.restapi

Files changed:
A news/808.feature
A news/886.feature
A src/plone/restapi/deserializer/blocks.py
A src/plone/restapi/serializer/blocks.py
A src/plone/restapi/tests/test_resolveuid.py
A src/plone/restapi/tests/test_resolveuid_functional.py
M Jenkinsfile
M plone-4.3.x.cfg
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/interfaces.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/testing.zcml
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/test_dxcontent_serializer.py

b'diff --git a/Jenkinsfile b/Jenkinsfile\nindex 2fb85695..a8484773 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -4,6 +4,10 @@ pipeline {\n \n   agent any\n \n+  triggers{\n+    cron(\'H 23 * * *\')\n+  }\n+\n   options {\n     buildDiscarder(logRotator(numToKeepStr:\'30\'))\n     timeout(time: 30, unit: \'MINUTES\')\ndiff --git a/news/808.feature b/news/808.feature\nnew file mode 100644\nindex 00000000..4f375a34\n--- /dev/null\n+++ b/news/808.feature\n@@ -0,0 +1,3 @@\n+Resolve links in blocks to UIDs during deserialization and back to paths during\n+serialization.\n+[buchi,timo,cekk]\ndiff --git a/news/886.feature b/news/886.feature\nnew file mode 100644\nindex 00000000..6216d313\n--- /dev/null\n+++ b/news/886.feature\n@@ -0,0 +1,2 @@\n+Add targetUrl to the dxcontent serializer for primary file fields to be able to download a file directly.\n+[csenger]\n\\ No newline at end of file\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex f0a28357..8dff8a76 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -36,4 +36,4 @@ sphinxcontrib-httpdomain = 1.5.0\n sphinx-rtd-theme = 0.2.4\n Jinja2 = 2.10\n Babel = 2.5.1\n-astunparse = 1.6.2\n\\ No newline at end of file\n+astunparse = 1.6.2\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nnew file mode 100644\nindex 00000000..0c731d49\n--- /dev/null\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -0,0 +1,62 @@\n+# -*- coding: utf-8 -*-\n+from Acquisition import aq_parent\n+from plone.restapi.behaviors import IBlocks\n+from plone.restapi.deserializer.dxfields import DefaultFieldDeserializer\n+from plone.restapi.interfaces import IFieldDeserializer\n+from plone.schema import IJSONField\n+from plone.uuid.interfaces import IUUID\n+from plone.uuid.interfaces import IUUIDAware\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserRequest\n+\n+\n+def path2uid(context, path):\n+    # unrestrictedTraverse requires a string on py3. see:\n+    # https://github.com/zopefoundation/Zope/issues/674\n+    if not isinstance(path, str):\n+        path = path.decode("utf-8")\n+    obj = context.unrestrictedTraverse(path, None)\n+    if obj is None:\n+        return None, None\n+    segments = path.split("/")\n+    suffix = ""\n+    while not IUUIDAware.providedBy(obj):\n+        obj = aq_parent(obj)\n+        suffix += "/" + segments.pop()\n+    return IUUID(obj), suffix\n+\n+\n+@implementer(IFieldDeserializer)\n+@adapter(IJSONField, IBlocks, IBrowserRequest)\n+class BlocksJSONFieldDeserializer(DefaultFieldDeserializer):\n+    def __call__(self, value):\n+        value = super(BlocksJSONFieldDeserializer, self).__call__(value)\n+\n+        # Convert absolute links to resolveuid\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n+        portal_url = portal.absolute_url()\n+        context_url = self.context.absolute_url()\n+        relative_up = len(context_url.split("/")) - len(portal_url.split("/"))\n+        if self.field.getName() == "blocks":\n+            for block in value.values():\n+                if block.get("@type") == "text":\n+                    entity_map = block.get("text", {}).get("entityMap", {})\n+                    for entity in entity_map.values():\n+                        if entity.get("type") == "LINK":\n+                            href = entity.get("data", {}).get("url", "")\n+                            before = href  # noqa\n+                            if href and href.startswith(portal_url):\n+                                path = href[len(portal_url) + 1 :].encode("utf8")\n+                                uid, suffix = path2uid(portal, path)\n+                                if uid:\n+                                    href = relative_up * "../" + "resolveuid/" + uid\n+                                    if suffix:\n+                                        href += suffix\n+                                    entity["data"]["href"] = href\n+                                    entity["data"]["url"] = href\n+                                print("DESERIALIZE " + before + " -> " + href)  # noqa\n+        return value\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 1e06627a..6f9de628 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -16,6 +16,7 @@\n   <adapter factory=".dxfields.TimedeltaFieldDeserializer" />\n   <adapter factory=".dxfields.NamedFieldDeserializer" />\n   <adapter factory=".dxfields.RichTextFieldDeserializer" />\n+  <adapter factory=".blocks.BlocksJSONFieldDeserializer" />\n \n   <adapter factory=".local_roles.DeserializeFromJson"\n            name="local_roles"/>\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex c0c57c38..494d4781 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -52,6 +52,21 @@ def __call__():\n         """\n \n \n+class IPrimaryFieldTarget(Interface):\n+    """Return a URL to direct the user to if this is the primary field.\n+    Useful e.g. if you want to redirect certain users to a download url\n+    instead of the item\'s view.\n+    """\n+\n+    def __init__(field, context, request):\n+        """Adapts field, context and request.\n+        """\n+\n+    def __call__():\n+        """Returns a URL.\n+        """\n+\n+\n class IDeserializeFromJson(Interface):\n     """An adapter to deserialize a JSON object into an object in Plone."""\n \ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nnew file mode 100644\nindex 00000000..58c948b8\n--- /dev/null\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -0,0 +1,46 @@\n+# -*- coding: utf-8 -*-\n+from plone.outputfilters.browser.resolveuid import uuidToURL\n+from plone.restapi.behaviors import IBlocks\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n+from plone.schema import IJSONField\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+import copy\n+import re\n+\n+\n+RESOLVEUID_RE = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n+\n+\n+@adapter(IJSONField, IBlocks, Interface)\n+@implementer(IFieldSerializer)\n+class BlocksJSONFieldSerializer(DefaultFieldSerializer):\n+    def __call__(self):\n+        value = copy.deepcopy(self.get_value())\n+\n+        # Resolve UID links\n+        if self.field.getName() == "blocks":\n+            for block in value.values():\n+                if block.get("@type") == "text":\n+                    entity_map = block.get("text", {}).get("entityMap", {})\n+                    for entity in entity_map.values():\n+                        if entity.get("type") == "LINK":\n+                            href = entity.get("data", {}).get("url", "")\n+                            before = href  # noqa\n+                            if href:\n+                                match = RESOLVEUID_RE.match(href)\n+                                if match is not None:\n+                                    uid, suffix = match.groups()\n+                                    href = uuidToURL(uid)\n+                                    if href is None:\n+                                        continue\n+                                    if suffix:\n+                                        href += "/" + suffix\n+                                    entity["data"]["href"] = href\n+                                    entity["data"]["url"] = href\n+                                    print("SERIALIZE " + before + " -> " + href)  # noqa\n+        return json_compatible(value)\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 8a1f6af6..20c152b8 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -20,6 +20,9 @@\n     <adapter factory=".dxfields.FileFieldSerializer" />\n     <adapter factory=".dxfields.ImageFieldSerializer" />\n     <adapter factory=".dxfields.RichttextFieldSerializer" />\n+    <adapter factory=".dxfields.DefaultPrimaryFieldTarget" />\n+    <adapter factory=".dxfields.PrimaryFileFieldTarget" />\n+    <adapter factory=".blocks.BlocksJSONFieldSerializer" />\n \n     <configure zcml:condition="installed Products.Archetypes">\n         <adapter factory=".atcontent.SerializeToJson" />\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex b12a4b4f..ae928e2f 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -2,6 +2,7 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n+from Products.CMFPlone.utils import base_hasattr\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -9,10 +10,12 @@\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.deserializer import boolean_value\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n+from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.supermodel.utils import mergedTaggedValueDict\n from Products.CMFCore.utils import getToolByName\n from zope.component import adapter\n@@ -68,8 +71,8 @@ def __call__(self, version=None, include_items=True):\n         result.update(expandable_elements(self.context, self.request))\n \n         # Insert field values\n+        primary_field_name = self.get_primary_field_name()\n         for schema in iterSchemata(self.context):\n-\n             read_permissions = mergedTaggedValueDict(schema, READ_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n@@ -77,12 +80,23 @@ def __call__(self, version=None, include_items=True):\n                 if not self.check_permission(read_permissions.get(name), obj):\n                     continue\n \n+                # serialize the field\n                 serializer = queryMultiAdapter(\n                     (field, obj, self.request), IFieldSerializer\n                 )\n                 value = serializer()\n                 result[json_compatible(name)] = value\n \n+                # check for a special primary filed target\n+                if name == primary_field_name:\n+                    target_adapter = queryMultiAdapter(\n+                        (field, obj, self.request),\n+                        IPrimaryFieldTarget)\n+                    if target_adapter:\n+                        target = target_adapter()\n+                        if target:\n+                            result[\'targetUrl\'] = target\n+\n         result["allow_discussion"] = getMultiAdapter(\n             (self.context, self.request), name="conversation_view"\n         ).enabled()\n@@ -94,6 +108,21 @@ def _get_workflow_state(self, obj):\n         review_state = wftool.getInfoFor(ob=obj, name="review_state", default=None)\n         return review_state\n \n+    def get_primary_field_name(self):\n+        fieldname = None\n+        info = None\n+        try:\n+            info = IPrimaryFieldInfo(self.context, None)\n+        except TypeError:\n+            # No primary field present\n+            pass\n+        if info is not None:\n+            fieldname = info.fieldname\n+        elif base_hasattr(self.context, "getPrimaryField"):\n+            field = self.context.getPrimaryField()\n+            fieldname = field.getName()\n+        return fieldname\n+\n     def check_permission(self, permission_name, obj):\n         if permission_name is None:\n             return True\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 62ead159..762965d0 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+\n+from AccessControl import getSecurityManager\n+from Products.CMFCore.permissions import ModifyPortalContent\n+\n from plone.app.textfield.interfaces import IRichText\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n@@ -6,6 +10,7 @@\n from plone.restapi.imaging import get_original_image_url\n from plone.restapi.imaging import get_scales\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n from zope.component import adapter\n from zope.interface import implementer\n@@ -125,3 +130,37 @@ class RichttextFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         value = self.get_value()\n         return json_compatible(value, self.context)\n+\n+\n+@adapter(IField, IDexterityContent, Interface)\n+@implementer(IPrimaryFieldTarget)\n+class DefaultPrimaryFieldTarget(object):\n+\n+    def __init__(self, field, context, request):\n+        self.context = context\n+        self.request = request\n+        self.field = field\n+\n+    def use_primary_field_target(self):\n+        sm = getSecurityManager()\n+        perm = bool(sm.checkPermission(ModifyPortalContent, self.context))\n+        if perm:\n+            return False\n+        return True\n+\n+    def __call__(self):\n+        return\n+\n+\n+@adapter(INamedFileField, IDexterityContent, Interface)\n+class PrimaryFileFieldTarget(DefaultPrimaryFieldTarget):\n+\n+    def __call__(self):\n+        if not self.use_primary_field_target():\n+            return\n+\n+        namedfile = self.field.get(self.context)\n+        if namedfile is None:\n+            return\n+\n+        return "/".join((self.context.absolute_url(), "@@download", self.field.__name__))\ndiff --git a/src/plone/restapi/testing.zcml b/src/plone/restapi/testing.zcml\nindex 16c966cd..a453ed21 100644\n--- a/src/plone/restapi/testing.zcml\n+++ b/src/plone/restapi/testing.zcml\n@@ -11,7 +11,7 @@\n       name="plone.restapi.testing.context_vocabulary" />\n \n   <include package="plone.behavior" file="meta.zcml"/>\n-\n+  <include package="plone.rfc822" />\n \t<plone:behavior\n \t    title="Test Behavior"\n \t    description="Schema-only behavior using attributes"\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex 20bc8608..8e9dd864 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -11,6 +11,7 @@\n from plone.namedfile import field as namedfile\n from plone.restapi.tests.helpers import ascii_token\n from plone.supermodel import model\n+from plone.supermodel.directives import primary\n from Products.CMFCore.utils import getToolByName\n from pytz import timezone\n from z3c.formwidget.query.interfaces import IQuerySource\n@@ -239,6 +240,9 @@ class IDXTestDocumentSchema(model.Schema):\n     test_namedblobfile_field = namedfile.NamedBlobFile(required=False)\n     test_namedblobimage_field = namedfile.NamedBlobImage(required=False)\n \n+    primary(\'test_primary_namedfile_field\')\n+    test_primary_namedfile_field = namedfile.NamedFile(required=False)\n+\n     # z3c.relationfield\n     test_relationchoice_field = RelationChoice(\n         required=False, source=CatalogSource(id=["doc1", "doc2"])\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 301b0e00..8d3016c5 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -5,10 +5,12 @@\n from datetime import timedelta\n from DateTime import DateTime\n from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.interfaces import ITransformer\n from plone.app.textfield.value import RichTextValue\n+from plone.namedfile.file import NamedFile\n from plone.registry.interfaces import IRegistry\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.interfaces import ISerializeToJson\n@@ -349,3 +351,55 @@ def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior\n         obj = self.serialize()\n         self.assertIn("allow_discussion", obj)\n         self.assertEqual(False, obj["allow_discussion"])\n+\n+\n+class TestDXContentPrimaryFieldTargetUrl(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.portal.invokeFactory(\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_primary_namedfile_field=NamedFile(\n+                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            ),\n+        )\n+\n+        self.portal.invokeFactory(\n+            "DXTestDocument",\n+            id=u"doc2",\n+            test_primary_namedfile_field=None,\n+        )\n+\n+        self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\n+        self.portal.doc1.modification_date = DateTime("2015-04-27T10:24:11+00:00")\n+        IMutableUUID(self.portal.doc1).set("30314724b77a4ec0abbad03d262837aa")\n+\n+    def serialize(self):\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n+        return serializer()\n+\n+    def test_primary_field_target(self):\n+        logout()\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n+        data = serializer()\n+        self.assertIn("targetUrl", data)\n+        download_url = u"/".join(\n+            [self.portal.doc1.absolute_url(), u"@@download/test_primary_namedfile_field"]\n+        )\n+        self.assertEqual(data["targetUrl"], download_url)\n+\n+    def test_primary_field_target_without_file(self):\n+        logout()\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n+        data = serializer()\n+        self.assertNotIn("targetUrl", data)\n+\n+    def test_primary_field_target_with_edit_permissions(self):\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n+        data = serializer()\n+        self.assertNotIn("targetUrl", data)\ndiff --git a/src/plone/restapi/tests/test_resolveuid.py b/src/plone/restapi/tests/test_resolveuid.py\nnew file mode 100644\nindex 00000000..a467bf75\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_resolveuid.py\n@@ -0,0 +1,324 @@\n+# -*- coding: utf-8 -*-\n+from plone.dexterity.utils import iterSchemata\n+from plone.restapi.interfaces import IFieldDeserializer\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n+from plone.uuid.interfaces import IUUID\n+from unittest import TestCase\n+from z3c.form.interfaces import IDataManager\n+from zope.component import getMultiAdapter\n+\n+\n+class TestBlocksResolveUID(TestCase):\n+    layer = PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Document", id="doc1", title="Document with Blocks"\n+            )\n+        ]\n+        self.doc2 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc2", title="Target Document")\n+        ]\n+\n+    def serialize(self, fieldname, value):\n+        for schema in iterSchemata(self.doc1):\n+            if fieldname in schema:\n+                field = schema.get(fieldname)\n+                break\n+        dm = getMultiAdapter((self.doc1, field), IDataManager)\n+        dm.set(value)\n+        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n+        return serializer()\n+\n+    def deserialize(self, fieldname, value):\n+        for schema in iterSchemata(self.portal.doc1):\n+            if fieldname in schema:\n+                field = schema.get(fieldname)\n+                break\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n+        return deserializer(value)\n+\n+    def test_blocks_field_serialization_resolves_uids(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.doc2.absolute_url(),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.doc2.absolute_url(),\n+        )\n+\n+    def test_resolveuid_keeps_suffix(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}/view".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}/view".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.doc2.absolute_url() + "/view",\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.doc2.absolute_url() + "/view",\n+        )\n+\n+    def test_keeps_resolveuid_link_if_unknown_uid(self):\n+        uid = "0000"\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+\n+    def test_blocks_field_serialization_doesnt_update_stored_values(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertNotEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            blocks["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+        )\n+        self.assertNotEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            blocks["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+        )\n+\n+    def test_blocks_field_deserialization_resolves_paths_to_uids(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": self.doc2.absolute_url(),\n+                                "rel": "nofollow",\n+                                "url": self.doc2.absolute_url(),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.deserialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+\n+    def test_keeps_url_if_unknown_path(self):\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": self.portal.absolute_url() + "/foo",\n+                                "rel": "nofollow",\n+                                "url": self.portal.absolute_url() + "/foo",\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.deserialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.portal.absolute_url() + "/foo",\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.portal.absolute_url() + "/foo",\n+        )\n+\n+    def test_path_keeps_suffix(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": self.doc2.absolute_url() + "/view",\n+                                "rel": "nofollow",\n+                                "url": self.doc2.absolute_url() + "/view",\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.deserialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            "../resolveuid/{}/view".format(uid),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            "../resolveuid/{}/view".format(uid),\n+        )\ndiff --git a/src/plone/restapi/tests/test_resolveuid_functional.py b/src/plone/restapi/tests/test_resolveuid_functional.py\nnew file mode 100644\nindex 00000000..65e01179\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_resolveuid_functional.py\n@@ -0,0 +1,104 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.dexterity.fti import DexterityFTI\n+from plone.restapi.behaviors import IBlocks\n+from plone.uuid.interfaces import IUUID\n+\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from zope.interface import alsoProvides\n+\n+import transaction\n+import unittest\n+\n+\n+class TestResolveUIDFunctional(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("blockspage")\n+        self.portal.portal_types._setObject("blockspage", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.behaviors = ("volto.blocks",)\n+        self.fti = fti\n+        alsoProvides(self.request, IBlocks)\n+        self.portal_url = self.portal.absolute_url()\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal.invokeFactory("Document", id="target", title="Target")\n+        self.target = self.portal.target\n+        self.target_uuid = IUUID(self.target)\n+\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_resolveuid(self):\n+        self.api_session.post(\n+            "/",\n+            json={\n+                "title": "Document",\n+                "@type": "blockspage",\n+                "blocks": {\n+                    "ca5908a5-3f58-4cd5-beb7-9bd1539d6744": {"@type": "title"},\n+                    "791bf004-7c88-4278-8490-13b85c3fa4b4": {\n+                        "@type": "text",\n+                        "text": {\n+                            "blocks": [\n+                                {\n+                                    "key": "3bnq6",\n+                                    "text": "Link",\n+                                    "type": "unstyled",\n+                                    "depth": 0,\n+                                    "inlineStyleRanges": [],\n+                                    "entityRanges": [\n+                                        {"offset": 0, "length": 4, "key": 0}\n+                                    ],\n+                                    "data": {},\n+                                }\n+                            ],\n+                            "entityMap": {\n+                                "0": {\n+                                    "type": "LINK",\n+                                    "mutability": "MUTABLE",\n+                                    "data": {\n+                                        "url": "{}/target".format(self.portal_url)\n+                                    },\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+                "blocks_layout": {\n+                    "items": [\n+                        "ca5908a5-3f58-4cd5-beb7-9bd1539d6744",\n+                        "791bf004-7c88-4278-8490-13b85c3fa4b4",\n+                    ]\n+                },\n+            },\n+        )\n+        transaction.commit()\n+        self.assertEqual(\n+            "../resolveuid/{}".format(self.target_uuid),\n+            self.portal.document.blocks\n+            .get("791bf004-7c88-4278-8490-13b85c3fa4b4")\n+            .get("text")\n+            .get("entityMap")\n+            .get("0")\n+            .get("data")\n+            .get("url"),\n+        )\n'

