Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-02-21T16:58:23+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/b51c942f23babbacce7d8f5536471941528a24bf

allow to use object paths and uids to link translations

Files changed:
M src/plone/restapi/services/multilingual/pam.py

b'diff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 2a33a204..74c3f050 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -7,11 +7,13 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ILanguage\n from zope.component import adapter\n+from zope.component import getMultiAdapter\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.interface import Interface\n \n import plone.protect.interfaces\n+import six\n \n \n @implementer(IExpandableElement)\n@@ -55,6 +57,14 @@ class LinkTranslations(Service):\n     """ Link two content objects as translations of each other\n     """\n \n+    def __init__(self, context, request):\n+        super(LinkTranslations, self).__init__(context, request)\n+        self.portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n+        self.portal_url = self.portal.absolute_url()\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n+\n     def reply(self):\n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n@@ -68,7 +78,7 @@ def reply(self):\n                 error=dict(type="BadRequest", message="Missing content id to link to")\n             )\n \n-        target = self._traverse(id_)\n+        target = self.get_object(id_)\n         if target is None:\n             self.request.response.setStatus(400)\n             return dict(error=dict(type="BadRequest", message="Content does not exist"))\n@@ -92,17 +102,24 @@ def reply(self):\n         self.request.response.setHeader("Location", self.context.absolute_url())\n         return {}\n \n-    def _traverse(self, url):\n-        purl = getToolByName(self.context, "portal_url")\n-        portal = purl.getPortalObject()\n-        portal_url = portal.absolute_url()\n-        if url.startswith(portal_url):\n-            content_path = url[len(portal_url) + 1 :]\n-            content_path = content_path.split("/")\n-            content_item = portal.restrictedTraverse(content_path)\n-            return content_item\n-\n-        return None\n+    def get_object(self, key):\n+        if isinstance(key, six.string_types):\n+            if key.startswith(self.portal_url):\n+                # Resolve by URL\n+                key = key[len(self.portal_url) + 1 :]\n+                if six.PY2:\n+                    key = key.encode("utf8")\n+                return self.portal.restrictedTraverse(key, None)\n+            elif key.startswith("/"):\n+                if six.PY2:\n+                    key = key.encode("utf8")\n+                # Resolve by path\n+                return self.portal.restrictedTraverse(key.lstrip("/"), None)\n+            else:\n+                # Resolve by UID\n+                brain = self.catalog(UID=key)\n+                if brain:\n+                    return brain[0].getObject()\n \n \n class UnlinkTranslations(Service):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-02-24T07:56:15+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/c9e876d4c15b0cce905390ecbfdbc6751bf1e8ca

tests

Files changed:
M src/plone/restapi/tests/test_translations.py

b'diff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex d586b253..20fe15f5 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -81,7 +81,7 @@ def setUp(self):\n         )\n         transaction.commit()\n \n-    def test_translation_linking_succeeds(self):\n+    def test_translation_linking_by_url(self):\n         response = requests.post(\n             "{}/@translations".format(self.en_content.absolute_url()),\n             headers={"Accept": "application/json"},\n@@ -95,6 +95,34 @@ def test_translation_linking_succeeds(self):\n             if language == ILanguage(self.es_content).get_language():\n                 self.assertEqual(translation, self.es_content)\n \n+    def test_translation_linking_by_path(self):\n+        response = requests.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={"id": "/es/test-document"},\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.begin()\n+        manager = ITranslationManager(self.en_content)\n+        for language, translation in manager.get_translations():\n+            if language == ILanguage(self.es_content).get_language():\n+                self.assertEqual(translation, self.es_content)\n+\n+    def test_translation_linking_by_uid(self):\n+        response = requests.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={"id": self.es_content.UID()},\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.begin()\n+        manager = ITranslationManager(self.en_content)\n+        for language, translation in manager.get_translations():\n+            if language == ILanguage(self.es_content).get_language():\n+                self.assertEqual(translation, self.es_content)\n+\n     def test_calling_endpoint_without_id_gives_400(self):\n         response = requests.post(\n             "{}/@translations".format(self.en_content.absolute_url()),\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-02-24T07:56:19+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/0cff32b1632cac68804b57d9e7c1c583de45ce84

documentation and tests

Files changed:
A src/plone/restapi/tests/http-examples/translations_post_by_id.req
A src/plone/restapi/tests/http-examples/translations_post_by_id.resp
A src/plone/restapi/tests/http-examples/translations_post_by_uid.req
A src/plone/restapi/tests/http-examples/translations_post_by_uid.resp
M docs/source/translations.rst
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/translations.rst b/docs/source/translations.rst\nindex f422cf6c..a63bb0b5 100644\n--- a/docs/source/translations.rst\n+++ b/docs/source/translations.rst\n@@ -1,4 +1,4 @@\n-.. _`translations`: \n+.. _`translations`:\n \n Translations\n ============\n@@ -7,18 +7,18 @@ Translations\n     This is only available on Plone 5.\n \n Since Plone 5 the product `plone.app.multilingual`_ is included in the base\n-Plone installation although it is not enabled by default. \n+Plone installation although it is not enabled by default.\n \n Multilingualism in Plone not only allows the managers of the site to configure\n-the site interface texts to be in one language or another (such as the \n+the site interface texts to be in one language or another (such as the\n configuration menus, error messages, information messages or other static\n-text) but also to configure Plone to handle multilingual content. To achieve \n-that it provides the user interface for managing content translations. \n+text) but also to configure Plone to handle multilingual content. To achieve\n+that it provides the user interface for managing content translations.\n \n You can get additional information about the multilingual capabilities of Plone\n in the `documentation`_.\n \n-In connection with that capabilities, plone.restapi provides a `@translations` \n+In connection with that capabilities, plone.restapi provides a `@translations`\n endpoint to handle the translation information of the content objects.\n \n Once we have installed `plone.app.multilingual`_ and enabled more than one\n@@ -42,6 +42,24 @@ The API will return a `201 Created` response if the linking was successful.\n    :language: http\n \n \n+We can also use the object\'s path to link the translation instead of the full URL:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: _json/translations_post_by_id.req\n+\n+.. literalinclude:: _json/translations_post_by_id.resp\n+   :language: http\n+\n+\n+We can also use the object\'s UID to link the translation:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: _json/translations_post_by_uid.req\n+\n+.. literalinclude:: _json/translations_post_by_id.resp\n+   :language: http\n+\n+\n After linking the contents we can get the list of the translations of that\n content item by issuing a ``GET`` request on the `@translations` endpoint of\n that content item.:\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_id.req b/src/plone/restapi/tests/http-examples/translations_post_by_id.req\nnew file mode 100644\nindex 00000000..bc8e2f29\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_id.req\n@@ -0,0 +1,8 @@\n+POST /plone/en/test-document/@translations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "id": "/es/test-document"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_id.resp b/src/plone/restapi/tests/http-examples/translations_post_by_id.resp\nnew file mode 100644\nindex 00000000..b0d80491\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_id.resp\n@@ -0,0 +1,5 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/en/test-document\n+\n+{}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_uid.req b/src/plone/restapi/tests/http-examples/translations_post_by_uid.req\nnew file mode 100644\nindex 00000000..53bee8a5\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_uid.req\n@@ -0,0 +1,8 @@\n+POST /plone/en/test-document/@translations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "id": "SomeUUID000000000000000000000003"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_uid.resp b/src/plone/restapi/tests/http-examples/translations_post_by_uid.resp\nnew file mode 100644\nindex 00000000..b0d80491\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_uid.resp\n@@ -0,0 +1,5 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/en/test-document\n+\n+{}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex bd770be0..7caa8b3f 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1582,6 +1582,20 @@ def test_documentation_translations_post(self):\n         )\n         save_request_and_response_for_docs("translations_post", response)\n \n+    def test_documentation_translations_post_by_id(self):\n+        response = self.api_session.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"id": self.es_content.absolute_url().replace(self.portal_url, "")},\n+        )\n+        save_request_and_response_for_docs("translations_post_by_id", response)\n+\n+    def test_documentation_translations_post_by_uid(self):\n+        response = self.api_session.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"id": self.es_content.UID()},\n+        )\n+        save_request_and_response_for_docs("translations_post_by_uid", response)\n+\n     def test_documentation_translations_get(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-02-24T07:56:19+01:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/7bb5a0f4a6c65758e293a3432f7e4c59b779bc0c

changelog

Files changed:
A news/645.feature

b'diff --git a/news/645.feature b/news/645.feature\nnew file mode 100644\nindex 00000000..d904cffa\n--- /dev/null\n+++ b/news/645.feature\n@@ -0,0 +1,2 @@\n+Allow using object paths and UIDs to link translations\n+[erral]\n\\ No newline at end of file\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-01T22:15:09+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/93fd3b90c411ab90a9c9f2f3c243a805dffbee4f

Merge pull request #872 from plone/erral-issue-645

Allow objects paths and UIDs to link translations.

Files changed:
A news/645.feature
A src/plone/restapi/tests/http-examples/translations_post_by_id.req
A src/plone/restapi/tests/http-examples/translations_post_by_id.resp
A src/plone/restapi/tests/http-examples/translations_post_by_uid.req
A src/plone/restapi/tests/http-examples/translations_post_by_uid.resp
M docs/source/translations.rst
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_translations.py

b'diff --git a/docs/source/translations.rst b/docs/source/translations.rst\nindex f422cf6c..a63bb0b5 100644\n--- a/docs/source/translations.rst\n+++ b/docs/source/translations.rst\n@@ -1,4 +1,4 @@\n-.. _`translations`: \n+.. _`translations`:\n \n Translations\n ============\n@@ -7,18 +7,18 @@ Translations\n     This is only available on Plone 5.\n \n Since Plone 5 the product `plone.app.multilingual`_ is included in the base\n-Plone installation although it is not enabled by default. \n+Plone installation although it is not enabled by default.\n \n Multilingualism in Plone not only allows the managers of the site to configure\n-the site interface texts to be in one language or another (such as the \n+the site interface texts to be in one language or another (such as the\n configuration menus, error messages, information messages or other static\n-text) but also to configure Plone to handle multilingual content. To achieve \n-that it provides the user interface for managing content translations. \n+text) but also to configure Plone to handle multilingual content. To achieve\n+that it provides the user interface for managing content translations.\n \n You can get additional information about the multilingual capabilities of Plone\n in the `documentation`_.\n \n-In connection with that capabilities, plone.restapi provides a `@translations` \n+In connection with that capabilities, plone.restapi provides a `@translations`\n endpoint to handle the translation information of the content objects.\n \n Once we have installed `plone.app.multilingual`_ and enabled more than one\n@@ -42,6 +42,24 @@ The API will return a `201 Created` response if the linking was successful.\n    :language: http\n \n \n+We can also use the object\'s path to link the translation instead of the full URL:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: _json/translations_post_by_id.req\n+\n+.. literalinclude:: _json/translations_post_by_id.resp\n+   :language: http\n+\n+\n+We can also use the object\'s UID to link the translation:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: _json/translations_post_by_uid.req\n+\n+.. literalinclude:: _json/translations_post_by_id.resp\n+   :language: http\n+\n+\n After linking the contents we can get the list of the translations of that\n content item by issuing a ``GET`` request on the `@translations` endpoint of\n that content item.:\ndiff --git a/news/645.feature b/news/645.feature\nnew file mode 100644\nindex 00000000..d904cffa\n--- /dev/null\n+++ b/news/645.feature\n@@ -0,0 +1,2 @@\n+Allow using object paths and UIDs to link translations\n+[erral]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 2a33a204..74c3f050 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -7,11 +7,13 @@\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import ILanguage\n from zope.component import adapter\n+from zope.component import getMultiAdapter\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.interface import Interface\n \n import plone.protect.interfaces\n+import six\n \n \n @implementer(IExpandableElement)\n@@ -55,6 +57,14 @@ class LinkTranslations(Service):\n     """ Link two content objects as translations of each other\n     """\n \n+    def __init__(self, context, request):\n+        super(LinkTranslations, self).__init__(context, request)\n+        self.portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n+        self.portal_url = self.portal.absolute_url()\n+        self.catalog = getToolByName(self.context, "portal_catalog")\n+\n     def reply(self):\n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n@@ -68,7 +78,7 @@ def reply(self):\n                 error=dict(type="BadRequest", message="Missing content id to link to")\n             )\n \n-        target = self._traverse(id_)\n+        target = self.get_object(id_)\n         if target is None:\n             self.request.response.setStatus(400)\n             return dict(error=dict(type="BadRequest", message="Content does not exist"))\n@@ -92,17 +102,24 @@ def reply(self):\n         self.request.response.setHeader("Location", self.context.absolute_url())\n         return {}\n \n-    def _traverse(self, url):\n-        purl = getToolByName(self.context, "portal_url")\n-        portal = purl.getPortalObject()\n-        portal_url = portal.absolute_url()\n-        if url.startswith(portal_url):\n-            content_path = url[len(portal_url) + 1 :]\n-            content_path = content_path.split("/")\n-            content_item = portal.restrictedTraverse(content_path)\n-            return content_item\n-\n-        return None\n+    def get_object(self, key):\n+        if isinstance(key, six.string_types):\n+            if key.startswith(self.portal_url):\n+                # Resolve by URL\n+                key = key[len(self.portal_url) + 1 :]\n+                if six.PY2:\n+                    key = key.encode("utf8")\n+                return self.portal.restrictedTraverse(key, None)\n+            elif key.startswith("/"):\n+                if six.PY2:\n+                    key = key.encode("utf8")\n+                # Resolve by path\n+                return self.portal.restrictedTraverse(key.lstrip("/"), None)\n+            else:\n+                # Resolve by UID\n+                brain = self.catalog(UID=key)\n+                if brain:\n+                    return brain[0].getObject()\n \n \n class UnlinkTranslations(Service):\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_id.req b/src/plone/restapi/tests/http-examples/translations_post_by_id.req\nnew file mode 100644\nindex 00000000..bc8e2f29\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_id.req\n@@ -0,0 +1,8 @@\n+POST /plone/en/test-document/@translations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "id": "/es/test-document"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_id.resp b/src/plone/restapi/tests/http-examples/translations_post_by_id.resp\nnew file mode 100644\nindex 00000000..b0d80491\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_id.resp\n@@ -0,0 +1,5 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/en/test-document\n+\n+{}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_uid.req b/src/plone/restapi/tests/http-examples/translations_post_by_uid.req\nnew file mode 100644\nindex 00000000..53bee8a5\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_uid.req\n@@ -0,0 +1,8 @@\n+POST /plone/en/test-document/@translations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "id": "SomeUUID000000000000000000000003"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_post_by_uid.resp b/src/plone/restapi/tests/http-examples/translations_post_by_uid.resp\nnew file mode 100644\nindex 00000000..b0d80491\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_post_by_uid.resp\n@@ -0,0 +1,5 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/en/test-document\n+\n+{}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex bd770be0..7caa8b3f 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1582,6 +1582,20 @@ def test_documentation_translations_post(self):\n         )\n         save_request_and_response_for_docs("translations_post", response)\n \n+    def test_documentation_translations_post_by_id(self):\n+        response = self.api_session.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"id": self.es_content.absolute_url().replace(self.portal_url, "")},\n+        )\n+        save_request_and_response_for_docs("translations_post_by_id", response)\n+\n+    def test_documentation_translations_post_by_uid(self):\n+        response = self.api_session.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            json={"id": self.es_content.UID()},\n+        )\n+        save_request_and_response_for_docs("translations_post_by_uid", response)\n+\n     def test_documentation_translations_get(self):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex d586b253..20fe15f5 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -81,7 +81,7 @@ def setUp(self):\n         )\n         transaction.commit()\n \n-    def test_translation_linking_succeeds(self):\n+    def test_translation_linking_by_url(self):\n         response = requests.post(\n             "{}/@translations".format(self.en_content.absolute_url()),\n             headers={"Accept": "application/json"},\n@@ -95,6 +95,34 @@ def test_translation_linking_succeeds(self):\n             if language == ILanguage(self.es_content).get_language():\n                 self.assertEqual(translation, self.es_content)\n \n+    def test_translation_linking_by_path(self):\n+        response = requests.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={"id": "/es/test-document"},\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.begin()\n+        manager = ITranslationManager(self.en_content)\n+        for language, translation in manager.get_translations():\n+            if language == ILanguage(self.es_content).get_language():\n+                self.assertEqual(translation, self.es_content)\n+\n+    def test_translation_linking_by_uid(self):\n+        response = requests.post(\n+            "{}/@translations".format(self.en_content.absolute_url()),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={"id": self.es_content.UID()},\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.begin()\n+        manager = ITranslationManager(self.en_content)\n+        for language, translation in manager.get_translations():\n+            if language == ILanguage(self.es_content).get_language():\n+                self.assertEqual(translation, self.es_content)\n+\n     def test_calling_endpoint_without_id_gives_400(self):\n         response = requests.post(\n             "{}/@translations".format(self.en_content.absolute_url()),\n'

