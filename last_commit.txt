Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-03-10T13:23:50+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/ccfa826f9f2bc0ab6d02665bc36431afee8c83e9

Implement the handling of SVG files before passing it to Pillow, fixes #3063

Files changed:
A news/3063.bugfix
M plone/namedfile/scaling.py

b'diff --git a/news/3063.bugfix b/news/3063.bugfix\nnew file mode 100644\nindex 0000000..20b2537\n--- /dev/null\n+++ b/news/3063.bugfix\n@@ -0,0 +1,2 @@\n+Implement the handling of SVG files before passing it to Pillow, fixes #3063\n+[sneridagh]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex fce3da3..baa8ad7 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -236,21 +236,18 @@ def __call__(\n             if quality:\n                 parameters[\'quality\'] = quality\n \n-        try:\n-            result = self.create_scale(\n-                orig_data,\n-                direction=direction,\n-                height=height,\n-                width=width,\n-                **parameters\n-            )\n-        except (ConflictError, KeyboardInterrupt):\n-            raise\n-        except IOError:\n-            if getattr(orig_value, \'contentType\', \'\') == \'image/svg+xml\':\n-                orig_data.seek(0)\n-                result = orig_data.read(), \'svg+xml\', (width, height)\n-            else:\n+        if not getattr(orig_value, \'contentType\', \'\') == \'image/svg+xml\':\n+            try:\n+                result = self.create_scale(\n+                    orig_data,\n+                    direction=direction,\n+                    height=height,\n+                    width=width,\n+                    **parameters\n+                )\n+            except (ConflictError, KeyboardInterrupt):\n+                raise\n+            except Exception:\n                 logger.exception(\n                     \'Could not scale "{0!r}" of {1!r}\'.format(\n                         orig_value,\n@@ -258,16 +255,10 @@ def __call__(\n                     ),\n                 )\n                 return\n-        except Exception:\n-            logger.exception(\n-                \'Could not scale "{0!r}" of {1!r}\'.format(\n-                    orig_value,\n-                    self.context.absolute_url(),\n-                ),\n-            )\n-            return\n-        if result is None:\n-            return\n+            if result is None:\n+                return\n+        else:\n+            result = orig_data.read(), \'svg+xml\', (width, height)\n \n         data, format_, dimensions = result\n         mimetype = \'image/{0}\'.format(format_.lower())\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-03-11T10:15:21+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/845d746c6951d538dcee86e6bf3d633030b957ce

Add test, and corner case

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling_functional.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex baa8ad7..c4042a6 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -31,6 +31,11 @@\n import logging\n import six\n \n+try:\n+    from cStringIO import StringIO\n+except ImportError:\n+    from io import BytesIO as StringIO\n+\n \n logger = logging.getLogger(__name__)\n _marker = object()\n@@ -43,7 +48,7 @@ class ImageScale(BrowserView):\n     # protected\n     # (it\'s okay because we explicitly validate access to the image attribute\n     # when we retrieve it)\n-    __roles__ = (\'Anonymous\',)\n+    __roles__ = ("Anonymous",)\n     __allow_access_to_unprotected_subobjects__ = 1\n     data = None\n \n@@ -55,40 +60,47 @@ def __init__(self, context, request, **info):\n             self.data = getattr(self.context, self.fieldname)\n \n         url = self.context.absolute_url()\n-        extension = self.data.contentType.split(\'/\')[-1].lower()\n+        extension = self.data.contentType.split("/")[-1].lower()\n         if self.data.contentType == "image/svg+xml":\n             extension = "svg"\n-        if \'uid\' in info:\n-            name = info[\'uid\']\n+        if "uid" in info:\n+            name = info["uid"]\n         else:\n-            name = info[\'fieldname\']\n-        self.__name__ = u\'{0}.{1}\'.format(name, extension)\n-        self.url = u\'{0}/@@images/{1}\'.format(url, self.__name__)\n-        self.srcset = info.get(\'srcset\', [])\n+            name = info["fieldname"]\n+        self.__name__ = u"{0}.{1}".format(name, extension)\n+        self.url = u"{0}/@@images/{1}".format(url, self.__name__)\n+        self.srcset = info.get("srcset", [])\n \n     def absolute_url(self):\n         return self.url\n \n     def srcset_attribute(self):\n         _srcset_attr = []\n-        extension = self.data.contentType.split(\'/\')[-1].lower()\n+        extension = self.data.contentType.split("/")[-1].lower()\n         for scale in self.srcset:\n-            _srcset_attr.append(u\'{0}/@@images/{1}.{2} {3}x\'.format(\n-                self.context.absolute_url(),\n-                scale[\'uid\'],\n-                extension,\n-                scale[\'scale\']))\n-        srcset_attr = \', \'.join(_srcset_attr)\n+            _srcset_attr.append(\n+                u"{0}/@@images/{1}.{2} {3}x".format(\n+                    self.context.absolute_url(), scale["uid"], extension, scale["scale"]\n+                )\n+            )\n+        srcset_attr = ", ".join(_srcset_attr)\n         return srcset_attr\n \n-    def tag(self, height=_marker, width=_marker, alt=_marker,\n-            css_class=None, title=_marker, **kwargs):\n+    def tag(\n+        self,\n+        height=_marker,\n+        width=_marker,\n+        alt=_marker,\n+        css_class=None,\n+        title=_marker,\n+        **kwargs\n+    ):\n         """Create a tag including scale\n         """\n         if height is _marker:\n-            height = getattr(self, \'height\', self.data._height)\n+            height = getattr(self, "height", self.data._height)\n         if width is _marker:\n-            width = getattr(self, \'width\', self.data._width)\n+            width = getattr(self, "width", self.data._width)\n \n         if alt is _marker:\n             alt = self.context.Title()\n@@ -96,36 +108,35 @@ def tag(self, height=_marker, width=_marker, alt=_marker,\n             title = self.context.Title()\n \n         values = [\n-            (\'src\', self.url),\n-            (\'alt\', alt),\n-            (\'title\', title),\n-            (\'height\', height),\n-            (\'width\', width),\n-            (\'class\', css_class),\n+            ("src", self.url),\n+            ("alt", alt),\n+            ("title", title),\n+            ("height", height),\n+            ("width", width),\n+            ("class", css_class),\n         ]\n \n         srcset_attr = self.srcset_attribute()\n         if srcset_attr:\n-            values.append((\'srcset\', srcset_attr))\n+            values.append(("srcset", srcset_attr))\n \n         values.extend(kwargs.items())\n \n-        parts = [\'<img\']\n+        parts = ["<img"]\n         for k, v in values:\n             if v is None:\n                 continue\n             if isinstance(v, int):\n                 v = str(v)\n             elif isinstance(v, six.binary_type):\n-                v = six.text_type(v, \'utf8\')\n-            parts.append(u\'{0}={1}\'.format(k, quoteattr(v)))\n-        parts.append(\'/>\')\n+                v = six.text_type(v, "utf8")\n+            parts.append(u"{0}={1}".format(k, quoteattr(v)))\n+        parts.append("/>")\n \n-        return u\' \'.join(parts)\n+        return u" ".join(parts)\n \n     def validate_access(self):\n-        fieldname = getattr(self.data, \'fieldname\',\n-                            getattr(self, \'fieldname\', None))\n+        fieldname = getattr(self.data, "fieldname", getattr(self, "fieldname", None))\n         guarded_getattr(self.context, fieldname)\n \n     def index_html(self):\n@@ -152,20 +163,19 @@ def HEAD(self, REQUEST, RESPONSE=None):\n         """\n         self.validate_access()\n         set_headers(self.data, REQUEST.response)\n-        return \'\'\n+        return ""\n \n-    HEAD.__roles__ = (\'Anonymous\',)\n+    HEAD.__roles__ = ("Anonymous",)\n \n \n @implementer(ITraversable)\n class ImmutableTraverser(object):\n-\n     def __init__(self, scale):\n         self.scale = scale\n \n     def traverse(self, name, furtherPath):\n         if furtherPath:\n-            raise TraversalError(\'Do not know how to handle further path\')\n+            raise TraversalError("Do not know how to handle further path")\n         else:\n             if self.scale:\n                 return self.scale.tag()\n@@ -175,7 +185,6 @@ def traverse(self, name, furtherPath):\n \n @implementer(IImageScaleFactory)\n class DefaultImageScalingFactory(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -188,21 +197,17 @@ def get_quality(self):\n \n     def create_scale(self, data, direction, height, width, **parameters):\n         return scaleImage(\n-            data,\n-            direction=direction,\n-            height=height,\n-            width=width,\n-            **parameters\n+            data, direction=direction, height=height, width=width, **parameters\n         )\n \n     def __call__(\n-            self,\n-            fieldname=None,\n-            direction=\'thumbnail\',\n-            height=None,\n-            width=None,\n-            scale=None,\n-            **parameters\n+        self,\n+        fieldname=None,\n+        direction="thumbnail",\n+        height=None,\n+        width=None,\n+        scale=None,\n+        **parameters\n     ):\n \n         """Factory for image scales`.\n@@ -212,16 +217,15 @@ def __call__(\n             return\n \n         if height is None and width is None:\n-            dummy, format_ = orig_value.contentType.split(\'/\', 1)\n+            dummy, format_ = orig_value.contentType.split("/", 1)\n             return None, format_, (orig_value._width, orig_value._height)\n         orig_data = None\n         try:\n             orig_data = orig_value.open()\n         except AttributeError:\n-            orig_data = getattr(aq_base(orig_value), \'data\', orig_value)\n+            orig_data = getattr(aq_base(orig_value), "data", orig_value)\n         if not orig_data:\n             return\n-\n         # Handle cases where large image data is stored in FileChunks instead\n         # of plain string\n         if isinstance(orig_data, tuple(FILECHUNK_CLASSES)):\n@@ -231,12 +235,12 @@ def __call__(\n \n         # If quality wasn\'t in the parameters, try the site\'s default scaling\n         # quality if it exists.\n-        if \'quality\' not in parameters:\n+        if "quality" not in parameters:\n             quality = self.get_quality()\n             if quality:\n-                parameters[\'quality\'] = quality\n+                parameters["quality"] = quality\n \n-        if not getattr(orig_value, \'contentType\', \'\') == \'image/svg+xml\':\n+        if not getattr(orig_value, "contentType", "") == "image/svg+xml":\n             try:\n                 result = self.create_scale(\n                     orig_data,\n@@ -250,22 +254,21 @@ def __call__(\n             except Exception:\n                 logger.exception(\n                     \'Could not scale "{0!r}" of {1!r}\'.format(\n-                        orig_value,\n-                        self.context.absolute_url(),\n+                        orig_value, self.context.absolute_url(),\n                     ),\n                 )\n                 return\n             if result is None:\n                 return\n         else:\n-            result = orig_data.read(), \'svg+xml\', (width, height)\n+            if isinstance(orig_data, (bytes, str)):\n+                orig_data = StringIO(orig_data)\n+            result = orig_data.read(), "svg+xml", (width, height)\n \n         data, format_, dimensions = result\n-        mimetype = \'image/{0}\'.format(format_.lower())\n+        mimetype = "image/{0}".format(format_.lower())\n         value = orig_value.__class__(\n-            data,\n-            contentType=mimetype,\n-            filename=orig_value.filename,\n+            data, contentType=mimetype, filename=orig_value.filename,\n         )\n         value.fieldname = fieldname\n         return value, format_, dimensions\n@@ -274,14 +277,15 @@ def __call__(\n @implementer(ITraversable, IPublishTraverse)\n class ImageScaling(BrowserView):\n     """ view used for generating (and storing) image scales """\n+\n     # Ignore some stacks to help with accessing via webdav, otherwise you get a\n     # 404 NotFound error.\n-    _ignored_stacks = (\'manage_DAVget\', \'manage_FTPget\')\n+    _ignored_stacks = ("manage_DAVget", "manage_FTPget")\n     _scale_view_class = ImageScale\n \n     def publishTraverse(self, request, name):\n         """ used for traversal via publisher, i.e. when using as a url """\n-        stack = request.get(\'TraversalRequestNameStack\')\n+        stack = request.get("TraversalRequestNameStack")\n         image = None\n         if stack and stack[-1] not in self._ignored_stacks:\n             # field and scale name were given...\n@@ -289,31 +293,24 @@ def publishTraverse(self, request, name):\n             image = self.scale(name, scale)  # this is an aq-wrapped scale_view\n             if image:\n                 return image\n-        elif \'-\' in name:\n+        elif "-" in name:\n             # we got a uid...\n-            if \'.\' in name:\n-                name, ext = name.rsplit(\'.\', 1)\n+            if "." in name:\n+                name, ext = name.rsplit(".", 1)\n             storage = AnnotationStorage(self.context)\n             info = storage.get(name)\n             if info is None:\n                 raise NotFound(self, name, self.request)\n-            scale_view = self._scale_view_class(\n-                self.context,\n-                self.request,\n-                **info\n-            )\n+            scale_view = self._scale_view_class(self.context, self.request, **info)\n             alsoProvides(scale_view, IStableImageScale)\n             return scale_view\n         else:\n             # otherwise `name` must refer to a field...\n-            if \'.\' in name:\n-                name, ext = name.rsplit(\'.\', 1)\n+            if "." in name:\n+                name, ext = name.rsplit(".", 1)\n             value = getattr(self.context, name)\n             scale_view = self._scale_view_class(\n-                self.context,\n-                self.request,\n-                data=value,\n-                fieldname=name,\n+                self.context, self.request, data=value, fieldname=name,\n             )\n             return scale_view\n         raise NotFound(self, name, self.request)\n@@ -324,10 +321,7 @@ def traverse(self, name, furtherPath):\n         value = self.guarded_orig_image(name)\n         if not furtherPath:\n             image = self._scale_view_class(\n-                self.context,\n-                self.request,\n-                data=value,\n-                fieldname=name,\n+                self.context, self.request, data=value, fieldname=name,\n             )\n         else:\n             return ImmutableTraverser(self.scale(name, furtherPath[-1]))\n@@ -338,12 +332,12 @@ def traverse(self, name, furtherPath):\n \n     _sizes = {}\n \n-    @deprecate(\'use property available_sizes instead\')\n+    @deprecate("use property available_sizes instead")\n     def getAvailableSizes(self, fieldname=None):\n         if fieldname:\n             logger.warning(\n-                \'fieldname was passed to deprecated getAvailableSizes, but \'\n-                \'will be ignored.\',\n+                "fieldname was passed to deprecated getAvailableSizes, but "\n+                "will be ignored.",\n             )\n         return self.available_sizes\n \n@@ -381,7 +375,7 @@ def getImageSize(self, fieldname=None):\n     def guarded_orig_image(self, fieldname):\n         return guarded_getattr(self.context, fieldname, None)\n \n-    @deprecate(\'use getHighPixelDensityScales instead\')\n+    @deprecate("use getHighPixelDensityScales instead")\n     def getRetinaScales(self):\n         return getHighPixelDensityScales()\n \n@@ -402,7 +396,7 @@ def scale(\n         scale=None,\n         height=None,\n         width=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         **parameters\n     ):\n         if fieldname is None:\n@@ -413,9 +407,9 @@ def scale(\n         if scale is not None:\n             if width is not None or height is not None:\n                 logger.warn(\n-                    \'A scale name and width/heigth are given. Those are\'\n-                    \'mutually exclusive: solved by ignoring width/heigth and \'\n-                    \'taking name\',\n+                    "A scale name and width/heigth are given. Those are"\n+                    "mutually exclusive: solved by ignoring width/heigth and "\n+                    "taking name",\n                 )\n             available = self.available_sizes\n             if scale not in available:\n@@ -435,7 +429,7 @@ def scale(\n         if info is None:\n             return  # 404\n \n-        info[\'srcset\'] = self.calculate_srcset(\n+        info["srcset"] = self.calculate_srcset(\n             fieldname=fieldname,\n             height=height,\n             width=width,\n@@ -444,7 +438,7 @@ def scale(\n             storage=storage,\n             **parameters\n         )\n-        info[\'fieldname\'] = fieldname\n+        info["fieldname"] = fieldname\n         scale_view = self._scale_view_class(self.context, self.request, **info)\n         return scale_view\n \n@@ -454,7 +448,7 @@ def calculate_srcset(\n         scale=None,\n         height=None,\n         width=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         storage=None,\n         **parameters\n     ):\n@@ -464,27 +458,19 @@ def calculate_srcset(\n         (orig_width, orig_height) = self.getImageSize(fieldname)\n         for hdScale in self.getHighPixelDensityScales():\n             # Don\'t create retina scales larger than the source image.\n-            if (\n-                (\n-                    height and\n-                    orig_height and\n-                    orig_height < height * hdScale[\'scale\']\n-                ) or (\n-                    width and\n-                    orig_width and\n-                    orig_width < width * hdScale[\'scale\']\n-                )\n+            if (height and orig_height and orig_height < height * hdScale["scale"]) or (\n+                width and orig_width and orig_width < width * hdScale["scale"]\n             ):\n                 continue\n-            parameters[\'quality\'] = hdScale[\'quality\']\n+            parameters["quality"] = hdScale["quality"]\n             scale_src = storage.scale(\n                 fieldname=fieldname,\n-                height=height * hdScale[\'scale\'] if height else height,\n-                width=width * hdScale[\'scale\'] if width else width,\n+                height=height * hdScale["scale"] if height else height,\n+                width=width * hdScale["scale"] if width else width,\n                 direction=direction,\n                 **parameters\n             )\n-            scale_src[\'scale\'] = hdScale[\'scale\']\n+            scale_src["scale"] = hdScale["scale"]\n             if scale_src is not None:\n                 srcset.append(scale_src)\n         return srcset\n@@ -495,7 +481,7 @@ def tag(\n         scale=None,\n         height=None,\n         width=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         **kwargs\n     ):\n         scale = self.scale(fieldname, scale, height, width, direction)\n@@ -513,11 +499,8 @@ def _scale_cachekey(method, self, brain, fieldname, **kwargs):\n         )\n \n     @ram.cache(_scale_cachekey)\n-    def tag(self,\n-            brain,\n-            fieldname,\n-            **kwargs):\n+    def tag(self, brain, fieldname, **kwargs):\n         obj = brain.getObject()\n-        images = obj.restrictedTraverse(\'@@images\')\n+        images = obj.restrictedTraverse("@@images")\n         tag = images.tag(fieldname, **kwargs)\n         return tag\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex ac4282d..40d7f22 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -34,8 +34,8 @@ def assertImage(testcase, data, format_, size):\n class DummyContent(SimpleItem):\n     image = None\n     modified = DateTime\n-    id = __name__ = \'item\'\n-    title = \'foo\'\n+    id = __name__ = "item"\n+    title = "foo"\n \n     def Title(self):\n         return self.title\n@@ -47,159 +47,180 @@ class ImagePublisherTests(unittest.TestCase):\n \n     def setUp(self):\n         if six.PY2:\n-            raise unittest.SkipTest(\'Disabled in py2 for now.\')\n-        data = getFile(\'image.png\')\n+            raise unittest.SkipTest("Disabled in py2 for now.")\n+        data = getFile("image.png")\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.png\')\n-        self.layer[\'app\']._setOb(\'item\', item)\n-        self.item = self.layer[\'app\'].item\n-        self.view = self.item.unrestrictedTraverse(\'@@images\')\n+        item.image = NamedImage(data, "image/png", u"image.png")\n+        self.layer["app"]._setOb("item", item)\n+        self.item = self.layer["app"].item\n+        self.view = self.item.unrestrictedTraverse("@@images")\n         self._orig_sizes = ImageScaling._sizes\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n-        self.browser.addHeader(\'Referer\', self.layer[\'app\'].absolute_url())\n+        self.browser.addHeader("Referer", self.layer["app"].absolute_url())\n \n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n \n     def testPublishScaleViaUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n         self.browser.open(scale.url)\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (64, 64))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (64, 64))\n \n     def testPublishWebDavScaleViaUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n-        self.browser.open(scale.url + \'/manage_DAVget\')\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (64, 64))\n+        self.browser.open(scale.url + "/manage_DAVget")\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (64, 64))\n \n     def testPublishFTPScaleViaUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n-        self.browser.open(scale.url + \'/manage_FTPget\')\n-        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.browser.open(scale.url + "/manage_FTPget")\n+        self.assertIn("200", self.browser.headers["status"])\n         # Same remark as in testPublishWebDavScaleViaUID is valid here.\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (64, 64))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (64, 64))\n \n     def testHeadRequestMethod(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n         url = str(scale.url)\n         self.browser.open(url)\n         GET_length = len(self.browser.contents)\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n-        self.browser.addHeader(\'Referer\', self.layer[\'app\'].absolute_url())\n+        self.browser.addHeader("Referer", self.layer["app"].absolute_url())\n \n         def make_head_request(args):\n             return self.browser.testapp.head(url, **args)\n \n         self.browser._processRequest(url, make_head_request)\n \n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        self.assertEqual(\n-            self.browser.headers[\'Content-Length\'],\n-            str(GET_length)\n-        )\n-        self.assertEqual(self.browser.contents, b\'\')\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.headers["Content-Length"], str(GET_length))\n+        self.assertEqual(self.browser.contents, b"")\n \n     def testPublishThumbViaUID(self):\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n-        scale = self.view.scale(\'image\', \'thumb\')\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+        scale = self.view.scale("image", "thumb")\n         transaction.commit()\n         # make sure the referenced image scale is available\n         self.browser.open(scale.url)\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (128, 128))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (128, 128))\n \n     def testPublishCustomSizeViaUID(self):\n         # set custom image sizes\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n-        scale = self.view.scale(\'image\', \'foo\')\n+        ImageScaling._sizes = {"foo": (23, 23)}\n+        scale = self.view.scale("image", "foo")\n         transaction.commit()\n         # make sure the referenced image scale is available\n         self.browser.open(scale.url)\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (23, 23))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (23, 23))\n \n     def testPublishThumbViaName(self):\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n         transaction.commit()\n \n         # make sure traversing works as is and with scaling\n         # first the field without a scale name\n-        self.browser.open(\n-            self.layer[\'app\'].absolute_url() + \'/item/@@images/image\'\n-        )\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        self.assertEqual(self.browser.contents, getFile(\'image.png\'))\n+        self.browser.open(self.layer["app"].absolute_url() + "/item/@@images/image")\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.contents, getFile("image.png"))\n \n         # and last a scaled version\n         self.browser.open(\n-            self.layer[\'app\'].absolute_url() + \'/item/@@images/image/thumb\'\n+            self.layer["app"].absolute_url() + "/item/@@images/image/thumb"\n         )\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (128, 128))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (128, 128))\n \n     def testPublishCustomSizeViaName(self):\n         # set custom image sizes\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n+        ImageScaling._sizes = {"foo": (23, 23)}\n         transaction.commit()\n         # make sure traversing works as expected\n-        self.browser.open(\n-            self.layer[\'app\'].absolute_url() + \'/item/@@images/image/foo\'\n-        )\n-        assertImage(self, self.browser.contents, \'PNG\', (23, 23))\n+        self.browser.open(self.layer["app"].absolute_url() + "/item/@@images/image/foo")\n+        assertImage(self, self.browser.contents, "PNG", (23, 23))\n \n     def testPublishScaleWithInvalidUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # change the url so it\'s invalid...\n         from zExceptions import NotFound\n+\n         with self.assertRaises(NotFound):\n-            self.browser.open(scale.url.replace(\'.png\', \'x.png\'))\n+            self.browser.open(scale.url.replace(".png", "x.png"))\n \n     def testPublishScaleWithInvalidScale(self):\n-        scale = self.view.scale(\'image\', \'no-such-scale\')\n+        scale = self.view.scale("image", "no-such-scale")\n         transaction.commit()\n         self.assertEqual(scale, None)\n \n     def test_getAvailableSizesWithInvalidScaleMethod(self):\n-        self.assertEqual(self.view.getAvailableSizes(\'no-such-scale\'), {})\n+        self.assertEqual(self.view.getAvailableSizes("no-such-scale"), {})\n \n     def test_getAvailableSizesWithInvalidScaleProperty(self):\n         self.assertEqual(self.view.available_sizes, {})\n \n     def test_getImageSizeWithInvalidScale(self):\n-        self.assertEqual(self.view.getImageSize(\'no-such-scale\'), (0, 0))\n+        self.assertEqual(self.view.getImageSize("no-such-scale"), (0, 0))\n \n     def testGuardedAccess(self):\n         # make sure it\'s not possible to access scales of forbidden images\n         self.item.__allow_access_to_unprotected_subobjects__ = 0\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n+        ImageScaling._sizes = {"foo": (23, 23)}\n         transaction.commit()\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0:s}:{1:s}\'.format(TEST_USER_NAME, TEST_USER_PASSWORD)\n+            "Authorization",\n+            "Basic {0:s}:{1:s}".format(TEST_USER_NAME, TEST_USER_PASSWORD),\n         )\n         from zExceptions import Unauthorized\n+\n         with self.assertRaises(Unauthorized):\n             self.browser.open(\n-                self.layer[\'app\'].absolute_url() + \'/item/@@images/image/foo\'\n+                self.layer["app"].absolute_url() + "/item/@@images/image/foo"\n             )\n         self.item.__allow_access_to_unprotected_subobjects__ = 1\n \n+    def testSVGPublishThumbViaName(self):\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+\n+        data = getFile("image.svg")\n+        svg = DummyContent()\n+        svg.image = NamedImage(data, "image/svg+xml", u"image.svg")\n+        self.layer["app"]._setOb("svg", svg)\n+        svg = self.layer["app"].svg\n+\n+        transaction.commit()\n+\n+        # make sure traversing works as is and with scaling\n+        # first the field without a scale name\n+        self.browser.open(self.layer["app"].absolute_url() + "/svg/@@images/image")\n+\n+        self.assertEqual("image/svg+xml", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.contents, getFile("image.svg"))\n+\n+        # and last a scaled version\n+        self.browser.open(\n+            self.layer["app"].absolute_url() + "/svg/@@images/image/thumb"\n+        )\n+        self.assertEqual("image/svg+xml", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.contents, data)\n+\n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-03-11T12:46:19+01:00
Author: Victor Fernandez de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/84bea6ea40bc961b0012e7677dd285ee197adca2

Amend with Ale suggestion

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex c4042a6..e2838d0 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -2,6 +2,7 @@\n from AccessControl.ZopeGuards import guarded_getattr\n from Acquisition import aq_base\n from DateTime import DateTime\n+from io import BytesIO\n from plone.memoize import ram\n from plone.namedfile.file import FILECHUNK_CLASSES\n from plone.namedfile.interfaces import IAvailableSizes\n@@ -15,6 +16,7 @@\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.scale import scaleImage\n from plone.scale.storage import AnnotationStorage\n+from Products.CMFPlone.utils import safe_encode\n from Products.Five import BrowserView\n from xml.sax.saxutils import quoteattr\n from zExceptions import Unauthorized\n@@ -31,11 +33,6 @@\n import logging\n import six\n \n-try:\n-    from cStringIO import StringIO\n-except ImportError:\n-    from io import BytesIO as StringIO\n-\n \n logger = logging.getLogger(__name__)\n _marker = object()\n@@ -261,8 +258,11 @@ def __call__(\n             if result is None:\n                 return\n         else:\n-            if isinstance(orig_data, (bytes, str)):\n-                orig_data = StringIO(orig_data)\n+            if isinstance(orig_data, (six.text_type)):\n+                orig_data = safe_encode(orig_data)\n+            if isinstance(orig_data, (bytes)):\n+                orig_data = BytesIO(orig_data)\n+\n             result = orig_data.read(), "svg+xml", (width, height)\n \n         data, format_, dimensions = result\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-03-13T16:05:49+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/3aa06d7fa6ac8fa395b5165cd3d4e9eaa7738678

Merge pull request #87 from plone/fixsvghandling

Implement the handling of SVG files before passing it to Pillow, fixe…

Files changed:
A news/3063.bugfix
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling_functional.py

b'diff --git a/news/3063.bugfix b/news/3063.bugfix\nnew file mode 100644\nindex 0000000..20b2537\n--- /dev/null\n+++ b/news/3063.bugfix\n@@ -0,0 +1,2 @@\n+Implement the handling of SVG files before passing it to Pillow, fixes #3063\n+[sneridagh]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex fce3da3..e2838d0 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -2,6 +2,7 @@\n from AccessControl.ZopeGuards import guarded_getattr\n from Acquisition import aq_base\n from DateTime import DateTime\n+from io import BytesIO\n from plone.memoize import ram\n from plone.namedfile.file import FILECHUNK_CLASSES\n from plone.namedfile.interfaces import IAvailableSizes\n@@ -15,6 +16,7 @@\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.scale import scaleImage\n from plone.scale.storage import AnnotationStorage\n+from Products.CMFPlone.utils import safe_encode\n from Products.Five import BrowserView\n from xml.sax.saxutils import quoteattr\n from zExceptions import Unauthorized\n@@ -43,7 +45,7 @@ class ImageScale(BrowserView):\n     # protected\n     # (it\'s okay because we explicitly validate access to the image attribute\n     # when we retrieve it)\n-    __roles__ = (\'Anonymous\',)\n+    __roles__ = ("Anonymous",)\n     __allow_access_to_unprotected_subobjects__ = 1\n     data = None\n \n@@ -55,40 +57,47 @@ def __init__(self, context, request, **info):\n             self.data = getattr(self.context, self.fieldname)\n \n         url = self.context.absolute_url()\n-        extension = self.data.contentType.split(\'/\')[-1].lower()\n+        extension = self.data.contentType.split("/")[-1].lower()\n         if self.data.contentType == "image/svg+xml":\n             extension = "svg"\n-        if \'uid\' in info:\n-            name = info[\'uid\']\n+        if "uid" in info:\n+            name = info["uid"]\n         else:\n-            name = info[\'fieldname\']\n-        self.__name__ = u\'{0}.{1}\'.format(name, extension)\n-        self.url = u\'{0}/@@images/{1}\'.format(url, self.__name__)\n-        self.srcset = info.get(\'srcset\', [])\n+            name = info["fieldname"]\n+        self.__name__ = u"{0}.{1}".format(name, extension)\n+        self.url = u"{0}/@@images/{1}".format(url, self.__name__)\n+        self.srcset = info.get("srcset", [])\n \n     def absolute_url(self):\n         return self.url\n \n     def srcset_attribute(self):\n         _srcset_attr = []\n-        extension = self.data.contentType.split(\'/\')[-1].lower()\n+        extension = self.data.contentType.split("/")[-1].lower()\n         for scale in self.srcset:\n-            _srcset_attr.append(u\'{0}/@@images/{1}.{2} {3}x\'.format(\n-                self.context.absolute_url(),\n-                scale[\'uid\'],\n-                extension,\n-                scale[\'scale\']))\n-        srcset_attr = \', \'.join(_srcset_attr)\n+            _srcset_attr.append(\n+                u"{0}/@@images/{1}.{2} {3}x".format(\n+                    self.context.absolute_url(), scale["uid"], extension, scale["scale"]\n+                )\n+            )\n+        srcset_attr = ", ".join(_srcset_attr)\n         return srcset_attr\n \n-    def tag(self, height=_marker, width=_marker, alt=_marker,\n-            css_class=None, title=_marker, **kwargs):\n+    def tag(\n+        self,\n+        height=_marker,\n+        width=_marker,\n+        alt=_marker,\n+        css_class=None,\n+        title=_marker,\n+        **kwargs\n+    ):\n         """Create a tag including scale\n         """\n         if height is _marker:\n-            height = getattr(self, \'height\', self.data._height)\n+            height = getattr(self, "height", self.data._height)\n         if width is _marker:\n-            width = getattr(self, \'width\', self.data._width)\n+            width = getattr(self, "width", self.data._width)\n \n         if alt is _marker:\n             alt = self.context.Title()\n@@ -96,36 +105,35 @@ def tag(self, height=_marker, width=_marker, alt=_marker,\n             title = self.context.Title()\n \n         values = [\n-            (\'src\', self.url),\n-            (\'alt\', alt),\n-            (\'title\', title),\n-            (\'height\', height),\n-            (\'width\', width),\n-            (\'class\', css_class),\n+            ("src", self.url),\n+            ("alt", alt),\n+            ("title", title),\n+            ("height", height),\n+            ("width", width),\n+            ("class", css_class),\n         ]\n \n         srcset_attr = self.srcset_attribute()\n         if srcset_attr:\n-            values.append((\'srcset\', srcset_attr))\n+            values.append(("srcset", srcset_attr))\n \n         values.extend(kwargs.items())\n \n-        parts = [\'<img\']\n+        parts = ["<img"]\n         for k, v in values:\n             if v is None:\n                 continue\n             if isinstance(v, int):\n                 v = str(v)\n             elif isinstance(v, six.binary_type):\n-                v = six.text_type(v, \'utf8\')\n-            parts.append(u\'{0}={1}\'.format(k, quoteattr(v)))\n-        parts.append(\'/>\')\n+                v = six.text_type(v, "utf8")\n+            parts.append(u"{0}={1}".format(k, quoteattr(v)))\n+        parts.append("/>")\n \n-        return u\' \'.join(parts)\n+        return u" ".join(parts)\n \n     def validate_access(self):\n-        fieldname = getattr(self.data, \'fieldname\',\n-                            getattr(self, \'fieldname\', None))\n+        fieldname = getattr(self.data, "fieldname", getattr(self, "fieldname", None))\n         guarded_getattr(self.context, fieldname)\n \n     def index_html(self):\n@@ -152,20 +160,19 @@ def HEAD(self, REQUEST, RESPONSE=None):\n         """\n         self.validate_access()\n         set_headers(self.data, REQUEST.response)\n-        return \'\'\n+        return ""\n \n-    HEAD.__roles__ = (\'Anonymous\',)\n+    HEAD.__roles__ = ("Anonymous",)\n \n \n @implementer(ITraversable)\n class ImmutableTraverser(object):\n-\n     def __init__(self, scale):\n         self.scale = scale\n \n     def traverse(self, name, furtherPath):\n         if furtherPath:\n-            raise TraversalError(\'Do not know how to handle further path\')\n+            raise TraversalError("Do not know how to handle further path")\n         else:\n             if self.scale:\n                 return self.scale.tag()\n@@ -175,7 +182,6 @@ def traverse(self, name, furtherPath):\n \n @implementer(IImageScaleFactory)\n class DefaultImageScalingFactory(object):\n-\n     def __init__(self, context):\n         self.context = context\n \n@@ -188,21 +194,17 @@ def get_quality(self):\n \n     def create_scale(self, data, direction, height, width, **parameters):\n         return scaleImage(\n-            data,\n-            direction=direction,\n-            height=height,\n-            width=width,\n-            **parameters\n+            data, direction=direction, height=height, width=width, **parameters\n         )\n \n     def __call__(\n-            self,\n-            fieldname=None,\n-            direction=\'thumbnail\',\n-            height=None,\n-            width=None,\n-            scale=None,\n-            **parameters\n+        self,\n+        fieldname=None,\n+        direction="thumbnail",\n+        height=None,\n+        width=None,\n+        scale=None,\n+        **parameters\n     ):\n \n         """Factory for image scales`.\n@@ -212,16 +214,15 @@ def __call__(\n             return\n \n         if height is None and width is None:\n-            dummy, format_ = orig_value.contentType.split(\'/\', 1)\n+            dummy, format_ = orig_value.contentType.split("/", 1)\n             return None, format_, (orig_value._width, orig_value._height)\n         orig_data = None\n         try:\n             orig_data = orig_value.open()\n         except AttributeError:\n-            orig_data = getattr(aq_base(orig_value), \'data\', orig_value)\n+            orig_data = getattr(aq_base(orig_value), "data", orig_value)\n         if not orig_data:\n             return\n-\n         # Handle cases where large image data is stored in FileChunks instead\n         # of plain string\n         if isinstance(orig_data, tuple(FILECHUNK_CLASSES)):\n@@ -231,50 +232,43 @@ def __call__(\n \n         # If quality wasn\'t in the parameters, try the site\'s default scaling\n         # quality if it exists.\n-        if \'quality\' not in parameters:\n+        if "quality" not in parameters:\n             quality = self.get_quality()\n             if quality:\n-                parameters[\'quality\'] = quality\n+                parameters["quality"] = quality\n \n-        try:\n-            result = self.create_scale(\n-                orig_data,\n-                direction=direction,\n-                height=height,\n-                width=width,\n-                **parameters\n-            )\n-        except (ConflictError, KeyboardInterrupt):\n-            raise\n-        except IOError:\n-            if getattr(orig_value, \'contentType\', \'\') == \'image/svg+xml\':\n-                orig_data.seek(0)\n-                result = orig_data.read(), \'svg+xml\', (width, height)\n-            else:\n+        if not getattr(orig_value, "contentType", "") == "image/svg+xml":\n+            try:\n+                result = self.create_scale(\n+                    orig_data,\n+                    direction=direction,\n+                    height=height,\n+                    width=width,\n+                    **parameters\n+                )\n+            except (ConflictError, KeyboardInterrupt):\n+                raise\n+            except Exception:\n                 logger.exception(\n                     \'Could not scale "{0!r}" of {1!r}\'.format(\n-                        orig_value,\n-                        self.context.absolute_url(),\n+                        orig_value, self.context.absolute_url(),\n                     ),\n                 )\n                 return\n-        except Exception:\n-            logger.exception(\n-                \'Could not scale "{0!r}" of {1!r}\'.format(\n-                    orig_value,\n-                    self.context.absolute_url(),\n-                ),\n-            )\n-            return\n-        if result is None:\n-            return\n+            if result is None:\n+                return\n+        else:\n+            if isinstance(orig_data, (six.text_type)):\n+                orig_data = safe_encode(orig_data)\n+            if isinstance(orig_data, (bytes)):\n+                orig_data = BytesIO(orig_data)\n+\n+            result = orig_data.read(), "svg+xml", (width, height)\n \n         data, format_, dimensions = result\n-        mimetype = \'image/{0}\'.format(format_.lower())\n+        mimetype = "image/{0}".format(format_.lower())\n         value = orig_value.__class__(\n-            data,\n-            contentType=mimetype,\n-            filename=orig_value.filename,\n+            data, contentType=mimetype, filename=orig_value.filename,\n         )\n         value.fieldname = fieldname\n         return value, format_, dimensions\n@@ -283,14 +277,15 @@ def __call__(\n @implementer(ITraversable, IPublishTraverse)\n class ImageScaling(BrowserView):\n     """ view used for generating (and storing) image scales """\n+\n     # Ignore some stacks to help with accessing via webdav, otherwise you get a\n     # 404 NotFound error.\n-    _ignored_stacks = (\'manage_DAVget\', \'manage_FTPget\')\n+    _ignored_stacks = ("manage_DAVget", "manage_FTPget")\n     _scale_view_class = ImageScale\n \n     def publishTraverse(self, request, name):\n         """ used for traversal via publisher, i.e. when using as a url """\n-        stack = request.get(\'TraversalRequestNameStack\')\n+        stack = request.get("TraversalRequestNameStack")\n         image = None\n         if stack and stack[-1] not in self._ignored_stacks:\n             # field and scale name were given...\n@@ -298,31 +293,24 @@ def publishTraverse(self, request, name):\n             image = self.scale(name, scale)  # this is an aq-wrapped scale_view\n             if image:\n                 return image\n-        elif \'-\' in name:\n+        elif "-" in name:\n             # we got a uid...\n-            if \'.\' in name:\n-                name, ext = name.rsplit(\'.\', 1)\n+            if "." in name:\n+                name, ext = name.rsplit(".", 1)\n             storage = AnnotationStorage(self.context)\n             info = storage.get(name)\n             if info is None:\n                 raise NotFound(self, name, self.request)\n-            scale_view = self._scale_view_class(\n-                self.context,\n-                self.request,\n-                **info\n-            )\n+            scale_view = self._scale_view_class(self.context, self.request, **info)\n             alsoProvides(scale_view, IStableImageScale)\n             return scale_view\n         else:\n             # otherwise `name` must refer to a field...\n-            if \'.\' in name:\n-                name, ext = name.rsplit(\'.\', 1)\n+            if "." in name:\n+                name, ext = name.rsplit(".", 1)\n             value = getattr(self.context, name)\n             scale_view = self._scale_view_class(\n-                self.context,\n-                self.request,\n-                data=value,\n-                fieldname=name,\n+                self.context, self.request, data=value, fieldname=name,\n             )\n             return scale_view\n         raise NotFound(self, name, self.request)\n@@ -333,10 +321,7 @@ def traverse(self, name, furtherPath):\n         value = self.guarded_orig_image(name)\n         if not furtherPath:\n             image = self._scale_view_class(\n-                self.context,\n-                self.request,\n-                data=value,\n-                fieldname=name,\n+                self.context, self.request, data=value, fieldname=name,\n             )\n         else:\n             return ImmutableTraverser(self.scale(name, furtherPath[-1]))\n@@ -347,12 +332,12 @@ def traverse(self, name, furtherPath):\n \n     _sizes = {}\n \n-    @deprecate(\'use property available_sizes instead\')\n+    @deprecate("use property available_sizes instead")\n     def getAvailableSizes(self, fieldname=None):\n         if fieldname:\n             logger.warning(\n-                \'fieldname was passed to deprecated getAvailableSizes, but \'\n-                \'will be ignored.\',\n+                "fieldname was passed to deprecated getAvailableSizes, but "\n+                "will be ignored.",\n             )\n         return self.available_sizes\n \n@@ -390,7 +375,7 @@ def getImageSize(self, fieldname=None):\n     def guarded_orig_image(self, fieldname):\n         return guarded_getattr(self.context, fieldname, None)\n \n-    @deprecate(\'use getHighPixelDensityScales instead\')\n+    @deprecate("use getHighPixelDensityScales instead")\n     def getRetinaScales(self):\n         return getHighPixelDensityScales()\n \n@@ -411,7 +396,7 @@ def scale(\n         scale=None,\n         height=None,\n         width=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         **parameters\n     ):\n         if fieldname is None:\n@@ -422,9 +407,9 @@ def scale(\n         if scale is not None:\n             if width is not None or height is not None:\n                 logger.warn(\n-                    \'A scale name and width/heigth are given. Those are\'\n-                    \'mutually exclusive: solved by ignoring width/heigth and \'\n-                    \'taking name\',\n+                    "A scale name and width/heigth are given. Those are"\n+                    "mutually exclusive: solved by ignoring width/heigth and "\n+                    "taking name",\n                 )\n             available = self.available_sizes\n             if scale not in available:\n@@ -444,7 +429,7 @@ def scale(\n         if info is None:\n             return  # 404\n \n-        info[\'srcset\'] = self.calculate_srcset(\n+        info["srcset"] = self.calculate_srcset(\n             fieldname=fieldname,\n             height=height,\n             width=width,\n@@ -453,7 +438,7 @@ def scale(\n             storage=storage,\n             **parameters\n         )\n-        info[\'fieldname\'] = fieldname\n+        info["fieldname"] = fieldname\n         scale_view = self._scale_view_class(self.context, self.request, **info)\n         return scale_view\n \n@@ -463,7 +448,7 @@ def calculate_srcset(\n         scale=None,\n         height=None,\n         width=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         storage=None,\n         **parameters\n     ):\n@@ -473,27 +458,19 @@ def calculate_srcset(\n         (orig_width, orig_height) = self.getImageSize(fieldname)\n         for hdScale in self.getHighPixelDensityScales():\n             # Don\'t create retina scales larger than the source image.\n-            if (\n-                (\n-                    height and\n-                    orig_height and\n-                    orig_height < height * hdScale[\'scale\']\n-                ) or (\n-                    width and\n-                    orig_width and\n-                    orig_width < width * hdScale[\'scale\']\n-                )\n+            if (height and orig_height and orig_height < height * hdScale["scale"]) or (\n+                width and orig_width and orig_width < width * hdScale["scale"]\n             ):\n                 continue\n-            parameters[\'quality\'] = hdScale[\'quality\']\n+            parameters["quality"] = hdScale["quality"]\n             scale_src = storage.scale(\n                 fieldname=fieldname,\n-                height=height * hdScale[\'scale\'] if height else height,\n-                width=width * hdScale[\'scale\'] if width else width,\n+                height=height * hdScale["scale"] if height else height,\n+                width=width * hdScale["scale"] if width else width,\n                 direction=direction,\n                 **parameters\n             )\n-            scale_src[\'scale\'] = hdScale[\'scale\']\n+            scale_src["scale"] = hdScale["scale"]\n             if scale_src is not None:\n                 srcset.append(scale_src)\n         return srcset\n@@ -504,7 +481,7 @@ def tag(\n         scale=None,\n         height=None,\n         width=None,\n-        direction=\'thumbnail\',\n+        direction="thumbnail",\n         **kwargs\n     ):\n         scale = self.scale(fieldname, scale, height, width, direction)\n@@ -522,11 +499,8 @@ def _scale_cachekey(method, self, brain, fieldname, **kwargs):\n         )\n \n     @ram.cache(_scale_cachekey)\n-    def tag(self,\n-            brain,\n-            fieldname,\n-            **kwargs):\n+    def tag(self, brain, fieldname, **kwargs):\n         obj = brain.getObject()\n-        images = obj.restrictedTraverse(\'@@images\')\n+        images = obj.restrictedTraverse("@@images")\n         tag = images.tag(fieldname, **kwargs)\n         return tag\ndiff --git a/plone/namedfile/tests/test_scaling_functional.py b/plone/namedfile/tests/test_scaling_functional.py\nindex ac4282d..40d7f22 100644\n--- a/plone/namedfile/tests/test_scaling_functional.py\n+++ b/plone/namedfile/tests/test_scaling_functional.py\n@@ -34,8 +34,8 @@ def assertImage(testcase, data, format_, size):\n class DummyContent(SimpleItem):\n     image = None\n     modified = DateTime\n-    id = __name__ = \'item\'\n-    title = \'foo\'\n+    id = __name__ = "item"\n+    title = "foo"\n \n     def Title(self):\n         return self.title\n@@ -47,159 +47,180 @@ class ImagePublisherTests(unittest.TestCase):\n \n     def setUp(self):\n         if six.PY2:\n-            raise unittest.SkipTest(\'Disabled in py2 for now.\')\n-        data = getFile(\'image.png\')\n+            raise unittest.SkipTest("Disabled in py2 for now.")\n+        data = getFile("image.png")\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.png\')\n-        self.layer[\'app\']._setOb(\'item\', item)\n-        self.item = self.layer[\'app\'].item\n-        self.view = self.item.unrestrictedTraverse(\'@@images\')\n+        item.image = NamedImage(data, "image/png", u"image.png")\n+        self.layer["app"]._setOb("item", item)\n+        self.item = self.layer["app"].item\n+        self.view = self.item.unrestrictedTraverse("@@images")\n         self._orig_sizes = ImageScaling._sizes\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n-        self.browser.addHeader(\'Referer\', self.layer[\'app\'].absolute_url())\n+        self.browser.addHeader("Referer", self.layer["app"].absolute_url())\n \n     def tearDown(self):\n         ImageScaling._sizes = self._orig_sizes\n \n     def testPublishScaleViaUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n         self.browser.open(scale.url)\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (64, 64))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (64, 64))\n \n     def testPublishWebDavScaleViaUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n-        self.browser.open(scale.url + \'/manage_DAVget\')\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (64, 64))\n+        self.browser.open(scale.url + "/manage_DAVget")\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (64, 64))\n \n     def testPublishFTPScaleViaUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n-        self.browser.open(scale.url + \'/manage_FTPget\')\n-        self.assertIn(\'200\', self.browser.headers[\'status\'])\n+        self.browser.open(scale.url + "/manage_FTPget")\n+        self.assertIn("200", self.browser.headers["status"])\n         # Same remark as in testPublishWebDavScaleViaUID is valid here.\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (64, 64))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (64, 64))\n \n     def testHeadRequestMethod(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # make sure the referenced image scale is available\n         url = str(scale.url)\n         self.browser.open(url)\n         GET_length = len(self.browser.contents)\n \n-        self.browser = Browser(self.layer[\'app\'])\n+        self.browser = Browser(self.layer["app"])\n         self.browser.handleErrors = False\n-        self.browser.addHeader(\'Referer\', self.layer[\'app\'].absolute_url())\n+        self.browser.addHeader("Referer", self.layer["app"].absolute_url())\n \n         def make_head_request(args):\n             return self.browser.testapp.head(url, **args)\n \n         self.browser._processRequest(url, make_head_request)\n \n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        self.assertEqual(\n-            self.browser.headers[\'Content-Length\'],\n-            str(GET_length)\n-        )\n-        self.assertEqual(self.browser.contents, b\'\')\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.headers["Content-Length"], str(GET_length))\n+        self.assertEqual(self.browser.contents, b"")\n \n     def testPublishThumbViaUID(self):\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n-        scale = self.view.scale(\'image\', \'thumb\')\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+        scale = self.view.scale("image", "thumb")\n         transaction.commit()\n         # make sure the referenced image scale is available\n         self.browser.open(scale.url)\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (128, 128))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (128, 128))\n \n     def testPublishCustomSizeViaUID(self):\n         # set custom image sizes\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n-        scale = self.view.scale(\'image\', \'foo\')\n+        ImageScaling._sizes = {"foo": (23, 23)}\n+        scale = self.view.scale("image", "foo")\n         transaction.commit()\n         # make sure the referenced image scale is available\n         self.browser.open(scale.url)\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (23, 23))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (23, 23))\n \n     def testPublishThumbViaName(self):\n-        ImageScaling._sizes = {\'thumb\': (128, 128)}\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n         transaction.commit()\n \n         # make sure traversing works as is and with scaling\n         # first the field without a scale name\n-        self.browser.open(\n-            self.layer[\'app\'].absolute_url() + \'/item/@@images/image\'\n-        )\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        self.assertEqual(self.browser.contents, getFile(\'image.png\'))\n+        self.browser.open(self.layer["app"].absolute_url() + "/item/@@images/image")\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.contents, getFile("image.png"))\n \n         # and last a scaled version\n         self.browser.open(\n-            self.layer[\'app\'].absolute_url() + \'/item/@@images/image/thumb\'\n+            self.layer["app"].absolute_url() + "/item/@@images/image/thumb"\n         )\n-        self.assertEqual(\'image/png\', self.browser.headers[\'content-type\'])\n-        assertImage(self, self.browser.contents, \'PNG\', (128, 128))\n+        self.assertEqual("image/png", self.browser.headers["content-type"])\n+        assertImage(self, self.browser.contents, "PNG", (128, 128))\n \n     def testPublishCustomSizeViaName(self):\n         # set custom image sizes\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n+        ImageScaling._sizes = {"foo": (23, 23)}\n         transaction.commit()\n         # make sure traversing works as expected\n-        self.browser.open(\n-            self.layer[\'app\'].absolute_url() + \'/item/@@images/image/foo\'\n-        )\n-        assertImage(self, self.browser.contents, \'PNG\', (23, 23))\n+        self.browser.open(self.layer["app"].absolute_url() + "/item/@@images/image/foo")\n+        assertImage(self, self.browser.contents, "PNG", (23, 23))\n \n     def testPublishScaleWithInvalidUID(self):\n-        scale = self.view.scale(\'image\', width=64, height=64)\n+        scale = self.view.scale("image", width=64, height=64)\n         transaction.commit()\n         # change the url so it\'s invalid...\n         from zExceptions import NotFound\n+\n         with self.assertRaises(NotFound):\n-            self.browser.open(scale.url.replace(\'.png\', \'x.png\'))\n+            self.browser.open(scale.url.replace(".png", "x.png"))\n \n     def testPublishScaleWithInvalidScale(self):\n-        scale = self.view.scale(\'image\', \'no-such-scale\')\n+        scale = self.view.scale("image", "no-such-scale")\n         transaction.commit()\n         self.assertEqual(scale, None)\n \n     def test_getAvailableSizesWithInvalidScaleMethod(self):\n-        self.assertEqual(self.view.getAvailableSizes(\'no-such-scale\'), {})\n+        self.assertEqual(self.view.getAvailableSizes("no-such-scale"), {})\n \n     def test_getAvailableSizesWithInvalidScaleProperty(self):\n         self.assertEqual(self.view.available_sizes, {})\n \n     def test_getImageSizeWithInvalidScale(self):\n-        self.assertEqual(self.view.getImageSize(\'no-such-scale\'), (0, 0))\n+        self.assertEqual(self.view.getImageSize("no-such-scale"), (0, 0))\n \n     def testGuardedAccess(self):\n         # make sure it\'s not possible to access scales of forbidden images\n         self.item.__allow_access_to_unprotected_subobjects__ = 0\n-        ImageScaling._sizes = {\'foo\': (23, 23)}\n+        ImageScaling._sizes = {"foo": (23, 23)}\n         transaction.commit()\n         self.browser.addHeader(\n-            \'Authorization\',\n-            \'Basic {0:s}:{1:s}\'.format(TEST_USER_NAME, TEST_USER_PASSWORD)\n+            "Authorization",\n+            "Basic {0:s}:{1:s}".format(TEST_USER_NAME, TEST_USER_PASSWORD),\n         )\n         from zExceptions import Unauthorized\n+\n         with self.assertRaises(Unauthorized):\n             self.browser.open(\n-                self.layer[\'app\'].absolute_url() + \'/item/@@images/image/foo\'\n+                self.layer["app"].absolute_url() + "/item/@@images/image/foo"\n             )\n         self.item.__allow_access_to_unprotected_subobjects__ = 1\n \n+    def testSVGPublishThumbViaName(self):\n+        ImageScaling._sizes = {"thumb": (128, 128)}\n+\n+        data = getFile("image.svg")\n+        svg = DummyContent()\n+        svg.image = NamedImage(data, "image/svg+xml", u"image.svg")\n+        self.layer["app"]._setOb("svg", svg)\n+        svg = self.layer["app"].svg\n+\n+        transaction.commit()\n+\n+        # make sure traversing works as is and with scaling\n+        # first the field without a scale name\n+        self.browser.open(self.layer["app"].absolute_url() + "/svg/@@images/image")\n+\n+        self.assertEqual("image/svg+xml", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.contents, getFile("image.svg"))\n+\n+        # and last a scaled version\n+        self.browser.open(\n+            self.layer["app"].absolute_url() + "/svg/@@images/image/thumb"\n+        )\n+        self.assertEqual("image/svg+xml", self.browser.headers["content-type"])\n+        self.assertEqual(self.browser.contents, data)\n+\n \n def test_suite():\n     from unittest import defaultTestLoader\n+\n     return defaultTestLoader.loadTestsFromName(__name__)\n'

