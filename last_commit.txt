Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-30T18:47:56+02:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/4155e3d29e378e012dcd410d842b1f0a5a9e0f77

Link translation on content creation feature (#888)

* Link translation on content creation feature

* Add @translations-locator endpoint

* Add @translation-locator endpoint, docs and tests

* Fix for import from testing

* Make tests pass when ZSERVER_PORT is randomly assigned.

* Refactor parameter names to snake case

* Update tests

* Better wording

* Last rewording

* Update with the fixes introduced in #876, in order to get rid of the string checks

Co-authored-by: Timo Stollenwerk &lt;stollenwerk@kitconcept.com&gt;

Files changed:
A Data.fs
A news/887.feature
A src/plone/restapi/services/multilingual/locator.py
A src/plone/restapi/tests/http-examples/translation_locator.req
A src/plone/restapi/tests/http-examples/translation_locator.resp
A src/plone/restapi/tests/http-examples/translations_link_on_post.req
A src/plone/restapi/tests/http-examples/translations_link_on_post.resp
M docs/source/translations.rst
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/multilingual/configure.zcml
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_translations.py

b'diff --git a/Data.fs b/Data.fs\nnew file mode 100644\nindex 00000000..53634c7c\nBinary files /dev/null and b/Data.fs differ\ndiff --git a/docs/source/translations.rst b/docs/source/translations.rst\nindex fc61e17b..b92eb0c9 100644\n--- a/docs/source/translations.rst\n+++ b/docs/source/translations.rst\n@@ -84,6 +84,30 @@ endpoint of the content item and provide the language code you want to unlink.:\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_delete.resp\n    :language: http\n \n+Creating a translation from an existing content\n+-----------------------------------------------\n+\n+The POST content endpoint to a folder is capable also of linking this new content with an\n+exising translation using two parameters: ``translationOf`` and ``language``.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n+   :language: http\n+\n+Get location in the tree for new translations\n+---------------------------------------------\n+\n+When you create a translation in Plone, there are policies in place for finding a suitable\n+placement for it. This endpoint returns the proper placement for the newly going to be\n+created translation.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/translation_locator.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/translation_locator.resp\n+   :language: http\n \n Expansion\n ---------\n@@ -98,4 +122,4 @@ entry with the URL of the `@translations` endpoint:\n \n .. _`plone.app.multilingual`: https://pypi.python.org/pypi/plone.app.multilingual\n .. _`Products.LinguaPlone`: https://pypi.python.org/pypi/Products.LinguaPlone.\n-.. _`documentation`: https://docs.plone.org/develop/plone/i18n/translating_content.html\n\\ No newline at end of file\n+.. _`documentation`: https://docs.plone.org/develop/plone/i18n/translating_content.html\ndiff --git a/news/887.feature b/news/887.feature\nnew file mode 100644\nindex 00000000..46d03264\n--- /dev/null\n+++ b/news/887.feature\n@@ -0,0 +1,2 @@\n+Link translation on content creation feature and new @translation-locator endpoint\n+[sneridagh]\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex 30f6de2b..cdf69150 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -15,8 +15,19 @@\n from zope.event import notify\n from zope.interface import alsoProvides\n from zope.lifecycleevent import ObjectCreatedEvent\n+from zope.component import getMultiAdapter\n+from Products.CMFCore.utils import getToolByName\n \n import plone.protect.interfaces\n+import pkg_resources\n+import six\n+\n+\n+try:\n+    pkg_resources.get_distribution("plone.app.multilingual")\n+    PAM_INSTALLED = True\n+except pkg_resources.DistributionNotFound:\n+    PAM_INSTALLED = False\n \n \n class FolderPost(Service):\n@@ -29,6 +40,8 @@ def reply(self):\n         type_ = data.get("@type", None)\n         id_ = data.get("id", None)\n         title = data.get("title", None)\n+        translation_of = data.get("translation_of", None)\n+        language = data.get("language", None)\n \n         if not type_:\n             raise BadRequest("Property \'@type\' is required")\n@@ -75,6 +88,23 @@ def reply(self):\n \n         obj = add(self.context, obj, rename=not bool(id_))\n \n+        # Link translation given the translation_of property\n+        if PAM_INSTALLED:\n+            from plone.app.multilingual.interfaces import (\n+                IPloneAppMultilingualInstalled,\n+            )  # noqa\n+            from plone.app.multilingual.interfaces import ITranslationManager\n+\n+            if (\n+                IPloneAppMultilingualInstalled.providedBy(self.request)\n+                and translation_of\n+                and language\n+            ):\n+                source = self.get_object(translation_of)\n+                if source:\n+                    manager = ITranslationManager(source)\n+                    manager.register_translation(language, obj)\n+\n         self.request.response.setStatus(201)\n         self.request.response.setHeader("Location", obj.absolute_url())\n \n@@ -88,3 +118,26 @@ def reply(self):\n         serialized_obj["@id"] = obj.absolute_url()\n \n         return serialized_obj\n+\n+    def get_object(self, key):\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n+        catalog = getToolByName(self.context, "portal_catalog")\n+\n+        if key.startswith(portal.absolute_url()):\n+            # Resolve by URL\n+            key = key[len(portal.absolute_url()) + 1 :]\n+            if six.PY2:\n+                key = key.encode("utf8")\n+            return portal.restrictedTraverse(key, None)\n+        elif key.startswith("/"):\n+            if six.PY2:\n+                key = key.encode("utf8")\n+            # Resolve by path\n+            return portal.restrictedTraverse(key.lstrip("/"), None)\n+        else:\n+            # Resolve by UID\n+            brain = catalog(UID=key)\n+            if brain:\n+                return brain[0].getObject()\ndiff --git a/src/plone/restapi/services/multilingual/configure.zcml b/src/plone/restapi/services/multilingual/configure.zcml\nindex 11fb18e1..c1af6595 100644\n--- a/src/plone/restapi/services/multilingual/configure.zcml\n+++ b/src/plone/restapi/services/multilingual/configure.zcml\n@@ -31,4 +31,12 @@\n       permission="plone.app.multilingual.ManageTranslations"\n     />\n \n+  <plone:service\n+    method="GET"\n+    name="@translation-locator"\n+    for="Products.CMFCore.interfaces.IContentish"\n+    factory=".locator.TranslationLocator"\n+    permission="plone.app.multilingual.ManageTranslations"\n+  />\n+\n </configure>\ndiff --git a/src/plone/restapi/services/multilingual/locator.py b/src/plone/restapi/services/multilingual/locator.py\nnew file mode 100644\nindex 00000000..76f6c1ac\n--- /dev/null\n+++ b/src/plone/restapi/services/multilingual/locator.py\n@@ -0,0 +1,16 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+from plone.app.multilingual.interfaces import ITranslationLocator\n+\n+\n+class TranslationLocator(Service):\n+    """ Get translation locator placements information\n+    """\n+\n+    def reply(self):\n+        target_language = self.request.form["target_language"]\n+\n+        locator = ITranslationLocator(self.context)\n+        parent = locator(target_language)\n+\n+        return {"@id": parent.absolute_url()}\ndiff --git a/src/plone/restapi/tests/http-examples/translation_locator.req b/src/plone/restapi/tests/http-examples/translation_locator.req\nnew file mode 100644\nindex 00000000..dbbd8581\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translation_locator.req\n@@ -0,0 +1,3 @@\n+GET /plone/es/test-document/@translation-locator?target_language=de HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/translation_locator.resp b/src/plone/restapi/tests/http-examples/translation_locator.resp\nnew file mode 100644\nindex 00000000..6ffbd559\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translation_locator.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/de"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_link_on_post.req b/src/plone/restapi/tests/http-examples/translations_link_on_post.req\nnew file mode 100644\nindex 00000000..f01728dc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_link_on_post.req\n@@ -0,0 +1,12 @@\n+POST /plone/de HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "@type": "Document",\n+    "id": "mydocument",\n+    "language": "de",\n+    "title": "My German Document",\n+    "translation_of": "SomeUUID000000000000000000000003"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\nnew file mode 100644\nindex 00000000..5ee38eef\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n@@ -0,0 +1,64 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/de/mydocument\n+\n+{\n+  "@components": {\n+    "actions": {\n+      "@id": "http://localhost:55001/plone/de/mydocument/@actions"\n+    }, \n+    "breadcrumbs": {\n+      "@id": "http://localhost:55001/plone/de/mydocument/@breadcrumbs"\n+    }, \n+    "navigation": {\n+      "@id": "http://localhost:55001/plone/de/mydocument/@navigation"\n+    }, \n+    "translations": {\n+      "@id": "http://localhost:55001/plone/de/mydocument/@translations"\n+    }, \n+    "types": {\n+      "@id": "http://localhost:55001/plone/de/mydocument/@types"\n+    }, \n+    "workflow": {\n+      "@id": "http://localhost:55001/plone/de/mydocument/@workflow"\n+    }\n+  }, \n+  "@id": "http://localhost:55001/plone/de/mydocument", \n+  "@type": "Document", \n+  "UID": "SomeUUID000000000000000000000005", \n+  "allow_discussion": false, \n+  "changeNote": "", \n+  "contributors": [], \n+  "created": "1995-07-31T13:45:00", \n+  "creators": [\n+    "admin"\n+  ], \n+  "description": "", \n+  "effective": null, \n+  "exclude_from_nav": false, \n+  "expires": null, \n+  "id": "mydocument", \n+  "is_folderish": false, \n+  "language": {\n+    "title": "Deutsch", \n+    "token": "de"\n+  }, \n+  "layout": "document_view", \n+  "modified": "1995-07-31T17:30:00", \n+  "parent": {\n+    "@id": "http://localhost:55001/plone/de", \n+    "@type": "LRF", \n+    "description": "", \n+    "review_state": "published", \n+    "title": "Deutsch"\n+  }, \n+  "relatedItems": [], \n+  "review_state": "private", \n+  "rights": "", \n+  "subjects": [], \n+  "table_of_contents": null, \n+  "text": null, \n+  "title": "My German Document", \n+  "version": "current", \n+  "versioning_enabled": true\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 7caa8b3f..eea93186 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1560,6 +1560,7 @@ def setUp(self):\n         language_tool = api.portal.get_tool("portal_languages")\n         language_tool.addSupportedLanguage("en")\n         language_tool.addSupportedLanguage("es")\n+        language_tool.addSupportedLanguage("de")\n         applyProfile(self.portal, "plone.app.multilingual:default")\n \n         en_id = self.portal["en"].invokeFactory(\n@@ -1613,3 +1614,26 @@ def test_documentation_translations_delete(self):\n             json={"language": "es"},\n         )\n         save_request_and_response_for_docs("translations_delete", response)\n+\n+    def test_documentation_translations_link_on_post(self):\n+        response = self.api_session.post(\n+            "{}/de".format(self.portal.absolute_url()),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My German Document",\n+                "translation_of": self.es_content.UID(),\n+                "language": "de",\n+            },\n+        )\n+        save_request_and_response_for_docs("translations_link_on_post", response)\n+\n+    def test_documentation_translation_locator(self):\n+        response = self.api_session.get(\n+            "{}/@translation-locator?target_language=de".format(\n+                self.es_content.absolute_url()\n+            ),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        save_request_and_response_for_docs("translation_locator", response)\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 20fe15f5..46d88676 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -206,3 +206,75 @@ def test_calling_with_an_untranslated_content_gives_400(self):\n             json={"language": "es"},\n         )\n         self.assertEqual(400, response.status_code)\n+\n+\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n+class TestCreateContentsAsTranslations(unittest.TestCase):\n+    layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n+        login(self.portal, SITE_OWNER_NAME)\n+        self.es_content = createContentInContainer(\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        transaction.commit()\n+\n+    def test_post_to_folder_creates_document_translated(self):\n+        response = requests.post(\n+            "{}/de".format(self.portal.absolute_url()),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document DE",\n+                "translation_of": self.es_content.UID(),\n+                "language": "de",\n+            },\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.commit()\n+\n+        manager = ITranslationManager(self.es_content)\n+\n+        self.assertTrue("de" in manager.get_translations())\n+        self.assertEqual("My Document DE", manager.get_translations()["de"].title)\n+\n+        self.assertEqual("Document", response.json().get("@type"))\n+        self.assertEqual("mydocument", response.json().get("id"))\n+        self.assertEqual("My Document DE", response.json().get("title"))\n+\n+\n+@unittest.skipUnless(\n+    PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\n+)  # NOQA\n+class TestTranslationLocator(unittest.TestCase):\n+    layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.layer["request"]\n+        alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n+        login(self.portal, SITE_OWNER_NAME)\n+        self.es_content = createContentInContainer(\n+            self.portal["es"], "Document", title=u"Test document"\n+        )\n+        transaction.commit()\n+\n+    def test_translation_locator(self):\n+        response = requests.get(\n+            "{}/@translation-locator?target_language=de".format(\n+                self.es_content.absolute_url()\n+            ),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        self.assertEqual(200, response.status_code)\n+\n+        self.assertEqual(self.portal_url + "/de", response.json().get("@id"))\n'

