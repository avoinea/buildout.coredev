Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-03-25T09:18:40+01:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/60dc3fd003d65c44fee02ef7cdc85be7b63d916c

Fix deprecated logger.warn -&gt; logger.warning.

Files changed:
M Products/CMFPlone/controlpanel/browser/quickinstaller.py
M Products/CMFPlone/controlpanel/browser/security.py
M Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py
M Products/CMFPlone/controlpanel/utils.py
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/browser/cook.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/quickinstaller.py b/Products/CMFPlone/controlpanel/browser/quickinstaller.py\nindex 9516127520..cb4b0a4ac6 100644\n--- a/Products/CMFPlone/controlpanel/browser/quickinstaller.py\n+++ b/Products/CMFPlone/controlpanel/browser/quickinstaller.py\n@@ -455,7 +455,7 @@ def install_product(self, product_id, allow_hidden=False):\n \n         if not self.is_profile_installed(profile_id):\n             version = self.get_product_version(product_id)\n-            logger.warn(\'Profile %s has no metadata.xml version. Falling back \'\n+            logger.warning(\'Profile %s has no metadata.xml version. Falling back \'\n                         \'to package version %s\', profile_id, version)\n             self.ps.setLastVersionForProfile(profile_id, version)\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/security.py b/Products/CMFPlone/controlpanel/browser/security.py\nindex 8804f094c9..f050bc5742 100644\n--- a/Products/CMFPlone/controlpanel/browser/security.py\n+++ b/Products/CMFPlone/controlpanel/browser/security.py\n@@ -62,7 +62,7 @@ def _email_list(self):\n                 if email:\n                     email = pas.applyTransform(email)\n                 else:\n-                    logger.warn("User %s has no email address.",\n+                    logger.warning("User %s has no email address.",\n                                 user.getUserId())\n                     # Add the normal login name anyway.\n                     email = pas.applyTransform(user.getUserName())\n@@ -75,7 +75,7 @@ def check_email(self):\n         duplicates = []\n         for email, userids in self._email_list.items():\n             if len(userids) > 1:\n-                logger.warn("Duplicate accounts for email address %s: %r",\n+                logger.warning("Duplicate accounts for email address %s: %r",\n                             email, userids)\n                 duplicates.append((email, userids))\n \n@@ -107,7 +107,7 @@ def check_userid(self):\n         duplicates = []\n         for login_name, userids in self._userid_list.items():\n             if len(userids) > 1:\n-                logger.warn("Duplicate accounts for lower case user id "\n+                logger.warning("Duplicate accounts for lower case user id "\n                             "%s: %r", login_name, userids)\n                 duplicates.append((login_name, userids))\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py\nindex b42f20d465..e9795df1f5 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py\n@@ -72,7 +72,7 @@ def doSearch(self, searchString):\n             user = acl.getUserById(userId)\n             # play safe, though this should never happen\n             if user is None:\n-                logger.warn(\n+                logger.warning(\n                     \'Skipped user without principal object: %s\' % userId)\n                 continue\n             allAssignedRoles = []\n@@ -98,7 +98,7 @@ def doSearch(self, searchString):\n             user = mtool.getMemberById(userId)\n             # play safe, though this should never happen\n             if user is None:\n-                logger.warn(\n+                logger.warning(\n                     \'Skipped user without principal object: %s\' % userId)\n                 continue\n             explicitlyAssignedRoles = []\ndiff --git a/Products/CMFPlone/controlpanel/utils.py b/Products/CMFPlone/controlpanel/utils.py\nindex c068d521ba..54ee424218 100644\n--- a/Products/CMFPlone/controlpanel/utils.py\n+++ b/Products/CMFPlone/controlpanel/utils.py\n@@ -28,7 +28,7 @@ def migrate_to_email_login(context):\n             login_name = pas.applyTransform(email)\n             pas.updateLoginName(user_id, login_name)\n         else:\n-            logger.warn("User %s has no email address.", user_id)\n+            logger.warning("User %s has no email address.", user_id)\n \n \n def migrate_from_email_login(context):\ndiff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 3b5b8c09c3..c6ecd84c72 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -50,7 +50,7 @@ def get_resource(context, path):\n     try:\n         resource = context.unrestrictedTraverse(path)\n     except NotFound:\n-        logger.warn(u\'Could not find resource {0}. You may have to create it first.\'.format(path))  # noqa\n+        logger.warning(u\'Could not find resource {0}. You may have to create it first.\'.format(path))  # noqa\n         return\n \n     if isinstance(resource, FilesystemFile):\ndiff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py\nindex da999bfe22..42fd9faee6 100644\n--- a/Products/CMFPlone/resources/browser/cook.py\n+++ b/Products/CMFPlone/resources/browser/cook.py\n@@ -71,7 +71,7 @@ def cookWhenChangingSettings(context, bundle=None):\n     css_path = bundle.csscompilation\n \n     if not js_path and not css_path:\n-        logger.warn(\n+        logger.warning(\n             \'No js_path or css_path found. We need a plone.resource \'\n             \'based resource path in order to store the compiled JS and CSS.\'\n         )\n@@ -108,7 +108,7 @@ def cookWhenChangingSettings(context, bundle=None):\n                         \'\\n/* Could not find resource: {0} */\\n\\n\'.format(\n                             css_resource\n                         )\n-                    logger.warn(\'Could not find resource: %s\', css_resource)\n+                    logger.warning(\'Could not find resource: %s\', css_resource)\n         if not resource.js or not js_path:\n             continue\n         js_url = siteUrl + \'/\' + resource.js\n@@ -130,9 +130,9 @@ def cookWhenChangingSettings(context, bundle=None):\n                         resource.js,\n                         js\n                     )\n-                logger.warn(\'Error cooking resource: %s\', resource.js)\n+                logger.warning(\'Error cooking resource: %s\', resource.js)\n         else:\n-            logger.warn(\'Could not find resource: %s\', resource.js)\n+            logger.warning(\'Could not find resource: %s\', resource.js)\n             cooked_js += \'\\n/* Could not find resource: {0} */\\n\\n\'.format(\n                 js_url\n             )\n@@ -164,7 +164,7 @@ def _write_resource(resource_path, cooked_string):\n             folder.writeFile(resource_filepath, fi)\n             logger.info(\'Writing cooked resource: %s\', resource_path)\n         except NotFound:\n-            logger.warn(\'Error writing cooked resource: %s\', resource_path)\n+            logger.warning(\'Error writing cooked resource: %s\', resource_path)\n \n     _write_resource(js_path, cooked_js)\n     _write_resource(css_path, cooked_css)\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-03-27T08:40:44+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/f31f3391f8764c95058d88bcf61b102d86d5977b

Merge pull request #3071 from plone/fix-deprecated-warn

Fix deprecated logger.warn -&gt; logger.warning.

Files changed:
M Products/CMFPlone/controlpanel/browser/quickinstaller.py
M Products/CMFPlone/controlpanel/browser/security.py
M Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py
M Products/CMFPlone/controlpanel/utils.py
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/browser/cook.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/quickinstaller.py b/Products/CMFPlone/controlpanel/browser/quickinstaller.py\nindex 9516127520..cb4b0a4ac6 100644\n--- a/Products/CMFPlone/controlpanel/browser/quickinstaller.py\n+++ b/Products/CMFPlone/controlpanel/browser/quickinstaller.py\n@@ -455,7 +455,7 @@ def install_product(self, product_id, allow_hidden=False):\n \n         if not self.is_profile_installed(profile_id):\n             version = self.get_product_version(product_id)\n-            logger.warn(\'Profile %s has no metadata.xml version. Falling back \'\n+            logger.warning(\'Profile %s has no metadata.xml version. Falling back \'\n                         \'to package version %s\', profile_id, version)\n             self.ps.setLastVersionForProfile(profile_id, version)\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/security.py b/Products/CMFPlone/controlpanel/browser/security.py\nindex 8804f094c9..f050bc5742 100644\n--- a/Products/CMFPlone/controlpanel/browser/security.py\n+++ b/Products/CMFPlone/controlpanel/browser/security.py\n@@ -62,7 +62,7 @@ def _email_list(self):\n                 if email:\n                     email = pas.applyTransform(email)\n                 else:\n-                    logger.warn("User %s has no email address.",\n+                    logger.warning("User %s has no email address.",\n                                 user.getUserId())\n                     # Add the normal login name anyway.\n                     email = pas.applyTransform(user.getUserName())\n@@ -75,7 +75,7 @@ def check_email(self):\n         duplicates = []\n         for email, userids in self._email_list.items():\n             if len(userids) > 1:\n-                logger.warn("Duplicate accounts for email address %s: %r",\n+                logger.warning("Duplicate accounts for email address %s: %r",\n                             email, userids)\n                 duplicates.append((email, userids))\n \n@@ -107,7 +107,7 @@ def check_userid(self):\n         duplicates = []\n         for login_name, userids in self._userid_list.items():\n             if len(userids) > 1:\n-                logger.warn("Duplicate accounts for lower case user id "\n+                logger.warning("Duplicate accounts for lower case user id "\n                             "%s: %r", login_name, userids)\n                 duplicates.append((login_name, userids))\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py\nindex b42f20d465..e9795df1f5 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.py\n@@ -72,7 +72,7 @@ def doSearch(self, searchString):\n             user = acl.getUserById(userId)\n             # play safe, though this should never happen\n             if user is None:\n-                logger.warn(\n+                logger.warning(\n                     \'Skipped user without principal object: %s\' % userId)\n                 continue\n             allAssignedRoles = []\n@@ -98,7 +98,7 @@ def doSearch(self, searchString):\n             user = mtool.getMemberById(userId)\n             # play safe, though this should never happen\n             if user is None:\n-                logger.warn(\n+                logger.warning(\n                     \'Skipped user without principal object: %s\' % userId)\n                 continue\n             explicitlyAssignedRoles = []\ndiff --git a/Products/CMFPlone/controlpanel/utils.py b/Products/CMFPlone/controlpanel/utils.py\nindex c068d521ba..54ee424218 100644\n--- a/Products/CMFPlone/controlpanel/utils.py\n+++ b/Products/CMFPlone/controlpanel/utils.py\n@@ -28,7 +28,7 @@ def migrate_to_email_login(context):\n             login_name = pas.applyTransform(email)\n             pas.updateLoginName(user_id, login_name)\n         else:\n-            logger.warn("User %s has no email address.", user_id)\n+            logger.warning("User %s has no email address.", user_id)\n \n \n def migrate_from_email_login(context):\ndiff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex 3b5b8c09c3..c6ecd84c72 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -50,7 +50,7 @@ def get_resource(context, path):\n     try:\n         resource = context.unrestrictedTraverse(path)\n     except NotFound:\n-        logger.warn(u\'Could not find resource {0}. You may have to create it first.\'.format(path))  # noqa\n+        logger.warning(u\'Could not find resource {0}. You may have to create it first.\'.format(path))  # noqa\n         return\n \n     if isinstance(resource, FilesystemFile):\ndiff --git a/Products/CMFPlone/resources/browser/cook.py b/Products/CMFPlone/resources/browser/cook.py\nindex da999bfe22..42fd9faee6 100644\n--- a/Products/CMFPlone/resources/browser/cook.py\n+++ b/Products/CMFPlone/resources/browser/cook.py\n@@ -71,7 +71,7 @@ def cookWhenChangingSettings(context, bundle=None):\n     css_path = bundle.csscompilation\n \n     if not js_path and not css_path:\n-        logger.warn(\n+        logger.warning(\n             \'No js_path or css_path found. We need a plone.resource \'\n             \'based resource path in order to store the compiled JS and CSS.\'\n         )\n@@ -108,7 +108,7 @@ def cookWhenChangingSettings(context, bundle=None):\n                         \'\\n/* Could not find resource: {0} */\\n\\n\'.format(\n                             css_resource\n                         )\n-                    logger.warn(\'Could not find resource: %s\', css_resource)\n+                    logger.warning(\'Could not find resource: %s\', css_resource)\n         if not resource.js or not js_path:\n             continue\n         js_url = siteUrl + \'/\' + resource.js\n@@ -130,9 +130,9 @@ def cookWhenChangingSettings(context, bundle=None):\n                         resource.js,\n                         js\n                     )\n-                logger.warn(\'Error cooking resource: %s\', resource.js)\n+                logger.warning(\'Error cooking resource: %s\', resource.js)\n         else:\n-            logger.warn(\'Could not find resource: %s\', resource.js)\n+            logger.warning(\'Could not find resource: %s\', resource.js)\n             cooked_js += \'\\n/* Could not find resource: {0} */\\n\\n\'.format(\n                 js_url\n             )\n@@ -164,7 +164,7 @@ def _write_resource(resource_path, cooked_string):\n             folder.writeFile(resource_filepath, fi)\n             logger.info(\'Writing cooked resource: %s\', resource_path)\n         except NotFound:\n-            logger.warn(\'Error writing cooked resource: %s\', resource_path)\n+            logger.warning(\'Error writing cooked resource: %s\', resource_path)\n \n     _write_resource(js_path, cooked_js)\n     _write_resource(css_path, cooked_css)\n'

