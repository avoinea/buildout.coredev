Repository: plone.app.content


Branch: refs/heads/3.5.x
Date: 2020-03-03T22:00:26+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.content/commit/487a02853282a7a94b1fc136811dcfbff046dae2

Integrate Plone20200121 hotfix: prevent XSS in title.

Part of https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher

Files changed:
A news/3021.bugfix
M plone/app/content/browser/contents/__init__.py
M plone/app/content/tests/test_contents.py

b'diff --git a/news/3021.bugfix b/news/3021.bugfix\nnew file mode 100644\nindex 0000000..0d48d39\n--- /dev/null\n+++ b/news/3021.bugfix\n@@ -0,0 +1,3 @@\n+Integrate Plone20200121 hotfix: prevent XSS in title.\n+Part of https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+[maurits]\ndiff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py\nindex b49dad4..4633a11 100644\n--- a/plone/app/content/browser/contents/__init__.py\n+++ b/plone/app/content/browser/contents/__init__.py\n@@ -26,6 +26,11 @@\n import six\n import zope.deferredimport\n \n+try:\n+    from html import escape\n+except ImportError:\n+    from cgi import escape\n+\n \n zope.deferredimport.deprecated(\n     # remove in Plone 5.1\n@@ -382,7 +387,7 @@ def __call__(self):\n         while not context == top_site:\n             crumbs.append({\n                 \'id\': context.getId(),\n-                \'title\': utils.pretty_title_or_id(context, context)\n+                \'title\': escape(utils.pretty_title_or_id(context, context))\n             })\n             context = utils.parent(context)\n \n@@ -406,6 +411,8 @@ def __call__(self):\n                     val = val()\n                 if key == \'path\':\n                     val = val[len(base_path):]\n+                if key == \'Title\':\n+                    val = escape(val)\n                 item[key] = val\n \n         self.request.response.setHeader(\ndiff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex 78f0df3..72e2bec 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -1,20 +1,25 @@\n # -*- coding: utf-8 -*-\n from datetime import datetime\n from datetime import timedelta\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.dexterity.fti import DexterityFTI\n from plone.protect.authenticator import createToken\n from plone.registry.interfaces import IRegistry\n+from plone.testing.z2 import Browser\n from plone.uuid.interfaces import IUUID\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n import json\n import mock\n+import transaction\n import unittest\n \n \n@@ -563,3 +568,89 @@ def test_fc_properties__changes__with_recurse(self):\n         self.assertEqual(self.portal.main1.sub1.exclude_from_nav, False)\n         self.assertEqual(self.portal.main1.sub1.subsub1.exclude_from_nav, False)  # noqa\n         self.assertEqual(self.portal.main1.sub2.exclude_from_nav, False)\n+\n+\n+# Text for testing that the title is escaped.\n+ESCAPED = "&lt;script&gt;"\n+HACKED = \'<script>alert("hacked")</script>\'\n+\n+\n+class TestTitleEscape(unittest.TestCase):\n+    """Test that the title in the folder contents is escaped.\n+\n+    From PloneHotfix20200121, see\n+    https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+    """\n+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+\n+    def get_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        browser.addHeader(\n+            "Authorization",\n+            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        return browser\n+\n+    def assert_not_hacked(self, browser):\n+        body = browser.contents\n+        hacked = HACKED\n+        if not browser.isHtml:\n+            # Assume json.\n+            hacked = json.dumps(HACKED)\n+\n+        # This gives a too verbose error message, showing the entire body:\n+        # self.assertNotIn(HACKED, body)\n+        # So we roll our own less verbose version.\n+        if hacked in body:\n+            index = body.index(hacked)\n+            start = max(0, index - 50)\n+            end = min(index + len(hacked) + 50, len(body))\n+            assert False, "Hacked script found in body: ... {0} ...".format(\n+                body[start:end]\n+            )\n+\n+        # The escaped version of the HACKED text should be in the response text.\n+        self.assertIn(ESCAPED, body)\n+\n+    def test_normal_title(self):\n+        # Create a folder and page with normal title.\n+        normal = "\'Normal title"\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder1", title=normal)\n+        folder1 = self.portal.folder1\n+        self.assertEqual(folder1.Title(), normal)\n+        folder1.invokeFactory("Document", id="page1", title=normal)\n+        page1 = folder1.page1\n+        self.assertEqual(page1.Title(), normal)\n+        transaction.commit()\n+\n+        # Check the output of the normal case for comparison.\n+        browser = self.get_browser()\n+        browser.open(folder1.absolute_url() + "/@@fc-contextInfo")\n+        self.assertNotIn(ESCAPED, browser.contents)\n+\n+    def test_xss_from_title(self):\n+        # Does a script tag as title show up anywhere in the html?\n+        # It might end up in the main menu.\n+\n+        # Create a folder and page with a hacked title.\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder2", title=HACKED)\n+        folder2 = self.portal.folder2\n+        self.assertEqual(folder2.Title(), HACKED)\n+        folder2.invokeFactory("Document", id="page2", title=HACKED)\n+        page2 = folder2.page2\n+        self.assertEqual(page2.Title(), HACKED)\n+        transaction.commit()\n+\n+        # Check the output of this hacked case.\n+        browser = self.get_browser()\n+        # Note: the content of the normal page, or /folder_contents\n+        # is checked in the plone.app.layout tests.\n+        browser.open(folder2.absolute_url() + "/@@fc-contextInfo")\n+        self.assert_not_hacked(browser)\n'

Repository: plone.app.content


Branch: refs/heads/3.5.x
Date: 2020-03-04T08:08:38+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.content/commit/3021f8e5a3dd2a51d18915cb849014aea2a7e20e

Merge pull request #195 from plone/maurits/plonehotfix2020-35x

Integrate Plone20200121 hotfix: prevent XSS in title. [3.5.x]

Files changed:
A news/3021.bugfix
M plone/app/content/browser/contents/__init__.py
M plone/app/content/tests/test_contents.py

b'diff --git a/news/3021.bugfix b/news/3021.bugfix\nnew file mode 100644\nindex 0000000..0d48d39\n--- /dev/null\n+++ b/news/3021.bugfix\n@@ -0,0 +1,3 @@\n+Integrate Plone20200121 hotfix: prevent XSS in title.\n+Part of https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+[maurits]\ndiff --git a/plone/app/content/browser/contents/__init__.py b/plone/app/content/browser/contents/__init__.py\nindex b49dad4..4633a11 100644\n--- a/plone/app/content/browser/contents/__init__.py\n+++ b/plone/app/content/browser/contents/__init__.py\n@@ -26,6 +26,11 @@\n import six\n import zope.deferredimport\n \n+try:\n+    from html import escape\n+except ImportError:\n+    from cgi import escape\n+\n \n zope.deferredimport.deprecated(\n     # remove in Plone 5.1\n@@ -382,7 +387,7 @@ def __call__(self):\n         while not context == top_site:\n             crumbs.append({\n                 \'id\': context.getId(),\n-                \'title\': utils.pretty_title_or_id(context, context)\n+                \'title\': escape(utils.pretty_title_or_id(context, context))\n             })\n             context = utils.parent(context)\n \n@@ -406,6 +411,8 @@ def __call__(self):\n                     val = val()\n                 if key == \'path\':\n                     val = val[len(base_path):]\n+                if key == \'Title\':\n+                    val = escape(val)\n                 item[key] = val\n \n         self.request.response.setHeader(\ndiff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex 78f0df3..72e2bec 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -1,20 +1,25 @@\n # -*- coding: utf-8 -*-\n from datetime import datetime\n from datetime import timedelta\n+from plone.app.content.testing import PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n from plone.app.content.testing import PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\n from plone.app.testing import login\n from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.dexterity.fti import DexterityFTI\n from plone.protect.authenticator import createToken\n from plone.registry.interfaces import IRegistry\n+from plone.testing.z2 import Browser\n from plone.uuid.interfaces import IUUID\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n \n import json\n import mock\n+import transaction\n import unittest\n \n \n@@ -563,3 +568,89 @@ def test_fc_properties__changes__with_recurse(self):\n         self.assertEqual(self.portal.main1.sub1.exclude_from_nav, False)\n         self.assertEqual(self.portal.main1.sub1.subsub1.exclude_from_nav, False)  # noqa\n         self.assertEqual(self.portal.main1.sub2.exclude_from_nav, False)\n+\n+\n+# Text for testing that the title is escaped.\n+ESCAPED = "&lt;script&gt;"\n+HACKED = \'<script>alert("hacked")</script>\'\n+\n+\n+class TestTitleEscape(unittest.TestCase):\n+    """Test that the title in the folder contents is escaped.\n+\n+    From PloneHotfix20200121, see\n+    https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+    """\n+    layer = PLONE_APP_CONTENT_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.app = self.layer["app"]\n+\n+    def get_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        browser.addHeader(\n+            "Authorization",\n+            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        return browser\n+\n+    def assert_not_hacked(self, browser):\n+        body = browser.contents\n+        hacked = HACKED\n+        if not browser.isHtml:\n+            # Assume json.\n+            hacked = json.dumps(HACKED)\n+\n+        # This gives a too verbose error message, showing the entire body:\n+        # self.assertNotIn(HACKED, body)\n+        # So we roll our own less verbose version.\n+        if hacked in body:\n+            index = body.index(hacked)\n+            start = max(0, index - 50)\n+            end = min(index + len(hacked) + 50, len(body))\n+            assert False, "Hacked script found in body: ... {0} ...".format(\n+                body[start:end]\n+            )\n+\n+        # The escaped version of the HACKED text should be in the response text.\n+        self.assertIn(ESCAPED, body)\n+\n+    def test_normal_title(self):\n+        # Create a folder and page with normal title.\n+        normal = "\'Normal title"\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder1", title=normal)\n+        folder1 = self.portal.folder1\n+        self.assertEqual(folder1.Title(), normal)\n+        folder1.invokeFactory("Document", id="page1", title=normal)\n+        page1 = folder1.page1\n+        self.assertEqual(page1.Title(), normal)\n+        transaction.commit()\n+\n+        # Check the output of the normal case for comparison.\n+        browser = self.get_browser()\n+        browser.open(folder1.absolute_url() + "/@@fc-contextInfo")\n+        self.assertNotIn(ESCAPED, browser.contents)\n+\n+    def test_xss_from_title(self):\n+        # Does a script tag as title show up anywhere in the html?\n+        # It might end up in the main menu.\n+\n+        # Create a folder and page with a hacked title.\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder2", title=HACKED)\n+        folder2 = self.portal.folder2\n+        self.assertEqual(folder2.Title(), HACKED)\n+        folder2.invokeFactory("Document", id="page2", title=HACKED)\n+        page2 = folder2.page2\n+        self.assertEqual(page2.Title(), HACKED)\n+        transaction.commit()\n+\n+        # Check the output of this hacked case.\n+        browser = self.get_browser()\n+        # Note: the content of the normal page, or /folder_contents\n+        # is checked in the plone.app.layout tests.\n+        browser.open(folder2.absolute_url() + "/@@fc-contextInfo")\n+        self.assert_not_hacked(browser)\n'

