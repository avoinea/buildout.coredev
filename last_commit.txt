Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-20T10:52:31+01:00
Author: Thomas Buchberger (buchi) <thomas.buchberger@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/c30d607e5e506987bdee2509c8e740759cd62dd5

Resolve paths to UIDs (#820)

* Resolve paths to UIDs

On deserialization resolve paths UIDs.
On serialization resolve UIDs to paths.

Closes ##808

* Add missing coding magic comment to test_resolveuid.py.

* Fix failing tests due to tiles -&gt; blocks renaming. Fix path2uid function for py3.

* Re-add flake8-ignores to be compatible with black.

* Fix path2uid for py2.

* Fix path2uid on py2.

* Fix unrestrictedTraverse for py2/3 properly.

* Rely on url instead of href. Print debug statements on (de)serialize blocks.

* Resolveuid in blocks functional test (#865)

* Add functional resolveuid test that proves we do not store a resolveUID link in the database.

* Add second assert to test the doc itself not just the response.

* Fix Plone 4.3 on Travis.

* fix block serializer for resolveuid

* make tests broke for Timo ;)

* Do not check the serialized output which does not contain the resolveUID.

Co-authored-by: Andrea Cecchi &lt;andrea.cecchi85@gmail.com&gt;

* Update credits in change log for resolveUID

* Fix test runner on Jenkins which randomly assigns ports.

Co-authored-by: Timo Stollenwerk &lt;stollenwerk@kitconcept.com&gt;
Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;
Co-authored-by: Andrea Cecchi &lt;andrea.cecchi85@gmail.com&gt;

Files changed:
A news/808.feature
A src/plone/restapi/deserializer/blocks.py
A src/plone/restapi/serializer/blocks.py
A src/plone/restapi/tests/test_resolveuid.py
A src/plone/restapi/tests/test_resolveuid_functional.py
M plone-4.3.x.cfg
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/serializer/configure.zcml

b'diff --git a/news/808.feature b/news/808.feature\nnew file mode 100644\nindex 00000000..4f375a34\n--- /dev/null\n+++ b/news/808.feature\n@@ -0,0 +1,3 @@\n+Resolve links in blocks to UIDs during deserialization and back to paths during\n+serialization.\n+[buchi,timo,cekk]\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex f0a28357..8dff8a76 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -36,4 +36,4 @@ sphinxcontrib-httpdomain = 1.5.0\n sphinx-rtd-theme = 0.2.4\n Jinja2 = 2.10\n Babel = 2.5.1\n-astunparse = 1.6.2\n\\ No newline at end of file\n+astunparse = 1.6.2\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nnew file mode 100644\nindex 00000000..0c731d49\n--- /dev/null\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -0,0 +1,62 @@\n+# -*- coding: utf-8 -*-\n+from Acquisition import aq_parent\n+from plone.restapi.behaviors import IBlocks\n+from plone.restapi.deserializer.dxfields import DefaultFieldDeserializer\n+from plone.restapi.interfaces import IFieldDeserializer\n+from plone.schema import IJSONField\n+from plone.uuid.interfaces import IUUID\n+from plone.uuid.interfaces import IUUIDAware\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserRequest\n+\n+\n+def path2uid(context, path):\n+    # unrestrictedTraverse requires a string on py3. see:\n+    # https://github.com/zopefoundation/Zope/issues/674\n+    if not isinstance(path, str):\n+        path = path.decode("utf-8")\n+    obj = context.unrestrictedTraverse(path, None)\n+    if obj is None:\n+        return None, None\n+    segments = path.split("/")\n+    suffix = ""\n+    while not IUUIDAware.providedBy(obj):\n+        obj = aq_parent(obj)\n+        suffix += "/" + segments.pop()\n+    return IUUID(obj), suffix\n+\n+\n+@implementer(IFieldDeserializer)\n+@adapter(IJSONField, IBlocks, IBrowserRequest)\n+class BlocksJSONFieldDeserializer(DefaultFieldDeserializer):\n+    def __call__(self, value):\n+        value = super(BlocksJSONFieldDeserializer, self).__call__(value)\n+\n+        # Convert absolute links to resolveuid\n+        portal = getMultiAdapter(\n+            (self.context, self.request), name="plone_portal_state"\n+        ).portal()\n+        portal_url = portal.absolute_url()\n+        context_url = self.context.absolute_url()\n+        relative_up = len(context_url.split("/")) - len(portal_url.split("/"))\n+        if self.field.getName() == "blocks":\n+            for block in value.values():\n+                if block.get("@type") == "text":\n+                    entity_map = block.get("text", {}).get("entityMap", {})\n+                    for entity in entity_map.values():\n+                        if entity.get("type") == "LINK":\n+                            href = entity.get("data", {}).get("url", "")\n+                            before = href  # noqa\n+                            if href and href.startswith(portal_url):\n+                                path = href[len(portal_url) + 1 :].encode("utf8")\n+                                uid, suffix = path2uid(portal, path)\n+                                if uid:\n+                                    href = relative_up * "../" + "resolveuid/" + uid\n+                                    if suffix:\n+                                        href += suffix\n+                                    entity["data"]["href"] = href\n+                                    entity["data"]["url"] = href\n+                                print("DESERIALIZE " + before + " -> " + href)  # noqa\n+        return value\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 1e06627a..6f9de628 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -16,6 +16,7 @@\n   <adapter factory=".dxfields.TimedeltaFieldDeserializer" />\n   <adapter factory=".dxfields.NamedFieldDeserializer" />\n   <adapter factory=".dxfields.RichTextFieldDeserializer" />\n+  <adapter factory=".blocks.BlocksJSONFieldDeserializer" />\n \n   <adapter factory=".local_roles.DeserializeFromJson"\n            name="local_roles"/>\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nnew file mode 100644\nindex 00000000..58c948b8\n--- /dev/null\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -0,0 +1,46 @@\n+# -*- coding: utf-8 -*-\n+from plone.outputfilters.browser.resolveuid import uuidToURL\n+from plone.restapi.behaviors import IBlocks\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n+from plone.schema import IJSONField\n+from zope.component import adapter\n+from zope.interface import implementer\n+from zope.interface import Interface\n+\n+import copy\n+import re\n+\n+\n+RESOLVEUID_RE = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n+\n+\n+@adapter(IJSONField, IBlocks, Interface)\n+@implementer(IFieldSerializer)\n+class BlocksJSONFieldSerializer(DefaultFieldSerializer):\n+    def __call__(self):\n+        value = copy.deepcopy(self.get_value())\n+\n+        # Resolve UID links\n+        if self.field.getName() == "blocks":\n+            for block in value.values():\n+                if block.get("@type") == "text":\n+                    entity_map = block.get("text", {}).get("entityMap", {})\n+                    for entity in entity_map.values():\n+                        if entity.get("type") == "LINK":\n+                            href = entity.get("data", {}).get("url", "")\n+                            before = href  # noqa\n+                            if href:\n+                                match = RESOLVEUID_RE.match(href)\n+                                if match is not None:\n+                                    uid, suffix = match.groups()\n+                                    href = uuidToURL(uid)\n+                                    if href is None:\n+                                        continue\n+                                    if suffix:\n+                                        href += "/" + suffix\n+                                    entity["data"]["href"] = href\n+                                    entity["data"]["url"] = href\n+                                    print("SERIALIZE " + before + " -> " + href)  # noqa\n+        return json_compatible(value)\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 8a1f6af6..f63b615a 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -20,6 +20,7 @@\n     <adapter factory=".dxfields.FileFieldSerializer" />\n     <adapter factory=".dxfields.ImageFieldSerializer" />\n     <adapter factory=".dxfields.RichttextFieldSerializer" />\n+    <adapter factory=".blocks.BlocksJSONFieldSerializer" />\n \n     <configure zcml:condition="installed Products.Archetypes">\n         <adapter factory=".atcontent.SerializeToJson" />\ndiff --git a/src/plone/restapi/tests/test_resolveuid.py b/src/plone/restapi/tests/test_resolveuid.py\nnew file mode 100644\nindex 00000000..a467bf75\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_resolveuid.py\n@@ -0,0 +1,324 @@\n+# -*- coding: utf-8 -*-\n+from plone.dexterity.utils import iterSchemata\n+from plone.restapi.interfaces import IFieldDeserializer\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n+from plone.uuid.interfaces import IUUID\n+from unittest import TestCase\n+from z3c.form.interfaces import IDataManager\n+from zope.component import getMultiAdapter\n+\n+\n+class TestBlocksResolveUID(TestCase):\n+    layer = PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Document", id="doc1", title="Document with Blocks"\n+            )\n+        ]\n+        self.doc2 = self.portal[\n+            self.portal.invokeFactory("Document", id="doc2", title="Target Document")\n+        ]\n+\n+    def serialize(self, fieldname, value):\n+        for schema in iterSchemata(self.doc1):\n+            if fieldname in schema:\n+                field = schema.get(fieldname)\n+                break\n+        dm = getMultiAdapter((self.doc1, field), IDataManager)\n+        dm.set(value)\n+        serializer = getMultiAdapter((field, self.doc1, self.request), IFieldSerializer)\n+        return serializer()\n+\n+    def deserialize(self, fieldname, value):\n+        for schema in iterSchemata(self.portal.doc1):\n+            if fieldname in schema:\n+                field = schema.get(fieldname)\n+                break\n+        deserializer = getMultiAdapter(\n+            (field, self.portal.doc1, self.request), IFieldDeserializer\n+        )\n+        return deserializer(value)\n+\n+    def test_blocks_field_serialization_resolves_uids(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.doc2.absolute_url(),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.doc2.absolute_url(),\n+        )\n+\n+    def test_resolveuid_keeps_suffix(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}/view".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}/view".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.doc2.absolute_url() + "/view",\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.doc2.absolute_url() + "/view",\n+        )\n+\n+    def test_keeps_resolveuid_link_if_unknown_uid(self):\n+        uid = "0000"\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+\n+    def test_blocks_field_serialization_doesnt_update_stored_values(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertNotEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            blocks["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+        )\n+        self.assertNotEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            blocks["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+        )\n+\n+    def test_blocks_field_deserialization_resolves_paths_to_uids(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": self.doc2.absolute_url(),\n+                                "rel": "nofollow",\n+                                "url": self.doc2.absolute_url(),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.deserialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            "../resolveuid/{}".format(uid),\n+        )\n+\n+    def test_keeps_url_if_unknown_path(self):\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": self.portal.absolute_url() + "/foo",\n+                                "rel": "nofollow",\n+                                "url": self.portal.absolute_url() + "/foo",\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.deserialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.portal.absolute_url() + "/foo",\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.portal.absolute_url() + "/foo",\n+        )\n+\n+    def test_path_keeps_suffix(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": self.doc2.absolute_url() + "/view",\n+                                "rel": "nofollow",\n+                                "url": self.doc2.absolute_url() + "/view",\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.deserialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            "../resolveuid/{}/view".format(uid),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            "../resolveuid/{}/view".format(uid),\n+        )\ndiff --git a/src/plone/restapi/tests/test_resolveuid_functional.py b/src/plone/restapi/tests/test_resolveuid_functional.py\nnew file mode 100644\nindex 00000000..65e01179\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_resolveuid_functional.py\n@@ -0,0 +1,104 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.dexterity.fti import DexterityFTI\n+from plone.restapi.behaviors import IBlocks\n+from plone.uuid.interfaces import IUUID\n+\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from zope.interface import alsoProvides\n+\n+import transaction\n+import unittest\n+\n+\n+class TestResolveUIDFunctional(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("blockspage")\n+        self.portal.portal_types._setObject("blockspage", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.behaviors = ("volto.blocks",)\n+        self.fti = fti\n+        alsoProvides(self.request, IBlocks)\n+        self.portal_url = self.portal.absolute_url()\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal.invokeFactory("Document", id="target", title="Target")\n+        self.target = self.portal.target\n+        self.target_uuid = IUUID(self.target)\n+\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_resolveuid(self):\n+        self.api_session.post(\n+            "/",\n+            json={\n+                "title": "Document",\n+                "@type": "blockspage",\n+                "blocks": {\n+                    "ca5908a5-3f58-4cd5-beb7-9bd1539d6744": {"@type": "title"},\n+                    "791bf004-7c88-4278-8490-13b85c3fa4b4": {\n+                        "@type": "text",\n+                        "text": {\n+                            "blocks": [\n+                                {\n+                                    "key": "3bnq6",\n+                                    "text": "Link",\n+                                    "type": "unstyled",\n+                                    "depth": 0,\n+                                    "inlineStyleRanges": [],\n+                                    "entityRanges": [\n+                                        {"offset": 0, "length": 4, "key": 0}\n+                                    ],\n+                                    "data": {},\n+                                }\n+                            ],\n+                            "entityMap": {\n+                                "0": {\n+                                    "type": "LINK",\n+                                    "mutability": "MUTABLE",\n+                                    "data": {\n+                                        "url": "{}/target".format(self.portal_url)\n+                                    },\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+                "blocks_layout": {\n+                    "items": [\n+                        "ca5908a5-3f58-4cd5-beb7-9bd1539d6744",\n+                        "791bf004-7c88-4278-8490-13b85c3fa4b4",\n+                    ]\n+                },\n+            },\n+        )\n+        transaction.commit()\n+        self.assertEqual(\n+            "../resolveuid/{}".format(self.target_uuid),\n+            self.portal.document.blocks\n+            .get("791bf004-7c88-4278-8490-13b85c3fa4b4")\n+            .get("text")\n+            .get("entityMap")\n+            .get("0")\n+            .get("data")\n+            .get("url"),\n+        )\n'

