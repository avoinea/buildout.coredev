Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-25T08:51:06+01:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/3170b0bdad8e8f6470ecbf2b7da0dafdd676f7c5

Fix deprecation warnings.

Files changed:
M src/plone/restapi/search/query.py
M src/plone/restapi/serializer/catalog.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_serializer_converters.py
M src/plone/restapi/tests/test_services_querystringsearch.py
M src/plone/restapi/tests/test_workflow.py

b'diff --git a/src/plone/restapi/search/query.py b/src/plone/restapi/search/query.py\nindex 6553f6b7..efc65a88 100644\n--- a/src/plone/restapi/search/query.py\n+++ b/src/plone/restapi/search/query.py\n@@ -100,7 +100,7 @@ def __call__(self, query):\n             # that could not be serialized in a query string or JSON\n             index = self.get_index(idx_name)\n             if index is None:\n-                log.warn("No such index: %r" % idx_name)\n+                log.warning("No such index: %r" % idx_name)\n                 continue\n \n             query_opts_parser = getMultiAdapter(\n@@ -174,7 +174,7 @@ def parse_complex_query(self, idx_query):\n                         " casted to %r" % (opt_value, opt_key, self.index, opt_type)\n                     )\n             else:\n-                log.warn(\n+                log.warning(\n                     "Unrecognized query option %r for index %r" % (opt_key, self.index)\n                 )\n                 # Pass along unknown option without modification\ndiff --git a/src/plone/restapi/serializer/catalog.py b/src/plone/restapi/serializer/catalog.py\nindex fb33d340..1e151b4e 100644\n--- a/src/plone/restapi/serializer/catalog.py\n+++ b/src/plone/restapi/serializer/catalog.py\n@@ -2,7 +2,6 @@\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n-from Products.ZCatalog.Lazy import Lazy\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.interface import implementer\n@@ -10,6 +9,11 @@\n \n import logging\n \n+try:\n+    from ZTUtils.Lazy import Lazy\n+except ImportError:\n+    from Products.ZCatalog.Lazy import Lazy\n+\n log = logging.getLogger(__name__)\n \n \n@@ -45,7 +49,7 @@ def __call__(self, metadata_fields=(), fullobjects=False):\n                     # Guard in case the brain returned refers to an object that doesn\'t\n                     # exists because it failed to uncatalog itself or the catalog has\n                     # stale cataloged objects for some reason\n-                    log.warn(\n+                    log.warning(\n                         "Brain getObject error: {} doesn\'t exist anymore".format(\n                             brain.getPath()\n                         )\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 762965d0..8ae6f8b8 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -79,7 +79,7 @@ def __call__(self):\n                     term = value_type.vocabulary.getTerm(v)\n                     values.append({u"token": term.token, u"title": term.title})\n                 except LookupError:\n-                    log.warn("Term lookup error: %r" % v)\n+                    log.warning("Term lookup error: %r" % v)\n             value = values\n         return json_compatible(value)\n \ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 79dd1d3d..6eee1804 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -109,10 +109,10 @@ def test_serializer_includes_collection_fullobjects(self):\n         items = obj["items"]\n         items = sorted(items, key=lambda item: item[u"@id"])\n         self.assertIn("UID", items[0])\n-        self.assertEquals(items[0]["id"], "folder")\n+        self.assertEqual(items[0]["id"], "folder")\n \n         self.assertIn("UID", items[1])\n-        self.assertEquals(items[1]["id"], "subfolder-1")\n+        self.assertEqual(items[1]["id"], "subfolder-1")\n \n         self.assertIn("UID", items[2])\n-        self.assertEquals(items[2]["id"], "subfolder-2")\n+        self.assertEqual(items[2]["id"], "subfolder-2")\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex a4bbf258..9e694c27 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -353,10 +353,10 @@ def test_serialize_to_json_collection_fullobjects(self):\n \n         items = self.serialize(self.portal.collection1, fullobjects=True).get("items")\n         self.assertIn("UID", items[0])\n-        self.assertEquals(items[0]["id"], self.portal.doc1.getId())\n+        self.assertEqual(items[0]["id"], self.portal.doc1.getId())\n \n         self.assertIn("UID", items[1])\n-        self.assertEquals(items[1]["id"], self.portal.doc2.getId())\n+        self.assertEqual(items[1]["id"], self.portal.doc2.getId())\n \n     def test_serialize_returns_site_root_common(self):\n         self.assertIn("title", self.serialize(self.portal))\ndiff --git a/src/plone/restapi/tests/test_serializer_converters.py b/src/plone/restapi/tests/test_serializer_converters.py\nindex 55530680..8b49cabd 100644\n--- a/src/plone/restapi/tests/test_serializer_converters.py\n+++ b/src/plone/restapi/tests/test_serializer_converters.py\n@@ -31,10 +31,10 @@ def test_error_when_type_unknown(self):\n             + r" \\(<(class|type) \\\'object\\\'>\\) JSON compatible.$"\n         )\n \n-        with self.assertRaisesRegexp(TypeError, err_regex):\n+        with self.assertRaisesRegex(TypeError, err_regex):\n             json_compatible(object())\n \n-        with self.assertRaisesRegexp(TypeError, err_regex):\n+        with self.assertRaisesRegex(TypeError, err_regex):\n             json_compatible({"foo": [object()]})\n \n     def test_True(self):\ndiff --git a/src/plone/restapi/tests/test_services_querystringsearch.py b/src/plone/restapi/tests/test_services_querystringsearch.py\nindex 0346b0a4..976fb438 100644\n--- a/src/plone/restapi/tests/test_services_querystringsearch.py\n+++ b/src/plone/restapi/tests/test_services_querystringsearch.py\n@@ -49,8 +49,8 @@ def test_querystringsearch_basic(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn("items", response.json())\n         self.assertIn("items_total", response.json())\n-        self.assertEquals(response.json()["items_total"], 1)\n-        self.assertEquals(len(response.json()["items"]), 1)\n+        self.assertEqual(response.json()["items_total"], 1)\n+        self.assertEqual(len(response.json()["items"]), 1)\n         self.assertNotIn("effective", response.json()["items"][0])\n \n     def test_querystringsearch_fullobjects(self):\n@@ -72,8 +72,8 @@ def test_querystringsearch_fullobjects(self):\n         self.assertIn("items", response.json())\n         self.assertIn("items_total", response.json())\n         self.assertIn("effective", response.json()["items"][0])\n-        self.assertEquals(response.json()["items_total"], 1)\n-        self.assertEquals(len(response.json()["items"]), 1)\n+        self.assertEqual(response.json()["items_total"], 1)\n+        self.assertEqual(len(response.json()["items"]), 1)\n \n     def test_querystringsearch_complex(self):\n \n@@ -102,10 +102,10 @@ def test_querystringsearch_complex(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn("items", response.json())\n         self.assertIn("items_total", response.json())\n-        self.assertEquals(response.json()["items_total"], 10)\n-        self.assertEquals(len(response.json()["items"]), 5)\n+        self.assertEqual(response.json()["items_total"], 10)\n+        self.assertEqual(len(response.json()["items"]), 5)\n         self.assertNotIn("effective", response.json()["items"][0])\n-        self.assertEquals(response.json()["items"][4]["title"], u"Test Document 4")\n+        self.assertEqual(response.json()["items"][4]["title"], u"Test Document 4")\n \n         response = self.api_session.post(\n             "/@querystring-search",\n@@ -125,7 +125,7 @@ def test_querystringsearch_complex(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn("items", response.json())\n         self.assertIn("items_total", response.json())\n-        self.assertEquals(response.json()["items_total"], 10)\n-        self.assertEquals(len(response.json()["items"]), 5)\n+        self.assertEqual(response.json()["items_total"], 10)\n+        self.assertEqual(len(response.json()["items"]), 5)\n         self.assertNotIn("effective", response.json()["items"][0])\n-        self.assertEquals(response.json()["items"][4]["title"], u"Test Document 9")\n+        self.assertEqual(response.json()["items"][4]["title"], u"Test Document 9")\ndiff --git a/src/plone/restapi/tests/test_workflow.py b/src/plone/restapi/tests/test_workflow.py\nindex dfe790a3..1e3c79e5 100644\n--- a/src/plone/restapi/tests/test_workflow.py\n+++ b/src/plone/restapi/tests/test_workflow.py\n@@ -93,8 +93,8 @@ def test_workflow_info_empty_on_siteroot(self):\n         )\n         obj = wfinfo.reply()\n \n-        self.assertEquals(obj["transitions"], [])\n-        self.assertEquals(obj["history"], [])\n+        self.assertEqual(obj["transitions"], [])\n+        self.assertEqual(obj["history"], [])\n \n \n class TestWorkflowTransition(TestCase):\n'

