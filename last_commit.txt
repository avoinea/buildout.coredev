Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-02-11T16:50:51+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/a62ae1436e5935159d43171168f5539000d2a65f

Integrate Plone20200121 hotfix: prevent XSS in title.

Part of https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher

Files changed:
A news/3021.bugfix
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/3021.bugfix b/news/3021.bugfix\nnew file mode 100644\nindex 00000000..0d48d395\n--- /dev/null\n+++ b/news/3021.bugfix\n@@ -0,0 +1,3 @@\n+Integrate Plone20200121 hotfix: prevent XSS in title.\n+Part of https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+[maurits]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 770b8692..fda2708c 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -365,6 +365,10 @@ def render_item(self, item, path):\n             item.update(\n                 {"sub": sub, "opener": "", "aria_haspopup": "", "has_sub_class": "",}\n             )\n+        if "title" in item:\n+            item["title"] = escape(item["title"])\n+        if "name" in item:\n+            item["name"] = escape(item["name"])\n         return self._item_markup_template.format(**item)\n \n     def build_tree(self, path, first_run=True):\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 0db75c9a..a29125ee 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -6,10 +6,14 @@\n from plone.app.layout.viewlets.common import TitleViewlet\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.viewlets.tests.base import ViewletsFunctionalTestCase\n from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n+from plone.testing.z2 import Browser\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.CMFPlone.interfaces import ISiteSchema\n from zope.component import getUtility\n@@ -18,6 +22,9 @@\n from zope.interface import directlyProvides\n from zope.interface import noLongerProvides\n \n+import json\n+import transaction\n+\n \n # Red pixel with filename pixel.png\n SITE_LOGO_BASE64 = (\n@@ -25,6 +32,9 @@\n     b"AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA"\n     b"AAElFTkSuQmCC"\n )\n+# Text for testing that the title is escaped.\n+ESCAPED = "&lt;script&gt;"\n+HACKED = \'<script>alert("hacked")</script>\'\n \n \n class TestViewletBase(ViewletsTestCase):\n@@ -525,3 +535,85 @@ def test_generate_tabs_exclude_from_nav(self):\n             [item["path"] for item in navtree["/plone/excluded-folder"]],\n             ["/plone/excluded-folder/sub-folder"],\n         )\n+\n+\n+class TestTitleEscape(ViewletsFunctionalTestCase):\n+    """Test that the title in the global sections viewlet is escaped.\n+\n+    From PloneHotfix20200121, see\n+    https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+    """\n+\n+    def get_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        browser.addHeader(\n+            "Authorization",\n+            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        return browser\n+\n+    def assert_not_hacked(self, browser):\n+        body = browser.contents\n+        hacked = HACKED\n+        if not browser.isHtml:\n+            # Assume json.\n+            hacked = json.dumps(HACKED)\n+\n+        # This gives a too verbose error message, showing the entire body:\n+        # self.assertNotIn(HACKED, body)\n+        # So we roll our own less verbose version.\n+        if hacked in body:\n+            index = body.index(hacked)\n+            start = max(0, index - 50)\n+            end = min(index + len(hacked) + 50, len(body))\n+            assert False, "Hacked script found in body: ... {0} ...".format(\n+                body[start:end]\n+            )\n+\n+        # The escaped version of the HACKED text should be in the response text.\n+        self.assertIn(ESCAPED, body)\n+\n+    def test_normal_title(self):\n+        # Create a folder and page with normal title.\n+        normal = "\'Normal title"\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder1", title=normal)\n+        folder1 = self.portal.folder1\n+        self.assertEqual(folder1.Title(), normal)\n+        folder1.invokeFactory("Document", id="page1", title=normal)\n+        page1 = folder1.page1\n+        self.assertEqual(page1.Title(), normal)\n+        transaction.commit()\n+\n+        # Check the output of the normal case for comparison.\n+        browser = self.get_browser()\n+        browser.open(folder1.absolute_url())\n+        self.assertNotIn(ESCAPED, browser.contents)\n+        browser.open(page1.absolute_url())\n+        self.assertNotIn(ESCAPED, browser.contents)\n+        browser.open(folder1.absolute_url() + "/folder_contents")\n+        self.assertNotIn(ESCAPED, browser.contents)\n+\n+    def test_xss_from_title(self):\n+        # Does a script tag as title show up anywhere in the html?\n+        # It might end up in the main menu.\n+\n+        # Create a folder and page with a hacked title.\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder2", title=HACKED)\n+        folder2 = self.portal.folder2\n+        self.assertEqual(folder2.Title(), HACKED)\n+        folder2.invokeFactory("Document", id="page2", title=HACKED)\n+        page2 = folder2.page2\n+        self.assertEqual(page2.Title(), HACKED)\n+        transaction.commit()\n+\n+        # Check the output of this hacked case.\n+        browser = self.get_browser()\n+        browser.open(folder2.absolute_url())\n+        self.assert_not_hacked(browser)\n+        browser.open(page2.absolute_url())\n+        self.assert_not_hacked(browser)\n+        browser.open(folder2.absolute_url() + "/folder_contents")\n+        self.assert_not_hacked(browser)\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-02-15T15:24:06+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/f5df261a0fc0808b4640cc6b425e60a84a006d96

Merge branch 'master' into maurits-plonehotfix2020-master

Files changed:
A news/233.bugfix
M plone/app/layout/globals/portal.py
M plone/app/layout/globals/tests/test_portal.py
M plone/app/layout/viewlets/common.py

b'diff --git a/news/233.bugfix b/news/233.bugfix\nnew file mode 100644\nindex 00000000..865a87f9\n--- /dev/null\n+++ b/news/233.bugfix\n@@ -0,0 +1 @@\n+Remove deprecation warnings [ale-rt]\ndiff --git a/plone/app/layout/globals/portal.py b/plone/app/layout/globals/portal.py\nindex eeea7180..321c7b68 100644\n--- a/plone/app/layout/globals/portal.py\n+++ b/plone/app/layout/globals/portal.py\n@@ -3,12 +3,12 @@\n from Acquisition import aq_inner\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.navigation.root import getNavigationRootObject\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.memoize.view import memoize\n from plone.memoize.view import memoize_contextless\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import ILanguageSchema\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n from Products.Five.browser import BrowserView\ndiff --git a/plone/app/layout/globals/tests/test_portal.py b/plone/app/layout/globals/tests/test_portal.py\nindex f5ff1dbe..3b8e4fa2 100644\n--- a/plone/app/layout/globals/tests/test_portal.py\n+++ b/plone/app/layout/globals/tests/test_portal.py\n@@ -5,8 +5,8 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing.helpers import logout\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.interfaces import ILanguageSchema\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n from zope.component import getUtility\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex fda2708c..e50c1e33 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -8,6 +8,7 @@\n from plone.app.layout.globals.interfaces import IViewView\n from plone.app.layout.navigation.root import getNavigationRoot\n from plone.app.layout.navigation.root import getNavigationRootObject\n+from plone.i18n.interfaces import ILanguageSchema\n from plone.memoize.view import memoize\n from plone.memoize.view import memoize_contextless\n from plone.protect.utils import addTokenToUrl\n@@ -16,7 +17,6 @@\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFPlone.interfaces import ISearchSchema\n from Products.CMFPlone.interfaces import ISiteSchema\n-from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n from Products.CMFPlone.utils import getSiteLogo\n from Products.CMFPlone.utils import safe_unicode\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-02-26T10:20:31+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.layout/commit/447704e8ad17b47fad4b20addbc78bef8f1cb163

Merge pull request #232 from plone/maurits-plonehotfix2020-master

Integrate Plone20200121 hotfix: prevent XSS in title.

Files changed:
A news/3021.bugfix
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/3021.bugfix b/news/3021.bugfix\nnew file mode 100644\nindex 00000000..0d48d395\n--- /dev/null\n+++ b/news/3021.bugfix\n@@ -0,0 +1,3 @@\n+Integrate Plone20200121 hotfix: prevent XSS in title.\n+Part of https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+[maurits]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 6fc1caa4..e50c1e33 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -365,6 +365,10 @@ def render_item(self, item, path):\n             item.update(\n                 {"sub": sub, "opener": "", "aria_haspopup": "", "has_sub_class": "",}\n             )\n+        if "title" in item:\n+            item["title"] = escape(item["title"])\n+        if "name" in item:\n+            item["name"] = escape(item["name"])\n         return self._item_markup_template.format(**item)\n \n     def build_tree(self, path, first_run=True):\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 0db75c9a..a29125ee 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -6,10 +6,14 @@\n from plone.app.layout.viewlets.common import TitleViewlet\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.layout.viewlets.tests.base import ViewletsTestCase\n+from plone.app.layout.viewlets.tests.base import ViewletsFunctionalTestCase\n from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n+from plone.testing.z2 import Browser\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.CMFPlone.interfaces import ISiteSchema\n from zope.component import getUtility\n@@ -18,6 +22,9 @@\n from zope.interface import directlyProvides\n from zope.interface import noLongerProvides\n \n+import json\n+import transaction\n+\n \n # Red pixel with filename pixel.png\n SITE_LOGO_BASE64 = (\n@@ -25,6 +32,9 @@\n     b"AAAEAAAABCAIAAACQd1PeAAAADElEQVQI12P4z8AAAAMBAQAY3Y2wAAA"\n     b"AAElFTkSuQmCC"\n )\n+# Text for testing that the title is escaped.\n+ESCAPED = "&lt;script&gt;"\n+HACKED = \'<script>alert("hacked")</script>\'\n \n \n class TestViewletBase(ViewletsTestCase):\n@@ -525,3 +535,85 @@ def test_generate_tabs_exclude_from_nav(self):\n             [item["path"] for item in navtree["/plone/excluded-folder"]],\n             ["/plone/excluded-folder/sub-folder"],\n         )\n+\n+\n+class TestTitleEscape(ViewletsFunctionalTestCase):\n+    """Test that the title in the global sections viewlet is escaped.\n+\n+    From PloneHotfix20200121, see\n+    https://plone.org/security/hotfix/20200121/xss-in-the-title-field-on-plone-5-0-and-higher\n+    """\n+\n+    def get_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        browser.addHeader(\n+            "Authorization",\n+            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        return browser\n+\n+    def assert_not_hacked(self, browser):\n+        body = browser.contents\n+        hacked = HACKED\n+        if not browser.isHtml:\n+            # Assume json.\n+            hacked = json.dumps(HACKED)\n+\n+        # This gives a too verbose error message, showing the entire body:\n+        # self.assertNotIn(HACKED, body)\n+        # So we roll our own less verbose version.\n+        if hacked in body:\n+            index = body.index(hacked)\n+            start = max(0, index - 50)\n+            end = min(index + len(hacked) + 50, len(body))\n+            assert False, "Hacked script found in body: ... {0} ...".format(\n+                body[start:end]\n+            )\n+\n+        # The escaped version of the HACKED text should be in the response text.\n+        self.assertIn(ESCAPED, body)\n+\n+    def test_normal_title(self):\n+        # Create a folder and page with normal title.\n+        normal = "\'Normal title"\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder1", title=normal)\n+        folder1 = self.portal.folder1\n+        self.assertEqual(folder1.Title(), normal)\n+        folder1.invokeFactory("Document", id="page1", title=normal)\n+        page1 = folder1.page1\n+        self.assertEqual(page1.Title(), normal)\n+        transaction.commit()\n+\n+        # Check the output of the normal case for comparison.\n+        browser = self.get_browser()\n+        browser.open(folder1.absolute_url())\n+        self.assertNotIn(ESCAPED, browser.contents)\n+        browser.open(page1.absolute_url())\n+        self.assertNotIn(ESCAPED, browser.contents)\n+        browser.open(folder1.absolute_url() + "/folder_contents")\n+        self.assertNotIn(ESCAPED, browser.contents)\n+\n+    def test_xss_from_title(self):\n+        # Does a script tag as title show up anywhere in the html?\n+        # It might end up in the main menu.\n+\n+        # Create a folder and page with a hacked title.\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Member"])\n+        self.portal.invokeFactory("Folder", id="folder2", title=HACKED)\n+        folder2 = self.portal.folder2\n+        self.assertEqual(folder2.Title(), HACKED)\n+        folder2.invokeFactory("Document", id="page2", title=HACKED)\n+        page2 = folder2.page2\n+        self.assertEqual(page2.Title(), HACKED)\n+        transaction.commit()\n+\n+        # Check the output of this hacked case.\n+        browser = self.get_browser()\n+        browser.open(folder2.absolute_url())\n+        self.assert_not_hacked(browser)\n+        browser.open(page2.absolute_url())\n+        self.assert_not_hacked(browser)\n+        browser.open(folder2.absolute_url() + "/folder_contents")\n+        self.assert_not_hacked(browser)\n'

