Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-25T10:08:01+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/c2c201f2a88faba0f58919b1993dce7dac0fbb94

Make discussion endpoint return content that is deserialized via portâ€¦ (#890)

* Make discussion endpoint return content that is deserialized via portal transforms.

* Add test for comment with text/html.

* Keep returning plain text by default to not change the API.

Files changed:
A news/889.bugfix
M .travis.yml
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/tests/test_comments.py

b'diff --git a/.travis.yml b/.travis.yml\nindex eb5fb8bd..79bfd9a5 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,3 +1,4 @@\n+os: linux\n language: python\n python:\n   - "2.7"\ndiff --git a/news/889.bugfix b/news/889.bugfix\nnew file mode 100644\nindex 00000000..9e1e9c27\n--- /dev/null\n+++ b/news/889.bugfix\n@@ -0,0 +1 @@\n+- Make discussion endpoint return content that is deserialized via portal transforms (e.g. \'text/x-web-intelligent\') [timo]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 24383be7..25aedc0e 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -64,13 +64,22 @@ def __call__(self, include_items=True):\n         doc_allowed = delete_own_comment_allowed()\n         delete_own = doc_allowed and can_delete_own(self.context)\n \n+        if self.context.mime_type == "text/plain":\n+            text_data = self.context.text\n+            text_mime_type = self.context.mime_type\n+        else:\n+            text_data = self.context.getText()\n+            text_mime_type = \'text/html\'\n         return {\n             "@id": url,\n             "@type": self.context.portal_type,\n             "@parent": parent_url,\n             "comment_id": str(self.context.id),\n             "in_reply_to": in_reply_to,\n-            "text": {"data": self.context.text, "mime-type": self.context.mime_type},\n+            "text": {\n+                "data": text_data,\n+                "mime-type": text_mime_type,\n+            },\n             "user_notification": self.context.user_notification,\n             "author_username": self.context.author_username,\n             "author_name": self.context.author_name,\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex bc4622bb..1ea4836f 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -10,6 +10,7 @@\n from zope.component import createObject\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.component import queryUtility\n \n \n class TestCommentsSerializers(TestCase):\n@@ -86,3 +87,69 @@ def test_comment(self):\n         self.assertEqual(set(output), set(expected))\n \n         self.assertEqual(set(output["text"]), set(["data", "mime-type"]))\n+\n+    def test_comment_with_mimetype_text_plain(self):\n+\n+        self.conversation = IConversation(self.doc)\n+        self.replies = IReplies(self.conversation)\n+        comment = createObject("plone.Comment")\n+        comment.text = "Hey, I am plain text!"\n+        comment.mime_type = "text/plain"\n+        self.comment = self.replies[self.replies.addComment(comment)]\n+\n+        serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n+\n+        # serializer should return HTML with a clickable link\n+        self.assertEqual(\n+            \'Hey, I am plain text!\',\n+            serializer()["text"]["data"],\n+        )\n+        # serializer should return mimetype = text/x-web-intelligent\n+        self.assertEqual("text/plain", serializer()["text"]["mime-type"])\n+\n+    def test_comment_with_mimetype_intelligent_text(self):\n+        # Set text transform to intelligent text\n+        registry = queryUtility(IRegistry)\n+        settings = registry.forInterface(IDiscussionSettings, check=False)\n+        settings.text_transform = "text/x-web-intelligent"\n+\n+        self.conversation = IConversation(self.doc)\n+        self.replies = IReplies(self.conversation)\n+        comment = createObject("plone.Comment")\n+        comment.text = "Go to https://www.plone.org"\n+        comment.mime_type = "text/x-web-intelligent"\n+        self.comment = self.replies[self.replies.addComment(comment)]\n+\n+        serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n+\n+        # serializer should return HTML with a clickable link\n+        self.assertEqual(\n+            \'Go to <a href="https://www.plone.org" \'\n+            + \'rel="nofollow">https://www.plone.org</a>\',\n+            serializer()["text"]["data"],\n+        )\n+        # serializer should return mimetype = text/html\n+        self.assertEqual("text/html", serializer()["text"]["mime-type"])\n+\n+    def test_comment_with_mimetype_html(self):\n+        # Set text transform to text/html\n+        registry = queryUtility(IRegistry)\n+        settings = registry.forInterface(IDiscussionSettings, check=False)\n+        settings.text_transform = "text/html"\n+\n+        self.conversation = IConversation(self.doc)\n+        self.replies = IReplies(self.conversation)\n+        comment = createObject("plone.Comment")\n+        comment.text = "Go to <a href=\'https://www.plone.org\'>Plone</a>"\n+        comment.mime_type = "text/html"\n+        self.comment = self.replies[self.replies.addComment(comment)]\n+\n+        serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n+\n+        # serializer should return HTML\n+        self.assertEqual(\n+            \'Go to <a href="https://www.plone.org">Plone</a>\',\n+            serializer()["text"]["data"],\n+        )\n+        # serializer should return mimetype = text/html\n+        self.assertEqual("text/html", serializer()["text"]["mime-type"])\n'

