Repository: plone.app.contenttypes


Branch: refs/heads/1.4.x
Date: 2020-03-03T22:18:24+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.contenttypes/commit/c7026cea91b9b7f939fd6d303a12d32caca23c6b

Integrate PloneHotFix20200121: add more permission checks.

See https://plone.org/security/hotfix/20200121/privilege-escalation-for-overwriting-content

For Plone 5.1
Backport from master PR #543.

Files changed:
A news/3021.bugfix
A plone/app/contenttypes/tests/test_security.py
M plone/app/contenttypes/content.py

b'diff --git a/news/3021.bugfix b/news/3021.bugfix\nnew file mode 100644\nindex 00000000..d59b64e0\n--- /dev/null\n+++ b/news/3021.bugfix\n@@ -0,0 +1,3 @@\n+Integrate PloneHotFix20200121: add more permission checks.\n+See https://plone.org/security/hotfix/20200121/privilege-escalation-for-overwriting-content\n+[maurits]\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex b9068c88..5687bda4 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from AccessControl.SecurityInfo import ClassSecurityInfo\n from plone.app.contenttypes.interfaces import ICollection\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.contenttypes.interfaces import IEvent\n@@ -11,6 +12,7 @@\n from plone.dexterity.content import Item\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n+from Products.CMFCore import permissions\n from zope.deprecation import deprecation\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n@@ -23,8 +25,11 @@\n class Collection(Item):\n     """Convenience subclass for ``Collection`` portal type\n     """\n+    security = ClassSecurityInfo()\n+\n     # BBB\n \n+    @security.protected(permissions.View)\n     def listMetaDataFields(self, exclude=True):\n         """Return a list of all metadata fields from portal_catalog.\n \n@@ -32,6 +37,7 @@ def listMetaDataFields(self, exclude=True):\n         """\n         return []\n \n+    @security.protected(permissions.View)\n     def selectedViewFields(self):\n         """Returns a list of all metadata fields from the catalog that were\n            selected.\n@@ -40,9 +46,11 @@ def selectedViewFields(self):\n             ICollection as ICollection_behavior\n         return ICollection_behavior(self).selectedViewFields()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def setQuery(self, query):\n         self.query = query\n \n+    @security.protected(permissions.View)\n     def getQuery(self):\n         """Return the query as a list of dict; note that this method\n         returns a list of CatalogContentListingObject in\n@@ -51,21 +59,26 @@ def getQuery(self):\n         return self.query\n \n     @deprecation.deprecate(\'getRawQuery() is deprecated; use getQuery().\')\n+    @security.protected(permissions.View)\n     def getRawQuery(self):\n         return self.getQuery()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def setSort_on(self, sort_on):\n         self.sort_on = sort_on\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def setSort_reversed(self, sort_reversed):\n         self.sort_reversed = sort_reversed\n \n+    @security.protected(permissions.View)\n     def queryCatalog(self, batch=True, b_start=0, b_size=30, sort_on=None):\n         from plone.app.contenttypes.behaviors.collection import \\\n             ICollection as ICollection_behavior\n         return ICollection_behavior(self).results(\n             batch, b_start, b_size, sort_on=sort_on)\n \n+    @security.protected(permissions.View)\n     def results(self, **kwargs):\n         from plone.app.contenttypes.behaviors.collection import \\\n             ICollection as ICollection_behavior\n@@ -76,6 +89,9 @@ def results(self, **kwargs):\n class Document(Item):\n     """Convenience subclass for ``Document`` portal type\n     """\n+    security = ClassSecurityInfo()\n+\n+    @security.protected(permissions.View)\n     def Format(self):\n         \'\'\' Provide a proper accessor for the format attribute\n         See https://github.com/plone/Products.CMFPlone/issues/2540\n@@ -90,7 +106,9 @@ def Format(self):\n class File(Item):\n     """Convenience subclass for ``File`` portal type\n     """\n+    security = ClassSecurityInfo()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def PUT(self, REQUEST=None, RESPONSE=None):\n         """DAV method to replace the file field with a new resource."""\n         request = REQUEST if REQUEST is not None else self.REQUEST\n@@ -107,9 +125,11 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         modified(self)\n         return response\n \n+    @security.protected(permissions.View)\n     def get_size(self):\n         return getattr(self.file, \'size\', 0)\n \n+    @security.protected(permissions.View)\n     def content_type(self):\n         return getattr(self.file, \'contentType\', None)\n \n@@ -124,7 +144,9 @@ class Folder(Container):\n class Image(Item):\n     """Convenience subclass for ``Image`` portal type\n     """\n+    security = ClassSecurityInfo()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def PUT(self, REQUEST=None, RESPONSE=None):\n         """DAV method to replace image field with a new resource."""\n         request = REQUEST if REQUEST is not None else self.REQUEST\n@@ -141,9 +163,11 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         modified(self)\n         return response\n \n+    @security.protected(permissions.View)\n     def get_size(self):\n         return getattr(self.image, \'size\', 0)\n \n+    @security.protected(permissions.View)\n     def content_type(self):\n         return getattr(self.image, \'contentType\', None)\n \ndiff --git a/plone/app/contenttypes/tests/test_security.py b/plone/app/contenttypes/tests/test_security.py\nnew file mode 100644\nindex 00000000..17da6d9f\n--- /dev/null\n+++ b/plone/app/contenttypes/tests/test_security.py\n@@ -0,0 +1,241 @@\n+# -*- coding: utf-8 -*-\n+from io import BytesIO\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.testing.z2 import Browser\n+\n+import base64\n+import os\n+import pkg_resources\n+import re\n+import sys\n+import transaction\n+import unittest\n+\n+\n+# List various possibly read methods.\n+# Not all classes have all of them.\n+# Some may be inherited.\n+READ_METHODS = (\n+    "content_type",\n+    "Format",\n+    "get_size",\n+    "getFoldersAndImages",\n+    "getQuery",\n+    "getRawQuery",\n+    "index_html",\n+    "listMetaDataFields",\n+    "manage_DAVget",\n+    "manage_FTPget",\n+    "queryCatalog",\n+    "results",\n+    "selectedViewFields",\n+)\n+WRITE_METHODS = ("setQuery", "setSort_on", "setSort_reversed", "PUT")\n+\n+\n+class ResponseWrapper:\n+    """Decorates a response object with additional introspective methods."""\n+\n+    _bodyre = re.compile("\\r\\n\\r\\n(.*)", re.MULTILINE | re.DOTALL)\n+\n+    def __init__(self, response, outstream, path):\n+        self._response = response\n+        self._outstream = outstream\n+        self._path = path\n+\n+    def __getattr__(self, name):\n+        return getattr(self._response, name)\n+\n+    def getOutput(self):\n+        """Returns the complete output, headers and all."""\n+        return self._outstream.getvalue()\n+\n+    def getBody(self):\n+        """Returns the page body, i.e. the output par headers."""\n+        body = self._bodyre.search(self.getOutput())\n+        if body is not None:\n+            body = body.group(1)\n+        return body\n+\n+    def getPath(self):\n+        """Returns the path used by the request."""\n+        return self._path\n+\n+    def getHeader(self, name):\n+        """Returns the value of a response header."""\n+        return self.headers.get(name.lower())\n+\n+    def getCookie(self, name):\n+        """Returns a response cookie."""\n+        return self.cookies.get(name)\n+\n+\n+class TestSecurity(unittest.TestCase):\n+    layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        # self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+    def publish(\n+        self,\n+        path,\n+        basic=None,\n+        env=None,\n+        extra=None,\n+        request_method="GET",\n+        stdin=None,\n+        handle_errors=True,\n+    ):\n+        """\n+        Mostly pulled from Testing.functional\n+        """\n+        from ZPublisher.Request import Request\n+        from ZPublisher.Response import Response\n+        from ZPublisher.Publish import publish_module\n+\n+        transaction.commit()\n+\n+        if env is None:\n+            env = {}\n+\n+        env["SERVER_NAME"] = self.request["SERVER_NAME"]\n+        env["SERVER_PORT"] = self.request["SERVER_PORT"]\n+        env["REQUEST_METHOD"] = request_method\n+\n+        p = path.split("?")\n+        if len(p) == 1:\n+            env["PATH_INFO"] = p[0]\n+        elif len(p) == 2:\n+            [env["PATH_INFO"], env["QUERY_STRING"]] = p\n+        else:\n+            raise TypeError("")\n+\n+        if basic:\n+            env["HTTP_AUTHORIZATION"] = "Basic %s" % base64.encodestring(basic)\n+\n+        if stdin is None:\n+            stdin = BytesIO()\n+\n+        outstream = BytesIO()\n+        response = Response(stdout=outstream, stderr=sys.stderr)\n+        request = Request(stdin, env, response)\n+\n+        publish_module(\n+            "Zope2", debug=not handle_errors, request=request, response=response\n+        )\n+\n+        return ResponseWrapper(response, outstream, path)\n+\n+    def test_put_gives_401(self):\n+        login(self.portal, TEST_USER_NAME)\n+        self.portal.invokeFactory("Collection", id="collection")\n+        self.portal.invokeFactory("Document", id="page")\n+        self.portal.invokeFactory("File", id="file")\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.invokeFactory("Image", id="image")\n+        collection = self.portal.collection\n+        fi = self.portal.file\n+        folder = self.portal.folder\n+        image = self.portal.image\n+        page = self.portal.page\n+        logout()\n+\n+        path = "/" + collection.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + fi.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + folder.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + image.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + page.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+    def DISABLED_test_listDAVobjects_gives_401(self):\n+        # This actually gives 302, both with and without the patch.  It is\n+        # protected with AccessControl.Permissions.webdav_access.\n+        login(self.portal, TEST_USER_NAME)\n+        # only defined for folderish items\n+        self.portal.invokeFactory("Folder", id="folder")\n+        folder = self.portal.folder\n+        logout()\n+\n+        folder_path = "/" + folder.absolute_url(relative=True)\n+        path = folder_path + "/listDAVObjects"\n+        response = self.publish(path=path, env={}, request_method="GET")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+    def get_permission_mapping(self, klass):\n+        permissions = klass.__ac_permissions__\n+        mapping = {}\n+        for permission in permissions:\n+            # permission can have two or three items:\n+            # (\'WebDAV access\',\n+            #  (\'PROPFIND\', \'listDAVObjects\', \'manage_DAVget\'),\n+            #  (\'Manager\', \'Authenticated\'))\n+            perm, methods = list(permission)[:2]\n+            for method in methods:\n+                mapping[method] = perm\n+        return mapping\n+\n+    def _test_class_protected(self, klass):\n+        mapping = self.get_permission_mapping(klass)\n+        for method in READ_METHODS:\n+            if method in klass.__dict__.keys():\n+                self.assertEqual(\n+                    mapping.get(method),\n+                    "View",\n+                    "Method {0} missing view protection".format(method),\n+                )\n+        for method in WRITE_METHODS:\n+            if method in klass.__dict__.keys():\n+                self.assertEqual(\n+                    mapping.get(method),\n+                    "Modify portal content",\n+                    "Method {0} missing edit protection".format(method),\n+                )\n+\n+    def testCollection_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import Collection\n+        except ImportError:\n+            return\n+        self._test_class_protected(Collection)\n+\n+    def testDocument_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import Document\n+        except ImportError:\n+            return\n+        self._test_class_protected(Document)\n+\n+    def testFile_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import File\n+        except ImportError:\n+            return\n+        self._test_class_protected(File)\n+\n+    def testImage_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import Image\n+        except ImportError:\n+            return\n+        self._test_class_protected(Image)\n'

Repository: plone.app.contenttypes


Branch: refs/heads/1.4.x
Date: 2020-03-04T00:02:46+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/94964e802c40276bf54d988959d03eaf8d57a860

Merge pull request #545 from plone/maurits/plonehotfix2020-14x

Integrate PloneHotFix20200121: add more permission checks. [1.4.x]

Files changed:
A news/3021.bugfix
A plone/app/contenttypes/tests/test_security.py
M plone/app/contenttypes/content.py

b'diff --git a/news/3021.bugfix b/news/3021.bugfix\nnew file mode 100644\nindex 00000000..d59b64e0\n--- /dev/null\n+++ b/news/3021.bugfix\n@@ -0,0 +1,3 @@\n+Integrate PloneHotFix20200121: add more permission checks.\n+See https://plone.org/security/hotfix/20200121/privilege-escalation-for-overwriting-content\n+[maurits]\ndiff --git a/plone/app/contenttypes/content.py b/plone/app/contenttypes/content.py\nindex b9068c88..5687bda4 100644\n--- a/plone/app/contenttypes/content.py\n+++ b/plone/app/contenttypes/content.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from AccessControl.SecurityInfo import ClassSecurityInfo\n from plone.app.contenttypes.interfaces import ICollection\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.contenttypes.interfaces import IEvent\n@@ -11,6 +12,7 @@\n from plone.dexterity.content import Item\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n+from Products.CMFCore import permissions\n from zope.deprecation import deprecation\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n@@ -23,8 +25,11 @@\n class Collection(Item):\n     """Convenience subclass for ``Collection`` portal type\n     """\n+    security = ClassSecurityInfo()\n+\n     # BBB\n \n+    @security.protected(permissions.View)\n     def listMetaDataFields(self, exclude=True):\n         """Return a list of all metadata fields from portal_catalog.\n \n@@ -32,6 +37,7 @@ def listMetaDataFields(self, exclude=True):\n         """\n         return []\n \n+    @security.protected(permissions.View)\n     def selectedViewFields(self):\n         """Returns a list of all metadata fields from the catalog that were\n            selected.\n@@ -40,9 +46,11 @@ def selectedViewFields(self):\n             ICollection as ICollection_behavior\n         return ICollection_behavior(self).selectedViewFields()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def setQuery(self, query):\n         self.query = query\n \n+    @security.protected(permissions.View)\n     def getQuery(self):\n         """Return the query as a list of dict; note that this method\n         returns a list of CatalogContentListingObject in\n@@ -51,21 +59,26 @@ def getQuery(self):\n         return self.query\n \n     @deprecation.deprecate(\'getRawQuery() is deprecated; use getQuery().\')\n+    @security.protected(permissions.View)\n     def getRawQuery(self):\n         return self.getQuery()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def setSort_on(self, sort_on):\n         self.sort_on = sort_on\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def setSort_reversed(self, sort_reversed):\n         self.sort_reversed = sort_reversed\n \n+    @security.protected(permissions.View)\n     def queryCatalog(self, batch=True, b_start=0, b_size=30, sort_on=None):\n         from plone.app.contenttypes.behaviors.collection import \\\n             ICollection as ICollection_behavior\n         return ICollection_behavior(self).results(\n             batch, b_start, b_size, sort_on=sort_on)\n \n+    @security.protected(permissions.View)\n     def results(self, **kwargs):\n         from plone.app.contenttypes.behaviors.collection import \\\n             ICollection as ICollection_behavior\n@@ -76,6 +89,9 @@ def results(self, **kwargs):\n class Document(Item):\n     """Convenience subclass for ``Document`` portal type\n     """\n+    security = ClassSecurityInfo()\n+\n+    @security.protected(permissions.View)\n     def Format(self):\n         \'\'\' Provide a proper accessor for the format attribute\n         See https://github.com/plone/Products.CMFPlone/issues/2540\n@@ -90,7 +106,9 @@ def Format(self):\n class File(Item):\n     """Convenience subclass for ``File`` portal type\n     """\n+    security = ClassSecurityInfo()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def PUT(self, REQUEST=None, RESPONSE=None):\n         """DAV method to replace the file field with a new resource."""\n         request = REQUEST if REQUEST is not None else self.REQUEST\n@@ -107,9 +125,11 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         modified(self)\n         return response\n \n+    @security.protected(permissions.View)\n     def get_size(self):\n         return getattr(self.file, \'size\', 0)\n \n+    @security.protected(permissions.View)\n     def content_type(self):\n         return getattr(self.file, \'contentType\', None)\n \n@@ -124,7 +144,9 @@ class Folder(Container):\n class Image(Item):\n     """Convenience subclass for ``Image`` portal type\n     """\n+    security = ClassSecurityInfo()\n \n+    @security.protected(permissions.ModifyPortalContent)\n     def PUT(self, REQUEST=None, RESPONSE=None):\n         """DAV method to replace image field with a new resource."""\n         request = REQUEST if REQUEST is not None else self.REQUEST\n@@ -141,9 +163,11 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         modified(self)\n         return response\n \n+    @security.protected(permissions.View)\n     def get_size(self):\n         return getattr(self.image, \'size\', 0)\n \n+    @security.protected(permissions.View)\n     def content_type(self):\n         return getattr(self.image, \'contentType\', None)\n \ndiff --git a/plone/app/contenttypes/tests/test_security.py b/plone/app/contenttypes/tests/test_security.py\nnew file mode 100644\nindex 00000000..17da6d9f\n--- /dev/null\n+++ b/plone/app/contenttypes/tests/test_security.py\n@@ -0,0 +1,241 @@\n+# -*- coding: utf-8 -*-\n+from io import BytesIO\n+from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING  # noqa\n+from plone.app.testing import login\n+from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.testing.z2 import Browser\n+\n+import base64\n+import os\n+import pkg_resources\n+import re\n+import sys\n+import transaction\n+import unittest\n+\n+\n+# List various possibly read methods.\n+# Not all classes have all of them.\n+# Some may be inherited.\n+READ_METHODS = (\n+    "content_type",\n+    "Format",\n+    "get_size",\n+    "getFoldersAndImages",\n+    "getQuery",\n+    "getRawQuery",\n+    "index_html",\n+    "listMetaDataFields",\n+    "manage_DAVget",\n+    "manage_FTPget",\n+    "queryCatalog",\n+    "results",\n+    "selectedViewFields",\n+)\n+WRITE_METHODS = ("setQuery", "setSort_on", "setSort_reversed", "PUT")\n+\n+\n+class ResponseWrapper:\n+    """Decorates a response object with additional introspective methods."""\n+\n+    _bodyre = re.compile("\\r\\n\\r\\n(.*)", re.MULTILINE | re.DOTALL)\n+\n+    def __init__(self, response, outstream, path):\n+        self._response = response\n+        self._outstream = outstream\n+        self._path = path\n+\n+    def __getattr__(self, name):\n+        return getattr(self._response, name)\n+\n+    def getOutput(self):\n+        """Returns the complete output, headers and all."""\n+        return self._outstream.getvalue()\n+\n+    def getBody(self):\n+        """Returns the page body, i.e. the output par headers."""\n+        body = self._bodyre.search(self.getOutput())\n+        if body is not None:\n+            body = body.group(1)\n+        return body\n+\n+    def getPath(self):\n+        """Returns the path used by the request."""\n+        return self._path\n+\n+    def getHeader(self, name):\n+        """Returns the value of a response header."""\n+        return self.headers.get(name.lower())\n+\n+    def getCookie(self, name):\n+        """Returns a response cookie."""\n+        return self.cookies.get(name)\n+\n+\n+class TestSecurity(unittest.TestCase):\n+    layer = PLONE_APP_CONTENTTYPES_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        # self.request[\'ACTUAL_URL\'] = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+    def publish(\n+        self,\n+        path,\n+        basic=None,\n+        env=None,\n+        extra=None,\n+        request_method="GET",\n+        stdin=None,\n+        handle_errors=True,\n+    ):\n+        """\n+        Mostly pulled from Testing.functional\n+        """\n+        from ZPublisher.Request import Request\n+        from ZPublisher.Response import Response\n+        from ZPublisher.Publish import publish_module\n+\n+        transaction.commit()\n+\n+        if env is None:\n+            env = {}\n+\n+        env["SERVER_NAME"] = self.request["SERVER_NAME"]\n+        env["SERVER_PORT"] = self.request["SERVER_PORT"]\n+        env["REQUEST_METHOD"] = request_method\n+\n+        p = path.split("?")\n+        if len(p) == 1:\n+            env["PATH_INFO"] = p[0]\n+        elif len(p) == 2:\n+            [env["PATH_INFO"], env["QUERY_STRING"]] = p\n+        else:\n+            raise TypeError("")\n+\n+        if basic:\n+            env["HTTP_AUTHORIZATION"] = "Basic %s" % base64.encodestring(basic)\n+\n+        if stdin is None:\n+            stdin = BytesIO()\n+\n+        outstream = BytesIO()\n+        response = Response(stdout=outstream, stderr=sys.stderr)\n+        request = Request(stdin, env, response)\n+\n+        publish_module(\n+            "Zope2", debug=not handle_errors, request=request, response=response\n+        )\n+\n+        return ResponseWrapper(response, outstream, path)\n+\n+    def test_put_gives_401(self):\n+        login(self.portal, TEST_USER_NAME)\n+        self.portal.invokeFactory("Collection", id="collection")\n+        self.portal.invokeFactory("Document", id="page")\n+        self.portal.invokeFactory("File", id="file")\n+        self.portal.invokeFactory("Folder", id="folder")\n+        self.portal.invokeFactory("Image", id="image")\n+        collection = self.portal.collection\n+        fi = self.portal.file\n+        folder = self.portal.folder\n+        image = self.portal.image\n+        page = self.portal.page\n+        logout()\n+\n+        path = "/" + collection.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + fi.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + folder.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + image.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+        path = "/" + page.absolute_url(relative=True)\n+        response = self.publish(path=path, env={}, request_method="PUT")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+    def DISABLED_test_listDAVobjects_gives_401(self):\n+        # This actually gives 302, both with and without the patch.  It is\n+        # protected with AccessControl.Permissions.webdav_access.\n+        login(self.portal, TEST_USER_NAME)\n+        # only defined for folderish items\n+        self.portal.invokeFactory("Folder", id="folder")\n+        folder = self.portal.folder\n+        logout()\n+\n+        folder_path = "/" + folder.absolute_url(relative=True)\n+        path = folder_path + "/listDAVObjects"\n+        response = self.publish(path=path, env={}, request_method="GET")\n+        self.assertEqual(response.getStatus(), 401)\n+\n+    def get_permission_mapping(self, klass):\n+        permissions = klass.__ac_permissions__\n+        mapping = {}\n+        for permission in permissions:\n+            # permission can have two or three items:\n+            # (\'WebDAV access\',\n+            #  (\'PROPFIND\', \'listDAVObjects\', \'manage_DAVget\'),\n+            #  (\'Manager\', \'Authenticated\'))\n+            perm, methods = list(permission)[:2]\n+            for method in methods:\n+                mapping[method] = perm\n+        return mapping\n+\n+    def _test_class_protected(self, klass):\n+        mapping = self.get_permission_mapping(klass)\n+        for method in READ_METHODS:\n+            if method in klass.__dict__.keys():\n+                self.assertEqual(\n+                    mapping.get(method),\n+                    "View",\n+                    "Method {0} missing view protection".format(method),\n+                )\n+        for method in WRITE_METHODS:\n+            if method in klass.__dict__.keys():\n+                self.assertEqual(\n+                    mapping.get(method),\n+                    "Modify portal content",\n+                    "Method {0} missing edit protection".format(method),\n+                )\n+\n+    def testCollection_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import Collection\n+        except ImportError:\n+            return\n+        self._test_class_protected(Collection)\n+\n+    def testDocument_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import Document\n+        except ImportError:\n+            return\n+        self._test_class_protected(Document)\n+\n+    def testFile_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import File\n+        except ImportError:\n+            return\n+        self._test_class_protected(File)\n+\n+    def testImage_protected(self):\n+        try:\n+            from plone.app.contenttypes.content import Image\n+        except ImportError:\n+            return\n+        self._test_class_protected(Image)\n'

