Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-03-20T12:33:39+01:00
Author: Carsten Senger (csenger) <senger@rehfisch.de>
Commit: https://github.com/plone/plone.restapi/commit/7dae80f7d8b73c5de294621768eb07662fded77d

[WIP] dxcontent: add targetUrl for primary file fields (#885)

* dxcontent: add targetUrl for primary file fileds

* Add news file

* fix tests

Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;

Files changed:
A news/886.feature
M src/plone/restapi/interfaces.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/testing.zcml
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/test_dxcontent_serializer.py

b'diff --git a/news/886.feature b/news/886.feature\nnew file mode 100644\nindex 00000000..6216d313\n--- /dev/null\n+++ b/news/886.feature\n@@ -0,0 +1,2 @@\n+Add targetUrl to the dxcontent serializer for primary file fields to be able to download a file directly.\n+[csenger]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex c0c57c38..494d4781 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -52,6 +52,21 @@ def __call__():\n         """\n \n \n+class IPrimaryFieldTarget(Interface):\n+    """Return a URL to direct the user to if this is the primary field.\n+    Useful e.g. if you want to redirect certain users to a download url\n+    instead of the item\'s view.\n+    """\n+\n+    def __init__(field, context, request):\n+        """Adapts field, context and request.\n+        """\n+\n+    def __call__():\n+        """Returns a URL.\n+        """\n+\n+\n class IDeserializeFromJson(Interface):\n     """An adapter to deserialize a JSON object into an object in Plone."""\n \ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex f63b615a..20c152b8 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -20,6 +20,8 @@\n     <adapter factory=".dxfields.FileFieldSerializer" />\n     <adapter factory=".dxfields.ImageFieldSerializer" />\n     <adapter factory=".dxfields.RichttextFieldSerializer" />\n+    <adapter factory=".dxfields.DefaultPrimaryFieldTarget" />\n+    <adapter factory=".dxfields.PrimaryFileFieldTarget" />\n     <adapter factory=".blocks.BlocksJSONFieldSerializer" />\n \n     <configure zcml:condition="installed Products.Archetypes">\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex b12a4b4f..ae928e2f 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -2,6 +2,7 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n+from Products.CMFPlone.utils import base_hasattr\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -9,10 +10,12 @@\n from plone.restapi.batching import HypermediaBatch\n from plone.restapi.deserializer import boolean_value\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n+from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.supermodel.utils import mergedTaggedValueDict\n from Products.CMFCore.utils import getToolByName\n from zope.component import adapter\n@@ -68,8 +71,8 @@ def __call__(self, version=None, include_items=True):\n         result.update(expandable_elements(self.context, self.request))\n \n         # Insert field values\n+        primary_field_name = self.get_primary_field_name()\n         for schema in iterSchemata(self.context):\n-\n             read_permissions = mergedTaggedValueDict(schema, READ_PERMISSIONS_KEY)\n \n             for name, field in getFields(schema).items():\n@@ -77,12 +80,23 @@ def __call__(self, version=None, include_items=True):\n                 if not self.check_permission(read_permissions.get(name), obj):\n                     continue\n \n+                # serialize the field\n                 serializer = queryMultiAdapter(\n                     (field, obj, self.request), IFieldSerializer\n                 )\n                 value = serializer()\n                 result[json_compatible(name)] = value\n \n+                # check for a special primary filed target\n+                if name == primary_field_name:\n+                    target_adapter = queryMultiAdapter(\n+                        (field, obj, self.request),\n+                        IPrimaryFieldTarget)\n+                    if target_adapter:\n+                        target = target_adapter()\n+                        if target:\n+                            result[\'targetUrl\'] = target\n+\n         result["allow_discussion"] = getMultiAdapter(\n             (self.context, self.request), name="conversation_view"\n         ).enabled()\n@@ -94,6 +108,21 @@ def _get_workflow_state(self, obj):\n         review_state = wftool.getInfoFor(ob=obj, name="review_state", default=None)\n         return review_state\n \n+    def get_primary_field_name(self):\n+        fieldname = None\n+        info = None\n+        try:\n+            info = IPrimaryFieldInfo(self.context, None)\n+        except TypeError:\n+            # No primary field present\n+            pass\n+        if info is not None:\n+            fieldname = info.fieldname\n+        elif base_hasattr(self.context, "getPrimaryField"):\n+            field = self.context.getPrimaryField()\n+            fieldname = field.getName()\n+        return fieldname\n+\n     def check_permission(self, permission_name, obj):\n         if permission_name is None:\n             return True\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 62ead159..762965d0 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+\n+from AccessControl import getSecurityManager\n+from Products.CMFCore.permissions import ModifyPortalContent\n+\n from plone.app.textfield.interfaces import IRichText\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n@@ -6,6 +10,7 @@\n from plone.restapi.imaging import get_original_image_url\n from plone.restapi.imaging import get_scales\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n from zope.component import adapter\n from zope.interface import implementer\n@@ -125,3 +130,37 @@ class RichttextFieldSerializer(DefaultFieldSerializer):\n     def __call__(self):\n         value = self.get_value()\n         return json_compatible(value, self.context)\n+\n+\n+@adapter(IField, IDexterityContent, Interface)\n+@implementer(IPrimaryFieldTarget)\n+class DefaultPrimaryFieldTarget(object):\n+\n+    def __init__(self, field, context, request):\n+        self.context = context\n+        self.request = request\n+        self.field = field\n+\n+    def use_primary_field_target(self):\n+        sm = getSecurityManager()\n+        perm = bool(sm.checkPermission(ModifyPortalContent, self.context))\n+        if perm:\n+            return False\n+        return True\n+\n+    def __call__(self):\n+        return\n+\n+\n+@adapter(INamedFileField, IDexterityContent, Interface)\n+class PrimaryFileFieldTarget(DefaultPrimaryFieldTarget):\n+\n+    def __call__(self):\n+        if not self.use_primary_field_target():\n+            return\n+\n+        namedfile = self.field.get(self.context)\n+        if namedfile is None:\n+            return\n+\n+        return "/".join((self.context.absolute_url(), "@@download", self.field.__name__))\ndiff --git a/src/plone/restapi/testing.zcml b/src/plone/restapi/testing.zcml\nindex 16c966cd..a453ed21 100644\n--- a/src/plone/restapi/testing.zcml\n+++ b/src/plone/restapi/testing.zcml\n@@ -11,7 +11,7 @@\n       name="plone.restapi.testing.context_vocabulary" />\n \n   <include package="plone.behavior" file="meta.zcml"/>\n-\n+  <include package="plone.rfc822" />\n \t<plone:behavior\n \t    title="Test Behavior"\n \t    description="Schema-only behavior using attributes"\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex 20bc8608..8e9dd864 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -11,6 +11,7 @@\n from plone.namedfile import field as namedfile\n from plone.restapi.tests.helpers import ascii_token\n from plone.supermodel import model\n+from plone.supermodel.directives import primary\n from Products.CMFCore.utils import getToolByName\n from pytz import timezone\n from z3c.formwidget.query.interfaces import IQuerySource\n@@ -239,6 +240,9 @@ class IDXTestDocumentSchema(model.Schema):\n     test_namedblobfile_field = namedfile.NamedBlobFile(required=False)\n     test_namedblobimage_field = namedfile.NamedBlobImage(required=False)\n \n+    primary(\'test_primary_namedfile_field\')\n+    test_primary_namedfile_field = namedfile.NamedFile(required=False)\n+\n     # z3c.relationfield\n     test_relationchoice_field = RelationChoice(\n         required=False, source=CatalogSource(id=["doc1", "doc2"])\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 301b0e00..8d3016c5 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -5,10 +5,12 @@\n from datetime import timedelta\n from DateTime import DateTime\n from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.testing import logout\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.interfaces import ITransformer\n from plone.app.textfield.value import RichTextValue\n+from plone.namedfile.file import NamedFile\n from plone.registry.interfaces import IRegistry\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.interfaces import ISerializeToJson\n@@ -349,3 +351,55 @@ def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior\n         obj = self.serialize()\n         self.assertIn("allow_discussion", obj)\n         self.assertEqual(False, obj["allow_discussion"])\n+\n+\n+class TestDXContentPrimaryFieldTargetUrl(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.portal.invokeFactory(\n+            "DXTestDocument",\n+            id=u"doc1",\n+            test_primary_namedfile_field=NamedFile(\n+                data=u"Spam and eggs", contentType=u"text/plain", filename=u"test.txt"\n+            ),\n+        )\n+\n+        self.portal.invokeFactory(\n+            "DXTestDocument",\n+            id=u"doc2",\n+            test_primary_namedfile_field=None,\n+        )\n+\n+        self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\n+        self.portal.doc1.modification_date = DateTime("2015-04-27T10:24:11+00:00")\n+        IMutableUUID(self.portal.doc1).set("30314724b77a4ec0abbad03d262837aa")\n+\n+    def serialize(self):\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n+        return serializer()\n+\n+    def test_primary_field_target(self):\n+        logout()\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n+        data = serializer()\n+        self.assertIn("targetUrl", data)\n+        download_url = u"/".join(\n+            [self.portal.doc1.absolute_url(), u"@@download/test_primary_namedfile_field"]\n+        )\n+        self.assertEqual(data["targetUrl"], download_url)\n+\n+    def test_primary_field_target_without_file(self):\n+        logout()\n+        serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n+        data = serializer()\n+        self.assertNotIn("targetUrl", data)\n+\n+    def test_primary_field_target_with_edit_permissions(self):\n+        serializer = getMultiAdapter((self.portal.doc1, self.request), ISerializeToJson)\n+        data = serializer()\n+        self.assertNotIn("targetUrl", data)\n'

