Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-02-28T15:46:57+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/ea87aa6c4d3eca6d60a90f7ebfbe9c90138f3b3a

fixes #3059 ReplaceableWrapper does not work (#3060)

* fixes #3059 ReplaceableWrapper does not work

Files changed:
A news/3060.bugfix
M Products/CMFPlone/PloneFolder.py
M Products/CMFPlone/Portal.py
M setup.cfg

b'diff --git a/Products/CMFPlone/PloneFolder.py b/Products/CMFPlone/PloneFolder.py\nindex d1f97f764b..01a9b96559 100644\n--- a/Products/CMFPlone/PloneFolder.py\n+++ b/Products/CMFPlone/PloneFolder.py\n@@ -1,31 +1,33 @@\n # -*- coding: utf-8 -*-\n-from plone.memoize import view\n+from AccessControl import ClassSecurityInfo\n+from AccessControl import Permissions\n+from AccessControl import Unauthorized\n from AccessControl.class_init import InitializeClass\n-from zExceptions import NotFound\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n-from AccessControl import Permissions\n-from AccessControl import Unauthorized\n-from AccessControl import ClassSecurityInfo\n from ComputedAttribute import ComputedAttribute\n-\n from OFS.Folder import Folder\n-from OFS.ObjectManager import REPLACEABLE\n from OFS.OrderSupport import OrderSupport\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFCore.CMFCatalogAware import CatalogAware, WorkflowAware, \\\n-    OpaqueItemManager\n+from plone.memoize import view\n+from Products.CMFCore.CMFCatalogAware import CatalogAware\n+from Products.CMFCore.CMFCatalogAware import OpaqueItemManager\n+from Products.CMFCore.CMFCatalogAware import WorkflowAware\n+from Products.CMFCore.permissions import AccessContentsInformation\n+from Products.CMFCore.permissions import AddPortalContent\n+from Products.CMFCore.permissions import AddPortalFolders\n+from Products.CMFCore.permissions import ListFolderContents\n+from Products.CMFCore.permissions import ModifyPortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n-from Products.CMFCore.permissions import AccessContentsInformation, \\\n-    AddPortalContent, AddPortalFolders, ListFolderContents, \\\n-    ModifyPortalContent\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import bbb\n from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n-\n+from zExceptions import NotFound\n from zope.interface import implementer\n+\n import six\n+import warnings\n+\n \n if bbb.HAS_ZSERVER:\n     from webdav.NullResource import NullResource\n@@ -39,6 +41,10 @@ class ReplaceableWrapper:\n     """A wrapper around an object to make it replaceable."""\n \n     def __init__(self, ob):\n+        warnings.warn(\n+            \'ReplaceableWrapper is deprecated. Planned removal in Plone 6.0\',\n+            DeprecationWarning,\n+        )\n         self.__ob = ob\n \n     def __getattr__(self, name):\n@@ -146,22 +152,26 @@ def __call__(self):\n     view = __call__\n \n     def index_html(self):\n-        """Acquire if not present."""\n+        """ Acquire if not present. """\n         request = getattr(self, \'REQUEST\', None)\n-        if request and \'REQUEST_METHOD\' in request:\n-            if request.maybe_webdav_client:\n-                method = request[\'REQUEST_METHOD\']\n-                if bbb.HAS_ZSERVER and method in (\'PUT\', ):\n-                    # Very likely a WebDAV client trying to create something\n-                    return ReplaceableWrapper(NullResource(self, \'index_html\'))\n-                elif method in (\'GET\', \'HEAD\', \'POST\'):\n-                    # Do nothing, let it go and acquire.\n-                    pass\n-                else:\n-                    raise AttributeError(\'index_html\')\n-        # Acquire from parent\n-        _target = aq_parent(aq_inner(self)).aq_acquire(\'index_html\')\n-        return ReplaceableWrapper(aq_base(_target).__of__(self))\n+        if (\n+            request is not None\n+            and \'REQUEST_METHOD\' in request\n+            and request.maybe_webdav_client\n+        ):\n+            method = request[\'REQUEST_METHOD\']\n+            if bbb.HAS_ZSERVER and method in (\'PUT\', ):\n+                # Very likely a WebDAV client trying to create something\n+                result = NullResource(self, \'index_html\')\n+                setattr(result, \'__replaceable__\', REPLACEABLE)\n+                return ReplaceableWrapper()\n+            elif method not in (\'GET\', \'HEAD\', \'POST\'):\n+                raise AttributeError(\'index_html\')\n+        # Acquire from skin.\n+        _target = self.__getattr__(\'index_html\')\n+        result = aq_base(_target).__of__(self)\n+        setattr(result, \'__replaceable__\', REPLACEABLE)\n+        return result\n \n     index_html = ComputedAttribute(index_html, 1)\n \ndiff --git a/Products/CMFPlone/Portal.py b/Products/CMFPlone/Portal.py\nindex 245cfbc0bd..3f0c243d71 100644\n--- a/Products/CMFPlone/Portal.py\n+++ b/Products/CMFPlone/Portal.py\n@@ -1,20 +1,23 @@\n # -*- coding: utf-8 -*-\n+\n from AccessControl import ClassSecurityInfo\n from AccessControl import Permissions\n from AccessControl import Unauthorized\n-from Acquisition import aq_base\n from AccessControl.class_init import InitializeClass\n+from Acquisition import aq_base\n from ComputedAttribute import ComputedAttribute\n-from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n+from OFS.ObjectManager import REPLACEABLE\n from Products.CMFCore import permissions\n from Products.CMFCore.PortalObject import PortalObjectBase\n+from Products.CMFCore.utils import UniqueObject\n from Products.CMFCore.utils import _checkPermission\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFCore.utils import UniqueObject\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n-from Products.CMFPlone import bbb\n from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone import bbb\n from Products.CMFPlone.DublinCore import DefaultDublinCoreImpl\n+from Products.CMFPlone.PloneFolder import OrderedContainer\n+from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n from Products.CMFPlone.interfaces.siteroot import IPloneSiteRoot\n from Products.CMFPlone.interfaces.syndication import ISyndicatable\n from Products.CMFPlone.permissions import AddPortalContent\n@@ -23,11 +26,9 @@\n from Products.CMFPlone.permissions import ModifyPortalContent\n from Products.CMFPlone.permissions import ReplyToItem\n from Products.CMFPlone.permissions import View\n-from Products.CMFPlone.PloneFolder import OrderedContainer\n-from Products.CMFPlone.PloneFolder import ReplaceableWrapper\n+from plone.i18n.locales.interfaces import IMetadataLanguageAvailability\n from zope.component import queryUtility\n from zope.interface import implementer\n-\n import six\n \n if bbb.HAS_ZSERVER:\n@@ -88,20 +89,24 @@ def __browser_default__(self, request):\n     def index_html(self):\n         """ Acquire if not present. """\n         request = getattr(self, \'REQUEST\', None)\n-        if request is not None and \'REQUEST_METHOD\' in request:\n-            if request.maybe_webdav_client:\n-                method = request[\'REQUEST_METHOD\']\n-                if bbb.HAS_ZSERVER and method in (\'PUT\', ):\n-                    # Very likely a WebDAV client trying to create something\n-                    return ReplaceableWrapper(NullResource(self, \'index_html\'))\n-                elif method in (\'GET\', \'HEAD\', \'POST\'):\n-                    # Do nothing, let it go and acquire.\n-                    pass\n-                else:\n-                    raise AttributeError(\'index_html\')\n+        if (\n+            request is not None\n+            and \'REQUEST_METHOD\' in request\n+            and request.maybe_webdav_client\n+        ):\n+            method = request[\'REQUEST_METHOD\']\n+            if bbb.HAS_ZSERVER and method in (\'PUT\', ):\n+                # Very likely a WebDAV client trying to create something\n+                result = NullResource(self, \'index_html\')\n+                setattr(result, \'__replaceable__\', REPLACEABLE)\n+                return ReplaceableWrapper()\n+            elif method not in (\'GET\', \'HEAD\', \'POST\'):\n+                raise AttributeError(\'index_html\')\n         # Acquire from skin.\n         _target = self.__getattr__(\'index_html\')\n-        return ReplaceableWrapper(aq_base(_target).__of__(self))\n+        result = aq_base(_target).__of__(self)\n+        setattr(result, \'__replaceable__\', REPLACEABLE)\n+        return result\n \n     index_html = ComputedAttribute(index_html, 1)\n \ndiff --git a/news/3060.bugfix b/news/3060.bugfix\nnew file mode 100644\nindex 0000000000..b9ddb2f97e\n--- /dev/null\n+++ b/news/3060.bugfix\n@@ -0,0 +1,2 @@\n+Fix index_html on PortalRoot: ReplaceableWrapper did not work.\n+[jensens]\ndiff --git a/setup.cfg b/setup.cfg\nindex c01f844d46..77b09549f4 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -3,3 +3,11 @@ extra-message = [ci skip]\n \n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+force_alphabetical_sort=True\n+force_single_line=True\n+lines_after_imports=2\n+line_length=80\n+not_skip=__init__.py\n+\n'

