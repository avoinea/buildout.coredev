Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:22:09+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/ee6b107a311f2c221b0680caaa348b1c41c7cbdb

publish only pending comment, else show status message

Files changed:
M plone/app/discussion/browser/moderation.py

b'diff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex e05352e0..52c85a23 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -8,6 +8,7 @@\n from plone.app.discussion.interfaces import _\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IReplies\n+from plone.protect.interfaces import IDisableCSRFProtection\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n@@ -206,6 +207,7 @@ class PublishComment(BrowserView):\n     """\n \n     def __call__(self):\n+        alsoProvides(self.request, IDisableCSRFProtection)\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n         workflowTool = getToolByName(comment, \'portal_workflow\', None)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:22:09+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/840bc8daa639564d9a26570bef22dc2133001e21

changelog

Files changed:
A news/163.enhancement

b'diff --git a/news/163.enhancement b/news/163.enhancement\nnew file mode 100644\nindex 00000000..f6ee230f\n--- /dev/null\n+++ b/news/163.enhancement\n@@ -0,0 +1,2 @@\n+link of notification mail: /@@moderate-publish-comment : publish only pending comment, else show status message "comment already approved"\n+[ksuess]\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:22:09+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/875409daffa1cab1b08b9cd09e2b0f141882905b

Moderation view tabbed

two tabs for comments to moderate and comments approved

Files changed:
M plone/app/discussion/browser/configure.zcml
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/browser/moderation.py
D plone/app/discussion/browser/comments_approved.pt

b'diff --git a/plone/app/discussion/browser/comments_approved.pt b/plone/app/discussion/browser/comments_approved.pt\ndeleted file mode 100644\nindex 1149e97e..00000000\n--- a/plone/app/discussion/browser/comments_approved.pt\n+++ /dev/null\n@@ -1,129 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n-\n-<metal:main fill-slot="main">\n-    <tal:main-macro metal:define-macro="main"\n-        tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n-                    items view/comments;\n-                    filter view/filter|nothing;\n-                    Batch python:modules[\'Products.CMFPlone\'].Batch;\n-                    b_size python:30;\n-                    b_start python:0;\n-                    b_start request/b_start | b_start;\n-                    moderation_enabled view/moderation_enabled;">\n-        <script type="text/javascript"\n-            tal:attributes="src string:${context/portal_url}/++plone++plone.app.discussion.javascripts/moderation.js">\n-        </script>\n-\n-        <h1 class="documentFirstHeading" i18n:translate="heading_comments_approved">\n-            Comments approved\n-        </h1>\n-\n-        <div class="portalMessage warning"\n-            tal:condition="not: view/moderation_enabled">\n-            <strong i18n:translate="">Warning</strong>\n-            <span tal:omit-tag="" i18n:translate="message_moderation_disabled">\n-                Moderation workflow is disabled. You have to\n-                <a i18n:name="enable_comment_workflow"\n-                   i18n:translate="message_enable_comment_workflow" href=""\n-                   tal:attributes="href string:${context/portal_url}/@@content-controlpanel?type_id=Discussion Item">\n-                enable the \'Comment Review Workflow\' for the Comment content\n-                type</a> before you can moderate comments here.\n-            </span>\n-        </div>\n-\n-        <form tal:condition="not:items">\n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n-                <p id="no-comments-message" i18n:translate="message_no_comments_approved">\n-                    No comments approved\n-                </p>\n-            </fieldset>\n-        </form>\n-\n-        <form method="post"\n-              action="#"\n-              tal:condition="items"\n-              tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n-\n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n-\n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n-\n-                <table id="review-comments" class="listing">\n-                    <thead>\n-                        <tr>\n-                            <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n-                            <th class="nosort" i18n:translate="heading_date">Date</th>\n-                            <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n-                            <th class="nosort" i18n:translate="heading_comment">Comment</th>\n-                            <th class="nosort" i18n:translate="heading_approvedby">Approved by</th>\n-                            <th class="nosort" i18n:translate="heading_action">Action</th>\n-                        </tr>\n-                    </thead>\n-                    <tbody>\n-                        <tal:block repeat="item batch">\n-                            <tr class="commentrow"\n-                                tal:define="even repeat/item/even;\n-                                            email python:getattr(item.getObject(), \'author_email\');\n-                                            item_url item/getURL;"\n-                                tal:attributes="class python: even and \'odd\' or \'even\'">\n-                                <td>\n-                                    <span tal:content="python:item.author_name or item.Creator">Name</span>\n-                                    <tal:email tal:condition="email">\n-                                        <br/>\n-                                        <a tal:attributes="href string:mailto:$email;"\n-                                           tal:content="email">Email\n-                                        </a>\n-                                    </tal:email>\n-                                </td>\n-                                <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n-                                <td>\n-                                    <a tal:attributes="href item_url"\n-                                       tal:content="item/in_response_to" />\n-                                </td>\n-                                <td>\n-                                    <span tal:replace="item/Description" />\n-                                    <a href=""\n-                                       tal:attributes="href string:$item_url/getText"\n-                                       tal:condition="python:item.Description.endswith(\'[...]\')"\n-                                       i18n:translate="label_show_full_comment_text"\n-                                       class="show-full-comment-text">show full comment text</a>\n-                                </td>\n-                                <td>\n-                                    <span class="last-history-entry"\n-                                        tal:attributes="data-href string:$item_url/@@historyview">\n-                                        last history entry\n-                                    </span>\n-                                </td>\n-\n-                                <td class="actions">\n-                                    <input type="hidden" name="selected_obj_paths:list" value="#"\n-                                           tal:attributes="value item/getURL" />\n-                                    <input id=""\n-                                           class="destructive comment-delete-button"\n-                                           type="submit"\n-                                           value="Delete"\n-                                           name="form.button.Delete"\n-                                           i18n:attributes="value label_delete;"\n-                                           tal:attributes="id item/id"\n-                                           />\n-                                </td>\n-                            </tr>\n-                        </tal:block>\n-                    </tbody>\n-                </table>\n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n-            </fieldset>\n-        </form>\n-\n-    </tal:main-macro>\n-</metal:main>\n-\n-</body>\n-</html>\ndiff --git a/plone/app/discussion/browser/configure.zcml b/plone/app/discussion/browser/configure.zcml\nindex 6caff55b..7bb5aace 100644\n--- a/plone/app/discussion/browser/configure.zcml\n+++ b/plone/app/discussion/browser/configure.zcml\n@@ -29,23 +29,6 @@\n         permission="plone.app.discussion.ReviewComments"\n         />\n \n-    <!-- Approved comments view -->\n-    <browser:page\n-        for="Products.CMFCore.interfaces.ISiteRoot"\n-        name="comments-approved"\n-        layer="..interfaces.IDiscussionLayer"\n-        class=".moderation.ApprovedView"\n-        permission="plone.app.discussion.ReviewComments"\n-        />\n-\n-    <browser:page\n-        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-        name="comments-approved"\n-        layer="..interfaces.IDiscussionLayer"\n-        class=".moderation.ApprovedView"\n-        permission="plone.app.discussion.ReviewComments"\n-        />\n-\n     <!-- Moderation bulk actions view -->\n     <browser:page\n         for="Products.CMFCore.interfaces.ISiteRoot"\ndiff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex 5cef7448..6f5aea0e 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -11,6 +11,7 @@\n     <tal:main-macro metal:define-macro="main"\n         tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n                     items view/comments;\n+                    items_approved_or_rejected view/comments_approved;\n                     filter view/filter|nothing;\n                     Batch python:modules[\'Products.CMFPlone\'].Batch;\n                     b_size python:30;\n@@ -24,10 +25,6 @@\n         <h1 class="documentFirstHeading" i18n:translate="heading_moderate_comments">\n             Moderate comments\n         </h1>\n-        <p>\n-            <a tal:attributes="href string:${context/@@plone_portal_state/navigation_root_url}/comments-approved;">&gt; <span \n-                i18n:translate="heading_comments_approved">Comments approved</span></a>\n-        </p>\n \n         <div class="portalMessage warning"\n              role="status"\n@@ -43,120 +40,221 @@\n             </span>\n         </div>\n \n-        <form tal:condition="not:items">\n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n-                <p id="no-comments-message" i18n:translate="message_nothing_to_moderate">\n-                    No comments to moderate.\n-                </p>\n+        <div class="pat-autotoc autotabs"\n+              data-pat-autotoc="section:fieldset.tab;levels:legend;">\n+            <fieldset class="tab">\n+              <legend i18n:translate="heading_moderate_comments">\n+                  Moderate comments</legend>\n+              <div>\n+                  <form tal:condition="not:items">\n+                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n+                          <p id="no-comments-message" i18n:translate="message_nothing_to_moderate">\n+                              No comments to moderate.\n+                          </p>\n+                      </fieldset>\n+                  </form>\n+\n+                  <form method="post"\n+                        action="#"\n+                        tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n+                        tal:condition="items"\n+                        tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n+\n+                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n+\n+                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n+\n+                          <table id="review-comments" class="listing">\n+                              <thead>\n+                                  <tr>\n+                                      <th id="bulkactions" class="nosort" colspan="7">\n+                                          <select name="form.select.BulkAction">\n+                                              <option selected="selected" value="-1" i18n:translate="title_bulkactions">Bulk Actions</option>\n+                                              <option value="publish"\n+                                                      i18n:translate="bulkactions_publish"\n+                                                      tal:condition="python: filter != \'published\' and moderation_enabled">Approve</option>\n+                                              <option value="delete" i18n:translate="bulkactions_delete">Delete</option>\n+                                          </select>\n+                                          <input type="hidden" name="form.button.Filter" tal:attributes="value filter" value="" />\n+                                          <input id="dobulkaction"\n+                                                 type="submit"\n+                                                 class="standalone allowMultiSubmit"\n+                                                 value="Apply"\n+                                                 name="form.button.BulkAction"\n+                                                 i18n:attributes="value label_apply;" />\n+                                      </th>\n+                                  </tr>\n+                                  <tr>\n+                                      <th class="nosort"><input name="check_all" type="checkbox" value="0" /></th>\n+                                      <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n+                                      <th class="nosort" i18n:translate="heading_date">Date</th>\n+                                      <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n+                                      <th class="nosort" i18n:translate="heading_comment">Comment</th>\n+                                      <th class="nosort" i18n:translate="heading_action">Action</th>\n+                                  </tr>\n+                              </thead>\n+                              <tbody>\n+                                  <tal:block repeat="item batch">\n+                                      <tr class="commentrow"\n+                                          tal:define="even repeat/item/even;\n+                                                      email python:getattr(item.getObject(), \'author_email\');"\n+                                          tal:attributes="class python: even and \'odd\' or \'even\'">\n+                                          <td class="notDraggable">\n+                                              <input type="checkbox"\n+                                                     class="noborder"\n+                                                     name="paths:list" id="#"\n+                                                     value="#"\n+                                                     tal:attributes="value   item/getPath;\n+                                                                     id      string:cb_${item/id};\n+                                                                     checked item/checked|nothing;\n+                                                                     alt     string:Select ${item/Title};\n+                                                                     title   string:Select ${item/Title}" />\n+                                              <input type="hidden" name="selected_obj_paths:list" value="#"\n+                                                     tal:attributes="value item/getURL" />\n+                                          </td>\n+                                          <td>\n+                                              <span tal:content="python:item.author_name or item.Creator">Name</span>\n+                                              <tal:email tal:condition="email">\n+                                                  <br/>\n+                                                  <a tal:attributes="href string:mailto:$email;"\n+                                                     tal:content="email">Email\n+                                                  </a>\n+                                              </tal:email>\n+                                          </td>\n+                                          <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n+                                          <td>\n+                                              <a tal:attributes="href item/getURL"\n+                                                 tal:content="item/in_response_to" />\n+                                          </td>\n+                                          <td>\n+                                              <span tal:replace="item/Description" />\n+                                              <a href=""\n+                                                 tal:attributes="href string:${item/getURL}/getText"\n+                                                 tal:condition="python:item.Description.endswith(\'[...]\')"\n+                                                 i18n:translate="label_show_full_comment_text"\n+                                                 class="show-full-comment-text">show full comment text</a>\n+                                          </td>\n+                                          <td class="actions">\n+                                              <input id=""\n+                                                     class="context comment-publish-button"\n+                                                     type="submit"\n+                                                     value="Approve"\n+                                                     name="form.button.Publish"\n+                                                     i18n:attributes="value label_publish;"\n+                                                     tal:attributes="id item/id"\n+                                                     tal:condition="python:item.review_state == \'pending\'"\n+                                                     />\n+                                              <input id=""\n+                                                     class="destructive comment-delete-button"\n+                                                     type="submit"\n+                                                     value="Delete"\n+                                                     name="form.button.Delete"\n+                                                     i18n:attributes="value label_delete;"\n+                                                     tal:attributes="id item/id"\n+                                                     />\n+                                          </td>\n+                                      </tr>\n+                                  </tal:block>\n+                              </tbody>\n+                          </table>\n+                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n+                      </fieldset>\n+                  </form>\n+              </div>\n             </fieldset>\n-        </form>\n-\n-        <form method="post"\n-              action="#"\n-              tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n-              tal:condition="items"\n-              tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n-\n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n-\n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n-\n-                <table id="review-comments" class="listing">\n-                    <thead>\n-                        <tr>\n-                            <th id="bulkactions" class="nosort" colspan="7">\n-                                <select name="form.select.BulkAction">\n-                                    <option selected="selected" value="-1" i18n:translate="title_bulkactions">Bulk Actions</option>\n-                                    <option value="publish"\n-                                            i18n:translate="bulkactions_publish"\n-                                            tal:condition="python: filter != \'published\' and moderation_enabled">Approve</option>\n-                                    <option value="delete" i18n:translate="bulkactions_delete">Delete</option>\n-                                </select>\n-                                <input type="hidden" name="form.button.Filter" tal:attributes="value filter" value="" />\n-                                <input id="dobulkaction"\n-                                       type="submit"\n-                                       class="standalone allowMultiSubmit"\n-                                       value="Apply"\n-                                       name="form.button.BulkAction"\n-                                       i18n:attributes="value label_apply;" />\n-                            </th>\n-                        </tr>\n-                        <tr>\n-                            <th class="nosort"><input name="check_all" type="checkbox" value="0" /></th>\n-                            <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n-                            <th class="nosort" i18n:translate="heading_date">Date</th>\n-                            <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n-                            <th class="nosort" i18n:translate="heading_comment">Comment</th>\n-                            <th class="nosort" i18n:translate="heading_action">Action</th>\n-                        </tr>\n-                    </thead>\n-                    <tbody>\n-                        <tal:block repeat="item batch">\n-                            <tr class="commentrow"\n-                                tal:define="even repeat/item/even;\n-                                            email python:getattr(item.getObject(), \'author_email\');"\n-                                tal:attributes="class python: even and \'odd\' or \'even\'">\n-                                <td class="notDraggable">\n-                                    <input type="checkbox"\n-                                           class="noborder"\n-                                           name="paths:list" id="#"\n-                                           value="#"\n-                                           tal:attributes="value   item/getPath;\n-                                                           id      string:cb_${item/id};\n-                                                           checked item/checked|nothing;\n-                                                           alt     string:Select ${item/Title};\n-                                                           title   string:Select ${item/Title}" />\n-                                    <input type="hidden" name="selected_obj_paths:list" value="#"\n-                                           tal:attributes="value item/getURL" />\n-                                </td>\n-                                <td>\n-                                    <span tal:content="python:item.author_name or item.Creator">Name</span>\n-                                    <tal:email tal:condition="email">\n-                                        <br/>\n-                                        <a tal:attributes="href string:mailto:$email;"\n-                                           tal:content="email">Email\n-                                        </a>\n-                                    </tal:email>\n-                                </td>\n-                                <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n-                                <td>\n-                                    <a tal:attributes="href item/getURL"\n-                                       tal:content="item/in_response_to" />\n-                                </td>\n-                                <td>\n-                                    <span tal:replace="item/Description" />\n-                                    <a href=""\n-                                       tal:attributes="href string:${item/getURL}/getText"\n-                                       tal:condition="python:item.Description.endswith(\'[...]\')"\n-                                       i18n:translate="label_show_full_comment_text"\n-                                       class="show-full-comment-text">show full comment text</a>\n-                                </td>\n-                                <td class="actions">\n-                                    <input id=""\n-                                           class="context comment-publish-button"\n-                                           type="submit"\n-                                           value="Approve"\n-                                           name="form.button.Publish"\n-                                           i18n:attributes="value label_publish;"\n-                                           tal:attributes="id item/id"\n-                                           tal:condition="python:item.review_state == \'pending\'"\n-                                           />\n-                                    <input id=""\n-                                           class="destructive comment-delete-button"\n-                                           type="submit"\n-                                           value="Delete"\n-                                           name="form.button.Delete"\n-                                           i18n:attributes="value label_delete;"\n-                                           tal:attributes="id item/id"\n-                                           />\n-                                </td>\n-                            </tr>\n-                        </tal:block>\n-                    </tbody>\n-                </table>\n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n+            <fieldset class="tab">\n+              <legend i18n:translate="heading_approved_and_rejected_comments">\n+                  Approved comments</legend>\n+              <div>\n+                  <form tal:condition="not:items_approved_or_rejected">\n+                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n+                          <p id="no-comments-message" i18n:translate="message_no_comments_approved">\n+                              No comments approved\n+                          </p>\n+                      </fieldset>\n+                  </form>\n+\n+                  <form method="post"\n+                        action="#"\n+                        tal:condition="items_approved_or_rejected"\n+                        tal:define="batch python:Batch(items_approved_or_rejected, b_size, int(b_start), orphan=1);">\n+\n+                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n+\n+                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n+\n+                          <table id="review-comments" class="listing">\n+                              <thead>\n+                                  <tr>\n+                                      <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n+                                      <th class="nosort" i18n:translate="heading_date">Date</th>\n+                                      <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n+                                      <th class="nosort" i18n:translate="heading_comment">Comment</th>\n+                                      <th class="nosort" i18n:translate="heading_approvedby">Approved by</th>\n+                                      <th class="nosort" i18n:translate="heading_action">Action</th>\n+                                  </tr>\n+                              </thead>\n+                              <tbody>\n+                                  <tal:block repeat="item batch">\n+                                      <tr class="commentrow"\n+                                          tal:define="even repeat/item/even;\n+                                                      email python:getattr(item.getObject(), \'author_email\');\n+                                                      item_url item/getURL;"\n+                                          tal:attributes="class python: even and \'odd\' or \'even\'">\n+                                          <td>\n+                                              <span tal:content="python:item.author_name or item.Creator">Name</span>\n+                                              <tal:email tal:condition="email">\n+                                                  <br/>\n+                                                  <a tal:attributes="href string:mailto:$email;"\n+                                                     tal:content="email">Email\n+                                                  </a>\n+                                              </tal:email>\n+                                          </td>\n+                                          <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n+                                          <td>\n+                                              <a tal:attributes="href item_url"\n+                                                 tal:content="item/in_response_to" />\n+                                          </td>\n+                                          <td>\n+                                              <span tal:replace="item/Description" />\n+                                              <a href=""\n+                                                 tal:attributes="href string:$item_url/getText"\n+                                                 tal:condition="python:item.Description.endswith(\'[...]\')"\n+                                                 i18n:translate="label_show_full_comment_text"\n+                                                 class="show-full-comment-text">show full comment text</a>\n+                                          </td>\n+                                          <td>\n+                                              <span class="last-history-entry"\n+                                                  tal:attributes="data-href string:$item_url/@@historyview">\n+                                                  last history entry\n+                                              </span>\n+                                          </td>\n+\n+                                          <td class="actions">\n+                                              <input type="hidden" name="selected_obj_paths:list" value="#"\n+                                                     tal:attributes="value item/getURL" />\n+                                              <input id=""\n+                                                     class="destructive comment-delete-button"\n+                                                     type="submit"\n+                                                     value="Delete"\n+                                                     name="form.button.Delete"\n+                                                     i18n:attributes="value label_delete;"\n+                                                     tal:attributes="id item/id"\n+                                                     />\n+                                          </td>\n+                                      </tr>\n+                                  </tal:block>\n+                              </tbody>\n+                          </table>\n+                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n+                      </fieldset>\n+                  </form>\n+\n+              </div>\n             </fieldset>\n-        </form>\n+        </div>\n+\n+\n     </tal:main-macro>\n </metal:main>\n \ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 52c85a23..ac9af205 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -35,6 +35,10 @@ def __call__(self):\n                                 review_state=\'pending\',\n                                 sort_on=\'created\',\n                                 sort_order=\'reverse\')\n+        self.comments_approved = catalog(object_provides=IComment.__identifier__,\n+                                review_state=\'published\',\n+                                sort_on=\'created\',\n+                                sort_order=\'reverse\')\n         return self.template()\n \n     def moderation_enabled(self):\n@@ -54,31 +58,6 @@ def moderation_enabled(self):\n         return False\n \n \n-class ApprovedView(View):\n-    """Overview comments already approved."""\n-    template = ViewPageTemplateFile(\'comments_approved.pt\')\n-    try:\n-        template.id = \'@@comments-approved\'\n-    except AttributeError:\n-        # id is not writeable in Zope 2.12\n-        pass\n-\n-    def __call__(self):\n-        self.request.set(\'disable_border\', True)\n-        context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n-        self.comments = catalog(object_provides=IComment.__identifier__,\n-                                review_state=\'published\',\n-                                sort_on=\'created\',\n-                                sort_order=\'reverse\')\n-\n-        # print("*** approved comments")\n-        # print(self.comments)\n-        # for el in self.comments:\n-        #     print(el.id, el.review_state)\n-        return self.template()\n-\n-\n class ModerateCommentsEnabled(BrowserView):\n \n     def __call__(self):\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:22:09+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/f7b8335d272f5587237866eb53f10dd50be1240f

additional workflow with rejected state

moderation view and approved comments view: buttons for reject and approve

Files changed:
A plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml
M plone/app/discussion/browser/configure.zcml
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/profiles/default/workflows.xml

b'diff --git a/plone/app/discussion/browser/configure.zcml b/plone/app/discussion/browser/configure.zcml\nindex 7bb5aace..c0890741 100644\n--- a/plone/app/discussion/browser/configure.zcml\n+++ b/plone/app/discussion/browser/configure.zcml\n@@ -100,6 +100,15 @@\n         permission="plone.app.discussion.ReviewComments"\n         />\n \n+    <!-- Reject comment view -->\n+    <browser:page\n+        for="plone.app.discussion.interfaces.IComment"\n+        name="moderate-reject-comment"\n+        layer="..interfaces.IDiscussionLayer"\n+        class=".moderation.RejectComment"\n+        permission="plone.app.discussion.ReviewComments"\n+        />\n+\n     <!-- Comments viewlet -->\n     <browser:viewlet\n         name="plone.comments"\ndiff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 2df2b3fe..593bc299 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -67,17 +67,57 @@ require([  // jshint ignore:line\n             var path = $(row).find("[name=\'selected_obj_paths:list\']").attr("value");\n             var auth_key = $(\'input[name="_authenticator"]\').val();\n             var target = path + "/@@moderate-publish-comment?_authenticator=" + auth_key;\n+            var moderate = $(this).closest("fieldset").attr("id") == "fieldset-moderate-comments";\n             $.ajax({\n                 type: "GET",\n                 url: target,\n                 success: function (msg) {  // jshint ignore:line\n-                    // fade out row\n-                    $(row).fadeOut("normal", function () {\n-                        $(this).remove();\n-                    });\n-                    // reload page if all comments have been removed\n-                    var comments = $("table#review-comments > tbody > tr");\n-                    if (comments.length === 1) {\n+                    if (moderate) {\n+                        // fade out row\n+                        $(row).fadeOut("normal", function () {\n+                            $(this).remove();\n+                        });\n+                        // reload page if all comments have been removed\n+                        var comments = $("table#review-comments > tbody > tr");\n+                        if (comments.length === 1) {\n+                            location.reload();\n+                        }\n+                    } else {\n+                        location.reload();\n+                    }\n+                },\n+                error: function (msg) {  // jshint ignore:line\n+                    alert("Error sending AJAX request:" + target);\n+                }\n+            });\n+        });\n+\n+\n+        /**********************************************************************\n+         * Reject a single comment.\n+         **********************************************************************/\n+        $("input[name=\'form.button.Reject\']").click(function (e) {\n+            e.preventDefault();\n+            var row = $(this).parent().parent();\n+            var path = $(row).find("[name=\'selected_obj_paths:list\']").attr("value");\n+            var auth_key = $(\'input[name="_authenticator"]\').val();\n+            var target = path + "/@@moderate-reject-comment?_authenticator=" + auth_key;\n+            var moderate = $(this).closest("fieldset").attr("id") == "fieldset-moderate-comments";\n+            $.ajax({\n+                type: "GET",\n+                url: target,\n+                success: function (msg) {  // jshint ignore:line\n+                    if (moderate) {\n+                        // fade out row\n+                        $(row).fadeOut("normal", function () {\n+                            $(this).remove();\n+                        });\n+                        // reload page if all comments have been removed\n+                        var comments = $("table#review-comments > tbody > tr");\n+                        if (comments.length === 1) {\n+                            location.reload();\n+                        }\n+                    } else {\n                         location.reload();\n                     }\n                 },\n@@ -171,7 +211,8 @@ require([  // jshint ignore:line\n          **********************************************************************/\n         $(".last-history-entry").each(function() {\n             $(this).load($(this).attr("data-href") + " .historyByLine", function() {\n-                $(this).children(".historyByLine").last().remove();\n+                let currententry = $(this).children(".historyByLine").first();\n+                $(this).html(currententry);\n             });\n         });\n \ndiff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex 6f5aea0e..e3e56bb9 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -142,7 +142,16 @@\n                                                      name="form.button.Publish"\n                                                      i18n:attributes="value label_publish;"\n                                                      tal:attributes="id item/id"\n-                                                     tal:condition="python:item.review_state == \'pending\'"\n+                                                     tal:condition="python:item.review_state in [\'pending\',]"\n+                                                     />\n+                                              <input id=""\n+                                                     class="context comment-reject-button"\n+                                                     type="submit"\n+                                                     value="Reject"\n+                                                     name="form.button.Reject"\n+                                                     i18n:attributes="value label_reject;"\n+                                                     tal:attributes="id item/id"\n+                                                     tal:condition="python:view.moderation_3state and item.review_state == \'pending\'"\n                                                      />\n                                               <input id=""\n                                                      class="destructive comment-delete-button"\n@@ -167,7 +176,7 @@\n                   Approved comments</legend>\n               <div>\n                   <form tal:condition="not:items_approved_or_rejected">\n-                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n+                      <fieldset id="fieldset-moderated-comments" class="formPanel">\n                           <p id="no-comments-message" i18n:translate="message_no_comments_approved">\n                               No comments approved\n                           </p>\n@@ -179,7 +188,7 @@\n                         tal:condition="items_approved_or_rejected"\n                         tal:define="batch python:Batch(items_approved_or_rejected, b_size, int(b_start), orphan=1);">\n \n-                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n+                      <fieldset id="fieldset-moderated-comments" class="formPanel">\n \n                           <div metal:use-macro="here/batch_macros/macros/navigation" />\n \n@@ -190,7 +199,7 @@\n                                       <th class="nosort" i18n:translate="heading_date">Date</th>\n                                       <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n                                       <th class="nosort" i18n:translate="heading_comment">Comment</th>\n-                                      <th class="nosort" i18n:translate="heading_approvedby">Approved by</th>\n+                                      <th class="nosort" i18n:translate="heading_changedby">Last Action</th>\n                                       <th class="nosort" i18n:translate="heading_action">Action</th>\n                                   </tr>\n                               </thead>\n@@ -215,8 +224,8 @@\n                                               <a tal:attributes="href item_url"\n                                                  tal:content="item/in_response_to" />\n                                           </td>\n-                                          <td>\n-                                              <span tal:replace="item/Description" />\n+                                          <td tal:attributes="class  python:item.review_state==\'rejected\' and \'state-private\'">\n+                                              <span tal:replace="item/Description"/>\n                                               <a href=""\n                                                  tal:attributes="href string:$item_url/getText"\n                                                  tal:condition="python:item.Description.endswith(\'[...]\')"\n@@ -229,10 +238,27 @@\n                                                   last history entry\n                                               </span>\n                                           </td>\n-\n                                           <td class="actions">\n                                               <input type="hidden" name="selected_obj_paths:list" value="#"\n                                                      tal:attributes="value item/getURL" />\n+                                              <input id=""\n+                                                     class="context comment-publish-button"\n+                                                     type="submit"\n+                                                     value="Approve"\n+                                                     name="form.button.Publish"\n+                                                     i18n:attributes="value label_publish;"\n+                                                     tal:attributes="id item/id"\n+                                                     tal:condition="python:item.review_state in [\'pending\', \'rejected\']"\n+                                                     />\n+                                              <input id=""\n+                                                     class="context comment-reject-button"\n+                                                     type="submit"\n+                                                     value="Reject"\n+                                                     name="form.button.Reject"\n+                                                     i18n:attributes="value label_reject;"\n+                                                     tal:attributes="id item/id"\n+                                                     tal:condition="python:view.moderation_3state and item.review_state == \'published\'"\n+                                                     />\n                                               <input id=""\n                                                      class="destructive comment-delete-button"\n                                                      type="submit"\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex ac9af205..977b08ab 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -36,7 +36,7 @@ def __call__(self):\n                                 sort_on=\'created\',\n                                 sort_order=\'reverse\')\n         self.comments_approved = catalog(object_provides=IComment.__identifier__,\n-                                review_state=\'published\',\n+                                review_state=[\'published\', \'rejected\'],\n                                 sort_on=\'created\',\n                                 sort_order=\'reverse\')\n         return self.template()\n@@ -57,6 +57,23 @@ def moderation_enabled(self):\n                 return True\n         return False\n \n+    @property\n+    def moderation_3state(self):\n+        """Returns true if a \'review 3 state workflow\' is enabled on \'Discussion Item\'\n+           content type. A \'review 3 state workflow\' is characterized by implementing\n+           a \'rejected\' workflow state.\n+        """\n+        context = aq_inner(self.context)\n+        workflowTool = getToolByName(context, \'portal_workflow\')\n+        comment_workflow = workflowTool.getChainForPortalType(\n+            \'Discussion Item\')\n+        if comment_workflow:\n+            comment_workflow = comment_workflow[0]\n+            comment_workflow = workflowTool[comment_workflow]\n+            if \'rejected\' in comment_workflow.states:\n+                return True\n+        return False\n+\n \n class ModerateCommentsEnabled(BrowserView):\n \n@@ -189,10 +206,11 @@ def __call__(self):\n         alsoProvides(self.request, IDisableCSRFProtection)\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n+        print("*** called: PublishComment for ", comment.Description)\n         workflowTool = getToolByName(comment, \'portal_workflow\', None)\n         workflow_action = self.request.form.get(\'workflow_action\', \'publish\')\n         review_state = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n-        if review_state == "pending":\n+        if review_state != "published":\n             workflowTool.doActionFor(comment, workflow_action)\n             comment.reindexObject()\n             content_object.reindexObject(idxs=[\'total_comments\'])\n@@ -214,6 +232,41 @@ def __call__(self):\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n \n+class RejectComment(BrowserView):\n+    """Reject a comment.\n+\n+       see PublishComment for more information\n+    """\n+\n+    def __call__(self):\n+        alsoProvides(self.request, IDisableCSRFProtection)\n+        comment = aq_inner(self.context)\n+        content_object = aq_parent(aq_parent(comment))\n+        print("*** called: RejectComment for ", comment.Description)\n+        workflowTool = getToolByName(comment, \'portal_workflow\', None)\n+        workflow_action = self.request.form.get(\'workflow_action\', \'reject\')\n+        review_state = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n+        if review_state != \'rejected\':\n+            workflowTool.doActionFor(comment, workflow_action)\n+            comment.reindexObject()\n+            content_object.reindexObject(idxs=[\'total_comments\'])\n+            notify(CommentPublishedEvent(self.context, comment))\n+            IStatusMessage(self.context.REQUEST).addStatusMessage(\n+                _(\'Comment rejected.\'),\n+                type=\'info\')\n+        else:\n+            IStatusMessage(self.context.REQUEST).addStatusMessage(\n+                _(\'Comment already rejected.\'),\n+                type=\'info\')\n+        came_from = self.context.REQUEST.HTTP_REFERER\n+        # if the referrer already has a came_from in it, don\'t redirect back\n+        if (len(came_from) == 0 or \'came_from=\' in came_from or\n+                not getToolByName(\n+                content_object, \'portal_url\').isURLInPortal(came_from)):\n+            came_from = content_object.absolute_url()\n+        return self.context.REQUEST.RESPONSE.redirect(came_from)\n+\n+\n class BulkActionsView(BrowserView):\n     """Bulk actions (unapprove, approve, delete, mark as spam).\n \ndiff --git a/plone/app/discussion/profiles/default/workflows.xml b/plone/app/discussion/profiles/default/workflows.xml\nindex 328a7ac6..536fb374 100644\n--- a/plone/app/discussion/profiles/default/workflows.xml\n+++ b/plone/app/discussion/profiles/default/workflows.xml\n@@ -1,6 +1,7 @@\n <?xml version="1.0"?>\n <object name="portal_workflow" meta_type="Plone Workflow Tool">\n   <object name="comment_review_workflow" meta_type="Workflow"/>\n+  <object name="comment_3state_review_workflow" meta_type="Workflow"/>\n   <object name="comment_one_state_workflow" meta_type="Workflow"/>\n   <bindings>\n     <type type_id="Discussion Item">\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml\nnew file mode 100644\nindex 00000000..14c53cca\n--- /dev/null\n+++ b/plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml\n@@ -0,0 +1,105 @@\n+<?xml version="1.0" encoding="UTF-8"?>\n+<dc-workflow workflow_id="comment_3state_review_workflow" title="Comment Review Workflow" description="A simple review workflow for comments" state_variable="review_state" initial_state="pending" manager_bypass="False">\n+ <permission>Access contents information</permission>\n+ <permission>Modify portal content</permission>\n+ <permission>Reply to item</permission>\n+ <permission>View</permission>\n+ <state state_id="pending" title="Pending">\n+  <description>Submitted, pending review.</description>\n+  <exit-transition transition_id="publish"/>\n+  <exit-transition transition_id="reject"/>\n+  <permission-map name="Access contents information" acquired="False">\n+   <permission-role>Manager</permission-role>\n+   <permission-role>Owner</permission-role>\n+   <permission-role>Reviewer</permission-role>\n+  </permission-map>\n+  <permission-map name="Modify portal content" acquired="False">\n+   <permission-role>Manager</permission-role>\n+   <permission-role>Owner</permission-role>\n+   <permission-role>Reviewer</permission-role>\n+  </permission-map>\n+  <permission-map name="Reply to item" acquired="False">\n+  </permission-map>\n+  <permission-map name="View" acquired="False">\n+   <permission-role>Manager</permission-role>\n+   <permission-role>Owner</permission-role>\n+   <permission-role>Reviewer</permission-role>\n+  </permission-map>\n+ </state>\n+ <state state_id="published" title="Published">\n+  <description>Visible to everyone, non-editable.</description>\n+  <exit-transition transition_id="reject"/>\n+  <permission-map name="Access contents information" acquired="True">\n+  </permission-map>\n+  <permission-map name="Modify portal content" acquired="False">\n+   <permission-role>Manager</permission-role>\n+  </permission-map>\n+  <permission-map name="Reply to item" acquired="True">\n+  </permission-map>\n+  <permission-map name="View" acquired="True">\n+  </permission-map>\n+ </state>\n+ <state state_id="rejected" title="">\n+  <exit-transition transition_id="publish"/>\n+ </state>\n+ <transition transition_id="publish" title="Reviewer approves content" new_state="published" trigger="USER" before_script="" after_script="">\n+  <description>Approving the comment makes it visible to other users.</description>\n+  <action url="%(content_url)s/content_status_modify?workflow_action=publish" category="workflow" icon="">Approve</action>\n+  <guard>\n+   <guard-permission>Review comments</guard-permission>\n+  </guard>\n+ </transition>\n+ <transition transition_id="reject" title="Reject" new_state="rejected" trigger="USER" before_script="" after_script="">\n+  <action url="%(content_url)s/content_status_modify?workflow_action=rejected" category="workflow" icon="">Reject</action>\n+  <guard>\n+   <guard-permission>Review comments</guard-permission>\n+  </guard>\n+ </transition>\n+ <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">\n+  <description>Previous transition</description>\n+  <default>\n+\n+   <expression>transition/getId|nothing</expression>\n+  </default>\n+  <guard>\n+  </guard>\n+ </variable>\n+ <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">\n+  <description>The ID of the user who performed the previous transition</description>\n+  <default>\n+\n+   <expression>user/getUserName</expression>\n+  </default>\n+  <guard>\n+  </guard>\n+ </variable>\n+ <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">\n+  <description>Comment about the last transition</description>\n+  <default>\n+\n+   <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n+  </default>\n+  <guard>\n+  </guard>\n+ </variable>\n+ <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">\n+  <description>Provides access to workflow history</description>\n+  <default>\n+\n+   <expression>state_change/getHistory</expression>\n+  </default>\n+  <guard>\n+   <guard-permission>Request review</guard-permission>\n+   <guard-permission>Review portal content</guard-permission>\n+  </guard>\n+ </variable>\n+ <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">\n+  <description>When the previous transition was performed</description>\n+  <default>\n+\n+   <expression>state_change/getDateTime</expression>\n+  </default>\n+  <guard>\n+  </guard>\n+ </variable>\n+</dc-workflow>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:36:28+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/084d2893e7222a984c31112283ddd9e671981fba

Additional (optional) workflow: "Comment Multiple State Review Workflow"

Moderator is not forced to delete a comment or to let it pending:
Workflow has two more states "rejected" and "spam" to existing review workflow.
Moderation view extended showing all states. Filter by state.

Files changed:
A news/164.enhancement
A plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml
M plone/app/discussion/browser/comments.pt
M plone/app/discussion/browser/configure.zcml
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/javascripts/comments.js
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/profiles/default/metadata.xml
M plone/app/discussion/profiles/default/workflows.xml
M plone/app/discussion/tests/functional_test_comment_review_workflow.txt
M plone/app/discussion/tests/functional_test_comments.txt
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_workflow.py
M plone/app/discussion/upgrades.py
M plone/app/discussion/upgrades.zcml

b'diff --git a/news/164.enhancement b/news/164.enhancement\nnew file mode 100644\nindex 00000000..6feb63a9\n--- /dev/null\n+++ b/news/164.enhancement\n@@ -0,0 +1,3 @@\n+Additional optional workflow: workflow with two more states: rejected and spam,\n+    added to existing states pending and published. Moderation view extended to handle four workflow states.\n+[ksuess]\ndiff --git a/plone/app/discussion/browser/comments.pt b/plone/app/discussion/browser/comments.pt\nindex bf6671bc..1dd26b6f 100644\n--- a/plone/app/discussion/browser/comments.pt\n+++ b/plone/app/discussion/browser/comments.pt\n@@ -39,8 +39,9 @@\n                              portrait_url python:view.get_commenter_portrait(reply.author_username);\n                              review_state python:wtool.getInfoFor(reply, \'review_state\', \'none\');\n                              canEdit python:view.can_edit(reply);\n-                             canDelete python:view.can_delete(reply)"\n-                 tal:attributes="class python:\'comment replyTreeLevel\'+str(depth)+\' state-\'+str(review_state);\n+                             canDelete python:view.can_delete(reply);\n+                             colorclass python:lambda x: \'state-private\' if x==\'rejected\' else (\'state-internal\' if x==\'spam\' else \'state-\'+x);"\n+                 tal:attributes="class python:\'comment replyTreeLevel{depth} {state}\'.format(depth= depth, state=colorclass(review_state));\n                                  id string:${reply/getId}"\n                  tal:condition="python:canReview or review_state == \'published\'">\n \n@@ -119,7 +120,7 @@\n                         <tal:edit tal:condition="python:isEditCommentAllowed and canEdit">\n                           <!-- plone 5 will have auth_token available\n                                so we\'ll use modal pattern -->\n-                          <a class="commentactionsform pat-plone-modal context"\n+                          <a class="pat-plone-modal context"\n                              tal:condition="auth_token"\n                              tal:attributes="href string:${reply/absolute_url}/@@edit-comment?_authenticator=${auth_token}"\n                              i18n:translate="Edit">Edit</a>\n@@ -146,10 +147,10 @@\n                               class="commentactionsform"\n                               tal:condition="canReview"\n                               tal:repeat="action reply_dict/actions|nothing"\n-                              tal:attributes="action string:${reply/absolute_url}/@@moderate-publish-comment;\n+                              tal:attributes="action string:${reply/absolute_url}/@@transmit-comment;\n                                               name action/id">\n                             <input type="hidden" name="workflow_action" tal:attributes="value action/id" />\n-                            <input name="form.button.PublishComment"\n+                            <input name="form.button.TransmitComment"\n                                    class="context"\n                                    type="submit"\n                                    tal:attributes="value action/title"\ndiff --git a/plone/app/discussion/browser/configure.zcml b/plone/app/discussion/browser/configure.zcml\nindex c0890741..621428ce 100644\n--- a/plone/app/discussion/browser/configure.zcml\n+++ b/plone/app/discussion/browser/configure.zcml\n@@ -91,23 +91,15 @@\n         permission="plone.app.discussion.DeleteOwnComments"\n         />\n \n-    <!-- Publish comment view -->\n+    <!-- Comment Transition -->\n     <browser:page\n         for="plone.app.discussion.interfaces.IComment"\n-        name="moderate-publish-comment"\n+        name="transmit-comment"\n         layer="..interfaces.IDiscussionLayer"\n-        class=".moderation.PublishComment"\n+        class=".moderation.CommentTransition"\n         permission="plone.app.discussion.ReviewComments"\n         />\n \n-    <!-- Reject comment view -->\n-    <browser:page\n-        for="plone.app.discussion.interfaces.IComment"\n-        name="moderate-reject-comment"\n-        layer="..interfaces.IDiscussionLayer"\n-        class=".moderation.RejectComment"\n-        permission="plone.app.discussion.ReviewComments"\n-        />\n \n     <!-- Comments viewlet -->\n     <browser:viewlet\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex a8ffe957..73086e14 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -177,15 +177,18 @@ def mailhost_warning(self):\n         return True\n \n     def custom_comment_workflow_warning(self):\n-        """Returns a warning string if a custom comment workflow is enabled.\n-        """\n+        """Return True if a custom comment workflow is enabled."""\n         wftool = getToolByName(self.context, \'portal_workflow\', None)\n         workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n         one_state_workflow_enabled = \\\n             \'comment_one_state_workflow\' in workflow_chain\n         comment_review_workflow_enabled = \\\n             \'comment_review_workflow\' in workflow_chain\n-        if one_state_workflow_enabled or comment_review_workflow_enabled:\n+        comment_multiple_state_review_workflow = \\\n+            \'comment_multiple_state_review_workflow\' in workflow_chain\n+        if one_state_workflow_enabled \\\n+                or comment_review_workflow_enabled \\\n+                or comment_multiple_state_review_workflow:\n             return\n         return True\n \ndiff --git a/plone/app/discussion/browser/javascripts/comments.js b/plone/app/discussion/browser/javascripts/comments.js\nindex 0c64b13d..e8ebb55a 100644\n--- a/plone/app/discussion/browser/javascripts/comments.js\n+++ b/plone/app/discussion/browser/javascripts/comments.js\n@@ -162,9 +162,9 @@ require([  // jshint ignore:line\n \n \n         /**********************************************************************\n-         * Publish a single comment.\n+         * Transmit a single comment.\n          **********************************************************************/\n-        $(\'input[name="form.button.PublishComment"]\').on(\'click\', function () {\n+        $(\'input[name="form.button.TransmitComment"]\').on(\'click\', function () {\n             var trigger = this;\n             var form = $(this).parents(\'form\');\n             var data = $(form).serialize();\n@@ -176,7 +176,7 @@ require([  // jshint ignore:line\n                 context: trigger,\n                 success: function (msg) {  // jshint ignore:line\n                     // remove button (trigger object can\'t be directly removed)\n-                    form.find(\'input[name="form.button.PublishComment"]\').remove();\n+                    form.find(\'input[name="form.button.TransmitComment"]\').remove();\n                     form.parents(\'.state-pending\').toggleClass(\'state-pending\').toggleClass(\'state-published\');\n                 },\n                 error: function (msg) {  // jshint ignore:line\n@@ -201,7 +201,7 @@ require([  // jshint ignore:line\n         /**********************************************************************\n          * Delete a comment and its answers.\n          **********************************************************************/\n-        $(\'input[name="form.button.DeleteComment"]\').on(\'click\', function () {\n+        $(\'input[name="form.button.DeleteCommentComment"]\').on(\'click\', function () {\n             var trigger = this;\n             var form = $(this).parents(\'form\');\n             var data = $(form).serialize();\ndiff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 593bc299..93c56008 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -3,221 +3,230 @@\n  * jQuery functions for the plone.app.discussion bulk moderation.\n  *\n  ******************************************************************************/\n-/* global require, alert */\n-/* jshint quotmark: false */\n \n-if(require === undefined){\n-    require = function(reqs, torun){  // jshint ignore:line\n-        \'use strict\';\n-        return torun(window.jQuery);\n-    };\n+if (require === undefined) {\n+  require = function(reqs, torun) {\n+    "use strict";\n+    return torun(window.jQuery);\n+  };\n }\n \n-require([  // jshint ignore:line\n-    \'jquery\'\n-], function ($) {\n-    \'use strict\';\n-    // This unnamed function allows us to use $ inside of a block of code\n-    // without permanently overwriting $.\n-    // http://docs.jquery.com/Using_jQuery_with_Other_Libraries\n-\n-    //#JSCOVERAGE_IF 0\n-\n-    /**************************************************************************\n-     * Document Ready Function: Executes when DOM is ready.\n-     **************************************************************************/\n-    $(document).ready(function () {\n-\n-        /**********************************************************************\n-         * Delete a single comment.\n-         **********************************************************************/\n-        $("input[name=\'form.button.Delete\']").click(function (e) {\n-            e.preventDefault();\n-            var row = $(this).parent().parent();\n-            var path = $(row).find("[name=\'selected_obj_paths:list\']").attr("value");\n-            var auth_key = $(\'input[name="_authenticator"]\').val();\n-            var target = path + "/@@moderate-delete-comment?_authenticator=" + auth_key;\n-            $.ajax({\n-                type: "GET",\n-                url: target,\n-                success: function (msg) {  // jshint ignore:line\n-                    // fade out row\n-                    $(row).fadeOut("normal", function () {\n-                        $(this).remove();\n-                    });\n-                    // reload page if all comments have been removed\n-                    var comments = $("table#review-comments > tbody > tr");\n-                    if (comments.length === 1) {\n-                        location.reload();\n-                    }\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    alert("Error sending AJAX request:" + target);\n-                }\n-            });\n-        });\n-\n-\n-        /**********************************************************************\n-         * Publish a single comment.\n-         **********************************************************************/\n-        $("input[name=\'form.button.Publish\']").click(function (e) {\n-            e.preventDefault();\n-            var row = $(this).parent().parent();\n-            var path = $(row).find("[name=\'selected_obj_paths:list\']").attr("value");\n-            var auth_key = $(\'input[name="_authenticator"]\').val();\n-            var target = path + "/@@moderate-publish-comment?_authenticator=" + auth_key;\n-            var moderate = $(this).closest("fieldset").attr("id") == "fieldset-moderate-comments";\n-            $.ajax({\n-                type: "GET",\n-                url: target,\n-                success: function (msg) {  // jshint ignore:line\n-                    if (moderate) {\n-                        // fade out row\n-                        $(row).fadeOut("normal", function () {\n-                            $(this).remove();\n-                        });\n-                        // reload page if all comments have been removed\n-                        var comments = $("table#review-comments > tbody > tr");\n-                        if (comments.length === 1) {\n-                            location.reload();\n-                        }\n-                    } else {\n-                        location.reload();\n-                    }\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    alert("Error sending AJAX request:" + target);\n-                }\n-            });\n-        });\n-\n+require(["jquery", "pat-registry"], function($, registry) {\n+  "use strict";\n+\n+  $(document).ready(function() {\n+    init();\n+  });\n+\n+  function init() {\n+    /**********************************************************************\n+     * Delete a single comment.\n+     **********************************************************************/\n+    $("input[name=\'form.button.moderation.DeleteComment\']").click(function(e) {\n+      e.preventDefault();\n+      var row = $(this).closest("tr");\n+      var path = row.find("[name=\'selected_obj_paths:list\']").attr("value");\n+      var auth_key = $(\'input[name="_authenticator"]\').val();\n+      var target =\n+        path + "/@@moderate-delete-comment?_authenticator=" + auth_key;\n+      $.ajax({\n+        type: "GET",\n+        url: target,\n+        success: function(msg) {\n+          // fade out row\n+          row.fadeOut(250).fadeIn(250, function() {\n+            row.remove();\n+          });\n+          // reload page if all comments have been removed\n+          var comments = $("table#review-comments > tbody > tr");\n+          if (comments.length === 1) {\n+            location.reload();\n+          }\n+        },\n+        error: function(msg) {\n+          alert("Error sending AJAX request:" + target);\n+        }\n+      });\n+    });\n \n-        /**********************************************************************\n-         * Reject a single comment.\n-         **********************************************************************/\n-        $("input[name=\'form.button.Reject\']").click(function (e) {\n-            e.preventDefault();\n-            var row = $(this).parent().parent();\n-            var path = $(row).find("[name=\'selected_obj_paths:list\']").attr("value");\n-            var auth_key = $(\'input[name="_authenticator"]\').val();\n-            var target = path + "/@@moderate-reject-comment?_authenticator=" + auth_key;\n-            var moderate = $(this).closest("fieldset").attr("id") == "fieldset-moderate-comments";\n-            $.ajax({\n-                type: "GET",\n-                url: target,\n-                success: function (msg) {  // jshint ignore:line\n-                    if (moderate) {\n-                        // fade out row\n-                        $(row).fadeOut("normal", function () {\n-                            $(this).remove();\n-                        });\n-                        // reload page if all comments have been removed\n-                        var comments = $("table#review-comments > tbody > tr");\n-                        if (comments.length === 1) {\n-                            location.reload();\n-                        }\n-                    } else {\n-                        location.reload();\n-                    }\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    alert("Error sending AJAX request:" + target);\n-                }\n+    /**********************************************************************\n+     * Transmit a single comment.\n+     **********************************************************************/\n+    $(\'input[name="form.button.moderation.TransmitComment"]\').click(function(\n+      e\n+    ) {\n+      e.preventDefault();\n+      let button = $(this);\n+      var row = $(this).closest("tr");\n+      var path = $(row)\n+        .find("[name=\'selected_obj_paths:list\']")\n+        .attr("value");\n+      var workflow_action = $(this).attr("data-transition");\n+      var auth_key = $(\'input[name="_authenticator"]\').val();\n+      // distinction of workflow_action\n+      var target =\n+        path +\n+        "/@@transmit-comment?_authenticator=" +\n+        auth_key +\n+        "&workflow_action=" +\n+        workflow_action;\n+      var moderate =\n+        $(this)\n+          .closest("fieldset")\n+          .attr("id") == "fieldset-moderate-comments";\n+      $.ajax({\n+        type: "GET",\n+        url: target,\n+        success: function(msg) {\n+          if (moderate) {\n+            let url = location.href;\n+            $("#review-comments").load(url + " #review-comments", function() {\n+              init();\n+              $(".pat-plone-modal").patPloneModal();\n             });\n-        });\n-\n-\n-        /**********************************************************************\n-         * Bulk actions for comments (delete, publish)\n-         **********************************************************************/\n-        $("input[name=\'form.button.BulkAction\']").click(function (e) {\n-            e.preventDefault();\n-            var form = $(this).parents("form");\n-            var target = $(form).attr(\'action\');\n-            var params = $(form).serialize();\n-            var valArray = $(\'input:checkbox:checked\');\n-            var selectField = $(form).find("[name=\'form.select.BulkAction\']");\n-            if (selectField.val() === \'-1\') {\n-                // XXX: translate message\n-                alert("You haven\'t selected a bulk action. Please select one.");\n-            } else if (valArray.length === 0) {\n-                // XXX: translate message\n-                alert("You haven\'t selected any comment for this bulk action." +\n-                      "Please select at least one comment.");\n-            } else {\n-                $.post(target, params, function (data) {  // jshint ignore:line\n-                    valArray.each(function () {\n-                        /* Remove all selected lines. */\n-                        var row = $(this).parent().parent();\n-                        row.fadeOut("normal", function () {\n-                            row.remove();\n-                        });\n-                    });\n-                    // reload page if all comments have been removed\n-                    var comments = $("table#review-comments > tbody > tr");\n-                    if (comments.length <= valArray.length) {\n-                        location.reload();\n-                    }\n-                });\n-                // reset the bulkaction select\n-                selectField.find("option[value=\'-1\']").attr(\'selected\', \'selected\');\n-            }\n-        });\n-\n-\n-        /**********************************************************************\n-         * Check or uncheck all checkboxes from the batch moderation page.\n-         **********************************************************************/\n-        $("input[name=\'check_all\']").click(function () {\n-            if ($(this).val() === \'0\') {\n-                $(this).parents("table")\n-                       .find("input:checkbox")\n-                       .attr("checked", "checked");\n-                $(this).val("1");\n-            } else {\n-                $(this).parents("table")\n-                       .find("input:checkbox")\n-                       .attr("checked", "");\n-                $(this).val("0");\n-            }\n-        });\n-\n+          } else {\n+            location.reload();\n+          }\n+        },\n+        error: function(msg) {\n+          alert(\n+            "Error transmitting comment. (Error sending AJAX request:" +\n+              target +\n+              ")"\n+          );\n+        }\n+      });\n+    });\n \n-        /**********************************************************************\n-         * Show full text of a comment in the batch moderation page.\n-         **********************************************************************/\n-        $(".show-full-comment-text").click(function (e) {\n-            e.preventDefault();\n-            var target = $(this).attr("href");\n-            var td = $(this).parent();\n-            $.ajax({\n-                type: "GET",\n-                url: target,\n-                data: "",\n-                success: function (data) {\n-                    // show full text\n-                    td.replaceWith("<td>" + data + "</td>");\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    alert("Error getting full comment text:" + target);\n-                }\n+    /**********************************************************************\n+     * Bulk actions for comments (delete, publish)\n+     **********************************************************************/\n+    $("input[name=\'form.button.BulkAction\']").click(function(e) {\n+      e.preventDefault();\n+      var form = $(this).parents("form");\n+      var target = $(form).attr("action");\n+      var params = $(form).serialize();\n+      var valArray = $("input:checkbox:checked");\n+      var selectField = $(form).find("[name=\'form.select.BulkAction\']");\n+      if (selectField.val() === "-1") {\n+        // XXX: translate message\n+        alert("You haven\'t selected a bulk action. Please select one.");\n+      } else if (valArray.length === 0) {\n+        // XXX: translate message\n+        alert(\n+          "You haven\'t selected any comment for this bulk action." +\n+            "Please select at least one comment."\n+        );\n+      } else {\n+        $.post(target, params, function(data) {\n+          valArray.each(function() {\n+            /* Remove all selected lines. */\n+            var row = $(this)\n+              .parent()\n+              .parent();\n+            row.fadeOut("normal", function() {\n+              row.remove();\n             });\n+          });\n+          // reload page if all comments have been removed\n+          var comments = $("table#review-comments > tbody > tr");\n+          if (comments.length <= valArray.length) {\n+            location.reload();\n+          }\n         });\n+        // reset the bulkaction select\n+        selectField.find("option[value=\'-1\']").attr("selected", "selected");\n+      }\n+    });\n \n+    /**********************************************************************\n+     * Check or uncheck all checkboxes from the batch moderation page.\n+     **********************************************************************/\n+    $("input[name=\'check_all\']").click(function() {\n+      if ($(this).val() === "0") {\n+        $(this)\n+          .parents("table")\n+          .find("input:checkbox")\n+          .prop("checked", true);\n+        $(this).val("1");\n+      } else {\n+        $(this)\n+          .parents("table")\n+          .find("input:checkbox")\n+          .prop("checked", false);\n+        $(this).val("0");\n+      }\n+    });\n \n-        /**********************************************************************\n-         * Comments approved: Load history for approved date.\n-         **********************************************************************/\n-        $(".last-history-entry").each(function() {\n-            $(this).load($(this).attr("data-href") + " .historyByLine", function() {\n-                let currententry = $(this).children(".historyByLine").first();\n-                $(this).html(currententry);\n-            });\n-        });\n-\n+    /**********************************************************************\n+     * select comments with review_state\n+     **********************************************************************/\n+\n+    $("input[name=\'review_state\']").click(function() {\n+      // location.search = \'review_state=\' + $(this).val();\n+      let review_state = $(this).val();\n+      let url = location.href;\n+      if (location.search) {\n+        url = location.href.replace(\n+          location.search,\n+          "?review_state=" + review_state\n+        );\n+      } else {\n+        url = location.href + "?review_state=" + review_state;\n+      }\n+\n+      $("#review-comments").load(url + " #review-comments", function() {\n+        init();\n+        $(".pat-plone-modal").patPloneModal();\n+        let stateObj = { review_state: review_state };\n+        history.pushState(stateObj, "moderate comments", url);\n+      });\n     });\n \n-    //#JSCOVERAGE_ENDIF\n+    /**********************************************************************\n+     * Show full text of a comment in the batch moderation page.\n+     **********************************************************************/\n+    $(".show-full-comment-text").click(function(e) {\n+      e.preventDefault();\n+      var target = $(this).attr("href");\n+      var parent = $(this).parent();\n+      $.ajax({\n+        type: "GET",\n+        url: target,\n+        data: "",\n+        success: function(data) {\n+          // show full text\n+          parent.html(data);\n+        },\n+        error: function(msg) {\n+          alert("Error getting full comment text:" + target);\n+        }\n+      });\n+    });\n \n+    /**********************************************************************\n+     * Comments approved: Load history for approved date.\n+     **********************************************************************/\n+    $(".last-history-entry").each(function() {\n+      var me = $(this);\n+      $.ajax({\n+        url: me.attr("data-href"),\n+        success: function(data) {\n+          let first_history_entry = $(data)\n+            .find(".historyByLine")\n+            .first();\n+          me.html("");\n+          first_history_entry.children().each(function() {\n+            me.append($(this));\n+            me.append("<br/>");\n+          });\n+          // format date\n+          registry.scan(me);\n+        },\n+        error: function(msg) {\n+          alert("Error getting history.");\n+        }\n+      });\n+    });\n+  } // end init\n });\ndiff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex e3e56bb9..fb99297c 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -17,7 +17,9 @@\n                     b_size python:30;\n                     b_start python:0;\n                     b_start request/b_start | b_start;\n-                    moderation_enabled view/moderation_enabled;">\n+                    moderation_enabled view/moderation_enabled;\n+                    colorclass python:lambda x: \'state-private\' if x==\'rejected\' else (\'state-internal\' if x==\'spam\' else \'state-\'+x);\n+                    ">\n         <script type="text/javascript"\n             tal:attributes="src string:${context/portal_url}/++plone++plone.app.discussion.javascripts/moderation.js">\n         </script>\n@@ -40,245 +42,163 @@\n             </span>\n         </div>\n \n-        <div class="pat-autotoc autotabs"\n-              data-pat-autotoc="section:fieldset.tab;levels:legend;">\n-            <fieldset class="tab">\n-              <legend i18n:translate="heading_moderate_comments">\n-                  Moderate comments</legend>\n-              <div>\n-                  <form tal:condition="not:items">\n-                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n-                          <p id="no-comments-message" i18n:translate="message_nothing_to_moderate">\n-                              No comments to moderate.\n-                          </p>\n-                      </fieldset>\n-                  </form>\n \n-                  <form method="post"\n-                        action="#"\n-                        tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n-                        tal:condition="items"\n-                        tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n-\n-                      <fieldset id="fieldset-moderate-comments" class="formPanel">\n-\n-                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n-\n-                          <table id="review-comments" class="listing">\n-                              <thead>\n-                                  <tr>\n-                                      <th id="bulkactions" class="nosort" colspan="7">\n-                                          <select name="form.select.BulkAction">\n-                                              <option selected="selected" value="-1" i18n:translate="title_bulkactions">Bulk Actions</option>\n-                                              <option value="publish"\n-                                                      i18n:translate="bulkactions_publish"\n-                                                      tal:condition="python: filter != \'published\' and moderation_enabled">Approve</option>\n-                                              <option value="delete" i18n:translate="bulkactions_delete">Delete</option>\n-                                          </select>\n-                                          <input type="hidden" name="form.button.Filter" tal:attributes="value filter" value="" />\n-                                          <input id="dobulkaction"\n-                                                 type="submit"\n-                                                 class="standalone allowMultiSubmit"\n-                                                 value="Apply"\n-                                                 name="form.button.BulkAction"\n-                                                 i18n:attributes="value label_apply;" />\n-                                      </th>\n-                                  </tr>\n-                                  <tr>\n-                                      <th class="nosort"><input name="check_all" type="checkbox" value="0" /></th>\n-                                      <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n-                                      <th class="nosort" i18n:translate="heading_date">Date</th>\n-                                      <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n-                                      <th class="nosort" i18n:translate="heading_comment">Comment</th>\n-                                      <th class="nosort" i18n:translate="heading_action">Action</th>\n-                                  </tr>\n-                              </thead>\n-                              <tbody>\n-                                  <tal:block repeat="item batch">\n-                                      <tr class="commentrow"\n-                                          tal:define="even repeat/item/even;\n-                                                      email python:getattr(item.getObject(), \'author_email\');"\n-                                          tal:attributes="class python: even and \'odd\' or \'even\'">\n-                                          <td class="notDraggable">\n-                                              <input type="checkbox"\n-                                                     class="noborder"\n-                                                     name="paths:list" id="#"\n-                                                     value="#"\n-                                                     tal:attributes="value   item/getPath;\n-                                                                     id      string:cb_${item/id};\n-                                                                     checked item/checked|nothing;\n-                                                                     alt     string:Select ${item/Title};\n-                                                                     title   string:Select ${item/Title}" />\n-                                              <input type="hidden" name="selected_obj_paths:list" value="#"\n-                                                     tal:attributes="value item/getURL" />\n-                                          </td>\n-                                          <td>\n-                                              <span tal:content="python:item.author_name or item.Creator">Name</span>\n-                                              <tal:email tal:condition="email">\n-                                                  <br/>\n-                                                  <a tal:attributes="href string:mailto:$email;"\n-                                                     tal:content="email">Email\n-                                                  </a>\n-                                              </tal:email>\n-                                          </td>\n-                                          <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n-                                          <td>\n-                                              <a tal:attributes="href item/getURL"\n-                                                 tal:content="item/in_response_to" />\n-                                          </td>\n-                                          <td>\n-                                              <span tal:replace="item/Description" />\n-                                              <a href=""\n-                                                 tal:attributes="href string:${item/getURL}/getText"\n-                                                 tal:condition="python:item.Description.endswith(\'[...]\')"\n-                                                 i18n:translate="label_show_full_comment_text"\n-                                                 class="show-full-comment-text">show full comment text</a>\n-                                          </td>\n-                                          <td class="actions">\n-                                              <input id=""\n-                                                     class="context comment-publish-button"\n-                                                     type="submit"\n-                                                     value="Approve"\n-                                                     name="form.button.Publish"\n-                                                     i18n:attributes="value label_publish;"\n-                                                     tal:attributes="id item/id"\n-                                                     tal:condition="python:item.review_state in [\'pending\',]"\n-                                                     />\n-                                              <input id=""\n-                                                     class="context comment-reject-button"\n-                                                     type="submit"\n-                                                     value="Reject"\n-                                                     name="form.button.Reject"\n-                                                     i18n:attributes="value label_reject;"\n-                                                     tal:attributes="id item/id"\n-                                                     tal:condition="python:view.moderation_3state and item.review_state == \'pending\'"\n-                                                     />\n-                                              <input id=""\n-                                                     class="destructive comment-delete-button"\n-                                                     type="submit"\n-                                                     value="Delete"\n-                                                     name="form.button.Delete"\n-                                                     i18n:attributes="value label_delete;"\n-                                                     tal:attributes="id item/id"\n-                                                     />\n-                                          </td>\n-                                      </tr>\n-                                  </tal:block>\n-                              </tbody>\n-                          </table>\n-                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n-                      </fieldset>\n-                  </form>\n-              </div>\n-            </fieldset>\n-            <fieldset class="tab">\n-              <legend i18n:translate="heading_approved_and_rejected_comments">\n-                  Approved comments</legend>\n-              <div>\n-                  <form tal:condition="not:items_approved_or_rejected">\n-                      <fieldset id="fieldset-moderated-comments" class="formPanel">\n-                          <p id="no-comments-message" i18n:translate="message_no_comments_approved">\n-                              No comments approved\n-                          </p>\n-                      </fieldset>\n-                  </form>\n-\n-                  <form method="post"\n-                        action="#"\n-                        tal:condition="items_approved_or_rejected"\n-                        tal:define="batch python:Batch(items_approved_or_rejected, b_size, int(b_start), orphan=1);">\n-\n-                      <fieldset id="fieldset-moderated-comments" class="formPanel">\n-\n-                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n-\n-                          <table id="review-comments" class="listing">\n-                              <thead>\n-                                  <tr>\n-                                      <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n-                                      <th class="nosort" i18n:translate="heading_date">Date</th>\n-                                      <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n-                                      <th class="nosort" i18n:translate="heading_comment">Comment</th>\n-                                      <th class="nosort" i18n:translate="heading_changedby">Last Action</th>\n-                                      <th class="nosort" i18n:translate="heading_action">Action</th>\n-                                  </tr>\n-                              </thead>\n-                              <tbody>\n-                                  <tal:block repeat="item batch">\n-                                      <tr class="commentrow"\n-                                          tal:define="even repeat/item/even;\n-                                                      email python:getattr(item.getObject(), \'author_email\');\n-                                                      item_url item/getURL;"\n-                                          tal:attributes="class python: even and \'odd\' or \'even\'">\n-                                          <td>\n-                                              <span tal:content="python:item.author_name or item.Creator">Name</span>\n-                                              <tal:email tal:condition="email">\n-                                                  <br/>\n-                                                  <a tal:attributes="href string:mailto:$email;"\n-                                                     tal:content="email">Email\n-                                                  </a>\n-                                              </tal:email>\n-                                          </td>\n-                                          <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n-                                          <td>\n-                                              <a tal:attributes="href item_url"\n-                                                 tal:content="item/in_response_to" />\n-                                          </td>\n-                                          <td tal:attributes="class  python:item.review_state==\'rejected\' and \'state-private\'">\n-                                              <span tal:replace="item/Description"/>\n-                                              <a href=""\n-                                                 tal:attributes="href string:$item_url/getText"\n-                                                 tal:condition="python:item.Description.endswith(\'[...]\')"\n-                                                 i18n:translate="label_show_full_comment_text"\n-                                                 class="show-full-comment-text">show full comment text</a>\n-                                          </td>\n-                                          <td>\n-                                              <span class="last-history-entry"\n-                                                  tal:attributes="data-href string:$item_url/@@historyview">\n-                                                  last history entry\n-                                              </span>\n-                                          </td>\n-                                          <td class="actions">\n-                                              <input type="hidden" name="selected_obj_paths:list" value="#"\n-                                                     tal:attributes="value item/getURL" />\n-                                              <input id=""\n-                                                     class="context comment-publish-button"\n-                                                     type="submit"\n-                                                     value="Approve"\n-                                                     name="form.button.Publish"\n-                                                     i18n:attributes="value label_publish;"\n-                                                     tal:attributes="id item/id"\n-                                                     tal:condition="python:item.review_state in [\'pending\', \'rejected\']"\n-                                                     />\n-                                              <input id=""\n-                                                     class="context comment-reject-button"\n-                                                     type="submit"\n-                                                     value="Reject"\n-                                                     name="form.button.Reject"\n-                                                     i18n:attributes="value label_reject;"\n-                                                     tal:attributes="id item/id"\n-                                                     tal:condition="python:view.moderation_3state and item.review_state == \'published\'"\n-                                                     />\n-                                              <input id=""\n-                                                     class="destructive comment-delete-button"\n-                                                     type="submit"\n-                                                     value="Delete"\n-                                                     name="form.button.Delete"\n-                                                     i18n:attributes="value label_delete;"\n-                                                     tal:attributes="id item/id"\n-                                                     />\n-                                          </td>\n-                                      </tr>\n-                                  </tal:block>\n-                              </tbody>\n-                          </table>\n-                          <div metal:use-macro="here/batch_macros/macros/navigation" />\n-                      </fieldset>\n-                  </form>\n-\n-              </div>\n-            </fieldset>\n-        </div>\n+      <form tal:condition="not:items">\n+          <fieldset id="fieldset-moderate-comments" class="formPanel">\n+              <p id="no-comments-message" i18n:translate="message_no_comments">\n+                  No comments\n+              </p>\n+          </fieldset>\n+      </form>\n+\n+      <form method="post"\n+            action="#"\n+            tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n+            tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n+\n+          <fieldset id="fieldset-moderate-comments" class="formPanel">\n+\n+              <div metal:use-macro="here/batch_macros/macros/navigation" />\n+              <table id="review-comments" class="listing">\n+                  <thead>\n+                      <tr>\n+                          <th colspan="7">\n+                              <fieldset>\n+                                <input type="radio" id="all" name="review_state" value="all"\n+                                    tal:attributes="checked python:request.review_state==\'all\'">\n+                                <label for="all" i18n:translate="">all</label>\n+                                <tal:workflow-filter tal:repeat="review_state python:[\'pending\', \'published\', \'rejected\', \'spam\']">\n+                                    <input type="radio" name="review_state"\n+                                        tal:attributes="\n+                                            value review_state;\n+                                            id review_state;\n+                                            checked python:request.review_state==review_state">\n+                                    <label tal:attributes="for review_state"><span tal:content="python:view.translate(\'comment_{}\'.format(review_state))">review_state</span></label>\n+                                </tal:workflow-filter>\n+                              </fieldset>\n+                          </th>\n+                      </tr>\n+                      <tr tal:condition="items">\n+                          <th id="bulkactions" class="nosort" colspan="7">\n+                              <select name="form.select.BulkAction">\n+                                  <option selected="selected" value="-1" i18n:translate="title_bulkactions">Bulk Actions</option>\n+                                  <option value="publish"\n+                                          i18n:translate="bulkactions_publish"\n+                                          tal:condition="python: filter != \'published\' and moderation_enabled">Approve</option>\n+                                  <option value="delete" i18n:translate="bulkactions_delete">Delete</option>\n+                              </select>\n+                              <input type="hidden" name="form.button.Filter" tal:attributes="value filter" value="" />\n+                              <input id="dobulkaction"\n+                                     type="submit"\n+                                     class="standalone allowMultiSubmit"\n+                                     value="Apply"\n+                                     name="form.button.BulkAction"\n+                                     i18n:attributes="value label_apply;" />\n+                          </th>\n+                      </tr>\n+                      <tr tal:condition="items">\n+                          <th class="nosort"><input name="check_all" type="checkbox" value="0" /></th>\n+                          <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n+                          <th class="nosort" i18n:translate="heading_date">Date</th>\n+                          <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n+                          <th class="nosort" i18n:translate="heading_comment">Comment</th>\n+                          <th class="nosort" i18n:translate="heading_changedby">Last Action</th>\n+                      </tr>\n+                  </thead>\n+                  <tbody>\n+                      <tal:block repeat="item batch"\n+                          tal:condition="items">\n+                          <tr class="commentrow"\n+                              tal:define="even repeat/item/even;\n+                                          item_obj item/getObject;\n+                                          email item_obj/author_email;\n+                                          item_url item/getURL;"\n+                              tal:attributes="class python: even and \'odd\' or \'even\'">\n+                              <td class="notDraggable">\n+                                  <input type="checkbox"\n+                                         class="noborder"\n+                                         name="paths:list" id="#"\n+                                         value="#"\n+                                         tal:attributes="value   item/getPath;\n+                                                         id      string:cb_${item/id};\n+                                                         checked item/checked|nothing;\n+                                                         alt     string:Select ${item/Title};\n+                                                         title   string:Select ${item/Title}" />\n+                                  <input type="hidden" name="selected_obj_paths:list" value="#"\n+                                         tal:attributes="value item/getURL" />\n+                              </td>\n+                              <td>\n+                                  <span tal:content="python:item.author_name or item.Creator">Name</span>\n+                                  <tal:email tal:condition="email">\n+                                      <br/>\n+                                      <a tal:attributes="href string:mailto:$email;"\n+                                         tal:content="email">Email\n+                                      </a>\n+                                  </tal:email>\n+                              </td>\n+                              <td style="white-space: nowrap;" tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n+                              <td>\n+                                  <a tal:attributes="href item_url" target="_blank"\n+                                     tal:content="item/in_response_to" />\n+                              </td>\n+                              <td tal:attributes="class  python:colorclass(item.review_state)">\n+                                  <div>\n+                                      <span tal:replace="item/Description"/>\n+                                      <a href=""\n+                                         tal:attributes="href string:$item_url/getText"\n+                                         tal:condition="python:item.Description.endswith(\'[...]\')"\n+                                         i18n:translate="label_show_full_comment_text"\n+                                         class="show-full-comment-text">show full comment text</a>\n+                                  </div>\n+                                  <div class="actions input-group-addon">\n+                                      <input\n+                                          type="hidden"\n+                                          name="selected_obj_paths:list"\n+                                          value="#"\n+                                          tal:attributes="value item/getURL"\n+                                          />\n+                                      <!-- delete -->\n+                                      <input id=""\n+                                          class="destructive comment-delete-button"\n+                                          type="submit"\n+                                          value="Delete"\n+                                          name="form.button.moderation.DeleteComment"\n+                                          i18n:attributes="value label_delete;"\n+                                          tal:attributes="id item/id"\n+                                          />\n+                                      <!-- edit -->\n+                                      <a class="pat-plone-modal context" href="#"\n+                                          tal:attributes="href python:item_url+\'/@@edit-comment?review_state=\' + item.review_state">Edit</a>\n+\n+                                      <!-- workflow actions -->\n+                                      <tal:transitions\n+                                          tal:define="\n+                                            transitions python:view.allowed_transitions(item_obj)">\n+                                          <input name="form.button.moderation.TransmitComment"\n+                                              tal:repeat="transition transitions"\n+                                              class="context"\n+                                              type="submit"\n+                                              value="Label"\n+                                              tal:attributes="id item/id;\n+                                                    data-transition transition/id;\n+                                                    value python:view.translate(transition[\'title\'])"\n+                                                 />\n+                                      </tal:transitions>\n+                                  </div>\n+                              </td>\n+                              <td>\n+                                  <span class="last-history-entry"\n+                                      tal:attributes="data-href string:$item_url/@@historyview">\n+                                      last history entry\n+                                  </span>\n+                              </td>\n+                          </tr>\n+                      </tal:block>\n+                  </tbody>\n+              </table>\n+              <div metal:use-macro="here/batch_macros/macros/navigation" />\n+          </fieldset>\n+      </form>\n \n \n     </tal:main-macro>\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 977b08ab..2ed64d7e 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -1,4 +1,4 @@\n-# -*- coding: utf-8 -*-\n+# coding: utf-8\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n@@ -17,9 +17,23 @@\n from zope.interface import alsoProvides\n \n \n+# Translations for generated values in buttons\n+# States\n+_(\'comment_pending\', default=\'pending\')\n+# _(\'comment_approved\', default=\'approved\')\n+_(\'comment_published\', default=\'approved\')\n+_(\'comment_rejected\', default=\'rejected\')\n+_(\'comment_spam\', default=\'marked as spam\')\n+# Transitions\n+_(\'Recall\')\n+_(\'Approve\')\n+_(\'Reject\')\n+_(\'Spam\')\n+\n+\n class View(BrowserView):\n-    """Comment moderation view.\n-    """\n+    """Show comment moderation view."""\n+\n     template = ViewPageTemplateFile(\'moderation.pt\')\n     try:\n         template.id = \'@@moderate-comments\'\n@@ -27,53 +41,91 @@ class View(BrowserView):\n         # id is not writeable in Zope 2.12\n         pass\n \n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+        self.workflowTool = getToolByName(self.context, \'portal_workflow\')\n+\n     def __call__(self):\n         self.request.set(\'disable_border\', True)\n-        context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n-        self.comments = catalog(object_provides=IComment.__identifier__,\n-                                review_state=\'pending\',\n-                                sort_on=\'created\',\n-                                sort_order=\'reverse\')\n-        self.comments_approved = catalog(object_provides=IComment.__identifier__,\n-                                review_state=[\'published\', \'rejected\'],\n-                                sort_on=\'created\',\n-                                sort_order=\'reverse\')\n+        self.request.set(\'review_state\',\n+                         self.request.get(\'review_state\', \'pending\'))\n         return self.template()\n \n+    def comments(self):\n+        """Return comments of defined review_state.\n+\n+        review_state is string or list of strings.\n+        """\n+        catalog = getToolByName(self.context, \'portal_catalog\')\n+        if self.request.review_state == \'all\':\n+            return catalog(object_provides=IComment.__identifier__,\n+                           sort_on=\'created\',\n+                           sort_order=\'reverse\')\n+        return catalog(object_provides=IComment.__identifier__,\n+                       review_state=self.request.review_state,\n+                       sort_on=\'created\',\n+                       sort_order=\'reverse\')\n+\n     def moderation_enabled(self):\n-        """Returns true if a \'review workflow\' is enabled on \'Discussion Item\'\n-           content type. A \'review workflow\' is characterized by implementing\n-           a \'pending\' workflow state.\n+        """Return true if a review workflow is enabled on \'Discussion Item\'\n+        content type.\n+\n+        A \'review workflow\' is characterized by implementing a \'pending\'\n+        workflow state.\n         """\n-        context = aq_inner(self.context)\n-        workflowTool = getToolByName(context, \'portal_workflow\')\n-        comment_workflow = workflowTool.getChainForPortalType(\n+        comment_workflow = self.workflowTool.getChainForPortalType(\n             \'Discussion Item\')\n         if comment_workflow:\n             comment_workflow = comment_workflow[0]\n-            comment_workflow = workflowTool[comment_workflow]\n+            comment_workflow = self.workflowTool[comment_workflow]\n             if \'pending\' in comment_workflow.states:\n                 return True\n         return False\n \n     @property\n-    def moderation_3state(self):\n-        """Returns true if a \'review 3 state workflow\' is enabled on \'Discussion Item\'\n-           content type. A \'review 3 state workflow\' is characterized by implementing\n-           a \'rejected\' workflow state.\n+    def moderation_multiple_state_enabled(self):\n+        """Return true if a \'review multiple state workflow\' is enabled on\n+        \'Discussion Item\' content type.\n+\n+        A \'review multipe state workflow\' is characterized by implementing\n+        a \'rejected\' workflow state and a \'spam\' workflow state.\n         """\n-        context = aq_inner(self.context)\n-        workflowTool = getToolByName(context, \'portal_workflow\')\n-        comment_workflow = workflowTool.getChainForPortalType(\n+        comment_workflow = self.workflowTool.getChainForPortalType(\n             \'Discussion Item\')\n         if comment_workflow:\n             comment_workflow = comment_workflow[0]\n-            comment_workflow = workflowTool[comment_workflow]\n+            comment_workflow = self.workflowTool[comment_workflow]\n             if \'rejected\' in comment_workflow.states:\n                 return True\n         return False\n \n+    def allowed_transitions(self, obj=None):\n+        """Return allowed workflow transitions.\n+\n+        Example: pending\n+\n+        [{\'id\': \'mark_as_spam\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=mark_as_spam\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_multiple_state_review_workflow/transitions/mark_as_spam>, \'title\': \'Spam\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n+        {\'id\': \'publish\',\n+            \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=publish\',\n+            \'icon\': \'\',\n+            \'category\': \'workflow\',\n+            \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_multiple_state_review_workflow/transitions/publish>,\n+            \'title\': \'Approve\',\n+            \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n+        {\'id\': \'reject\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=reject\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_multiple_state_review_workflow/transitions/reject>, \'title\': \'Reject\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True}]\n+        """\n+\n+        if obj:\n+            transitions = [\n+                a for a in self.workflowTool.listActionInfos(object=obj)\n+                if a[\'category\'] == \'workflow\' and a[\'allowed\']\n+                ]\n+            return transitions\n+\n+    def translate(self, text=""):\n+        return _(text)\n+\n \n class ModerateCommentsEnabled(BrowserView):\n \n@@ -181,13 +233,13 @@ def __call__(self):\n             raise Unauthorized("You\'re not allowed to delete this comment.")\n \n \n-class PublishComment(BrowserView):\n-    """Publish a comment.\n+class CommentTransition(BrowserView):\n+    r"""Publish, reject, recall a comment or mark it as spam.\n \n        This view is always called directly on the comment object:\n \n            http://nohost/front-page/++conversation++default/1286289644723317/\\\n-           @@moderate-publish-comment\n+           @@transmit-comment\n \n        Each table row (comment) in the moderation view contains a hidden input\n        field with the absolute URL of the content object:\n@@ -203,31 +255,39 @@ class PublishComment(BrowserView):\n     """\n \n     def __call__(self):\n-        alsoProvides(self.request, IDisableCSRFProtection)\n+        """Call CommentTransition."""\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n         print("*** called: PublishComment for ", comment.Description)\n         workflowTool = getToolByName(comment, \'portal_workflow\', None)\n         workflow_action = self.request.form.get(\'workflow_action\', \'publish\')\n         review_state = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n-        if review_state != "published":\n-            workflowTool.doActionFor(comment, workflow_action)\n-            comment.reindexObject()\n-            content_object.reindexObject(idxs=[\'total_comments\'])\n-            notify(CommentPublishedEvent(self.context, comment))\n-            IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment approved.\'),\n-                type=\'info\')\n-        else:\n-            IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment already approved.\'),\n-                type=\'info\')\n+        workflowTool.doActionFor(comment, workflow_action)\n+        comment.reindexObject()\n+        content_object.reindexObject(idxs=[\'total_comments\'])\n+        notify(CommentPublishedEvent(self.context, comment))\n+        review_state_new = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n+\n+        # context.translate() does not know a default for untranslated msgids\n+        comment_state_translated = \\\n+            self.context.translate("comment_"+review_state_new)\n+        if comment_state_translated == "comment_"+review_state_new:\n+            comment_state_translated = review_state_new\n+\n+        msgid = _(\n+            "comment_transmitted",\n+            default=\'Comment ${comment_state_translated}.\',\n+            mapping={"comment_state_translated": comment_state_translated})\n+        translated = self.context.translate(msgid)\n+        IStatusMessage(self.context.REQUEST).addStatusMessage(\n+            translated, type=\'info\')\n+\n         came_from = self.context.REQUEST.HTTP_REFERER\n         # if the referrer already has a came_from in it, don\'t redirect back\n-        if (len(came_from) == 0 or \'came_from=\' in came_from or\n-                not getToolByName(\n-                content_object, \'portal_url\').isURLInPortal(came_from) or\n-                \'@@confirm-action\' in came_from):\n+        if (len(came_from) == 0\n+            or \'came_from=\' in came_from\n+            or not getToolByName(\n+                content_object, \'portal_url\').isURLInPortal(came_from)):\n             came_from = content_object.absolute_url()\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n@@ -268,7 +328,7 @@ def __call__(self):\n \n \n class BulkActionsView(BrowserView):\n-    """Bulk actions (unapprove, approve, delete, mark as spam).\n+    """Bulk actions (approve, delete, reject, recall, mark as spam).\n \n        Each table row of the moderation view has a checkbox with the absolute\n        path (without host and port) of the comment objects:\n@@ -291,6 +351,7 @@ class BulkActionsView(BrowserView):\n     """\n \n     def __call__(self):\n+        """Call BulkActionsView."""\n         if \'form.select.BulkAction\' in self.request:\n             bulkaction = self.request.get(\'form.select.BulkAction\')\n             self.paths = self.request.get(\'paths\')\ndiff --git a/plone/app/discussion/profiles/default/metadata.xml b/plone/app/discussion/profiles/default/metadata.xml\nindex c779e86e..49f2d5ec 100644\n--- a/plone/app/discussion/profiles/default/metadata.xml\n+++ b/plone/app/discussion/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n- <version>1001</version>\n+ <version>1002</version>\n  <dependencies>\n   <dependency>profile-plone.resource:default</dependency>\n   <dependency>profile-plone.app.registry:default</dependency>\ndiff --git a/plone/app/discussion/profiles/default/workflows.xml b/plone/app/discussion/profiles/default/workflows.xml\nindex 536fb374..820f22db 100644\n--- a/plone/app/discussion/profiles/default/workflows.xml\n+++ b/plone/app/discussion/profiles/default/workflows.xml\n@@ -1,7 +1,7 @@\n <?xml version="1.0"?>\n <object name="portal_workflow" meta_type="Plone Workflow Tool">\n   <object name="comment_review_workflow" meta_type="Workflow"/>\n-  <object name="comment_3state_review_workflow" meta_type="Workflow"/>\n+  <object name="comment_multiple_state_review_workflow" meta_type="Workflow"/>\n   <object name="comment_one_state_workflow" meta_type="Workflow"/>\n   <bindings>\n     <type type_id="Discussion Item">\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\nnew file mode 100644\nindex 00000000..c7759608\n--- /dev/null\n+++ b/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\n@@ -0,0 +1,138 @@\n+<?xml version="1.0" encoding="UTF-8"?>\n+<dc-workflow\n+    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+    i18n:domain="plone"\n+    workflow_id="comment_multiple_state_review_workflow"\n+    title="Comment Multiple State Review Workflow"\n+    description="A review workflow for comments with multiple states"\n+    state_variable="review_state"\n+    initial_state="pending"\n+    i18n:attributes="title; description"\n+    >\n+    <permission>Access contents information</permission>\n+    <permission>Modify portal content</permission>\n+    <permission>Reply to item</permission>\n+    <permission>View</permission>\n+    <state state_id="pending" title="Pending">\n+        <description>Submitted, pending review.</description>\n+        <exit-transition transition_id="mark_as_spam"/>\n+        <exit-transition transition_id="publish"/>\n+        <exit-transition transition_id="reject"/>\n+        <permission-map name="Access contents information" acquired="False">\n+            <permission-role>Manager</permission-role>\n+            <permission-role>Owner</permission-role>\n+            <permission-role>Reviewer</permission-role>\n+        </permission-map>\n+        <permission-map name="Modify portal content" acquired="False">\n+            <permission-role>Manager</permission-role>\n+            <permission-role>Owner</permission-role>\n+            <permission-role>Reviewer</permission-role>\n+        </permission-map>\n+        <permission-map name="Reply to item" acquired="False">\n+        </permission-map>\n+        <permission-map name="View" acquired="False">\n+            <permission-role>Manager</permission-role>\n+            <permission-role>Owner</permission-role>\n+            <permission-role>Reviewer</permission-role>\n+        </permission-map>\n+    </state>\n+    <state state_id="published" title="Published">\n+        <description>Visible to everyone, non-editable.</description>\n+        <exit-transition transition_id="mark_as_spam"/>\n+        <exit-transition transition_id="recall"/>\n+        <exit-transition transition_id="reject"/>\n+        <permission-map name="Access contents information" acquired="True">\n+        </permission-map>\n+        <permission-map name="Modify portal content" acquired="False">\n+            <permission-role>Manager</permission-role>\n+        </permission-map>\n+        <permission-map name="Reply to item" acquired="True">\n+        </permission-map>\n+        <permission-map name="View" acquired="True">\n+        </permission-map>\n+    </state>\n+    <state state_id="rejected" title="Rejected">\n+        <exit-transition transition_id="mark_as_spam"/>\n+        <exit-transition transition_id="publish"/>\n+        <exit-transition transition_id="recall"/>\n+    </state>\n+    <state state_id="spam" title="Spam">\n+        <exit-transition transition_id="publish"/>\n+        <exit-transition transition_id="recall"/>\n+        <exit-transition transition_id="reject"/>\n+    </state>\n+    <transition transition_id="mark_as_spam" title="Mark as spam" new_state="spam" trigger="USER" before_script="" after_script="">\n+        <description>Spam comments are invisible to other users.</description>\n+        <action url="%(content_url)s/content_status_modify?workflow_action=mark_as_spam" category="workflow" icon="">Spam</action>\n+        <guard>\n+            <guard-permission>Review comments</guard-permission>\n+        </guard>\n+    </transition>\n+    <transition transition_id="publish" title="Reviewer approves content" new_state="published" trigger="USER" before_script="" after_script="">\n+        <description>Approving the comment makes it visible to other users.</description>\n+        <action url="%(content_url)s/content_status_modify?workflow_action=publish" category="workflow" icon="">Approve</action>\n+        <guard>\n+            <guard-permission>Review comments</guard-permission>\n+        </guard>\n+    </transition>\n+    <transition transition_id="recall" title="Reviewer recalls comment back to pending state" new_state="pending" trigger="USER" before_script="" after_script="">\n+        <action url="%(content_url)s/content_status_modify?workflow_action=recall" category="workflow" icon="">Reject</action>\n+        <guard>\n+            <guard-permission>Review comments</guard-permission>\n+        </guard>\n+    </transition>\n+    <transition transition_id="reject" title="Reviewer rejects comment" new_state="rejected" trigger="USER" before_script="" after_script="">\n+        <description>Rejected comments are invisible to other users.</description>\n+        <action url="%(content_url)s/content_status_modify?workflow_action=reject" category="workflow" icon="">Reject</action>\n+        <guard>\n+            <guard-permission>Review comments</guard-permission>\n+        </guard>\n+    </transition>\n+    <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">\n+        <description>Previous transition</description>\n+        <default>\n+\n+            <expression>transition/getId|nothing</expression>\n+        </default>\n+        <guard>\n+        </guard>\n+    </variable>\n+    <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">\n+        <description>The ID of the user who performed the previous transition</description>\n+        <default>\n+\n+            <expression>user/getUserName</expression>\n+        </default>\n+        <guard>\n+        </guard>\n+    </variable>\n+    <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">\n+        <description>Comment about the last transition</description>\n+        <default>\n+\n+            <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n+        </default>\n+        <guard>\n+        </guard>\n+    </variable>\n+    <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">\n+        <description>Provides access to workflow history</description>\n+        <default>\n+\n+            <expression>state_change/getHistory</expression>\n+        </default>\n+        <guard>\n+            <guard-permission>Request review</guard-permission>\n+            <guard-permission>Review portal content</guard-permission>\n+        </guard>\n+    </variable>\n+    <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">\n+        <description>When the previous transition was performed</description>\n+        <default>\n+\n+            <expression>state_change/getDateTime</expression>\n+        </default>\n+        <guard>\n+        </guard>\n+    </variable>\n+</dc-workflow>\ndiff --git a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\nindex a835f964..55318883 100644\n--- a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n+++ b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n@@ -112,7 +112,7 @@ Administrators can see all posts and comment actions\n     >>> \'form.button.DeleteComment\' in browser.contents\n     True\n \n-    >>> \'form.button.PublishComment\' in browser.contents\n+    >>> \'form.button.TransmitComment\' in browser.contents\n     True\n \n Anonymous user can not see any posts or comment actions\n@@ -128,7 +128,7 @@ Anonymous user can not see any posts or comment actions\n     >>> \'form.button.DeleteComment\' in unprivileged_browser.contents\n     False\n \n-    >>> \'form.button.PublishComment\' in unprivileged_browser.contents\n+    >>> \'form.button.TransmitComment\' in unprivileged_browser.contents\n     False\n \n The catalog does not list the comments yet:\n@@ -156,7 +156,7 @@ actions.\n     >>> \'form.button.DeleteComment\' in browser.contents\n     True\n \n-    >>> \'form.button.PublishComment\' in browser.contents\n+    >>> \'form.button.TransmitComment\' in browser.contents\n     True\n \n \ndiff --git a/plone/app/discussion/tests/functional_test_comments.txt b/plone/app/discussion/tests/functional_test_comments.txt\nindex 36ad8a17..89bdeccf 100644\n--- a/plone/app/discussion/tests/functional_test_comments.txt\n+++ b/plone/app/discussion/tests/functional_test_comments.txt\n@@ -326,19 +326,19 @@ Deleting existing comments | \'Delete comments\' permission\n Anonymous cannot delete comments\n \n     >>> unprivileged_browser.open(urldoc1)\n-    >>> \'form.button.Delete\' in unprivileged_browser.contents\n+    >>> \'form.button.DeleteComment\' in unprivileged_browser.contents\n     False\n \n A member cannot delete his own comments if he can\'t review or he isn\'t a Site Administrator\n \n     >>> browser_member.open(urldoc1)\n-    >>> \'form.button.Delete\' in browser_member.contents\n+    >>> \'form.button.DeleteComment\' in browser_member.contents\n     False\n \n Admin can delete comments\n \n     >>> browser.open(urldoc1)\n-    >>> \'form.button.Delete\' in browser.contents\n+    >>> \'form.button.DeleteComment\' in browser.contents\n     True\n \n Extract the delete comment url from the first "delete comment" button\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 7e660c10..08d6cbd6 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.discussion.browser.moderation import BulkActionsView\n from plone.app.discussion.browser.moderation import DeleteComment\n-from plone.app.discussion.browser.moderation import PublishComment\n+from plone.app.discussion.browser.moderation import CommentTransition\n from plone.app.discussion.browser.moderation import View\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n@@ -195,14 +195,14 @@ def setUp(self):\n     def test_regression(self):\n         page_url = self.page.absolute_url()\n         self.request[\'HTTP_REFERER\'] = page_url\n-        for Klass in (DeleteComment, PublishComment):\n+        for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n             self.assertEqual(page_url, view())\n \n     def test_valid_next_url(self):\n         self.request[\'HTTP_REFERER\'] = \'http://attacker.com\'\n-        for Klass in (DeleteComment, PublishComment):\n+        for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n             self.assertNotEqual(\'http://attacker.com\', view())\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex aafe2222..9f959fcc 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -272,7 +272,7 @@ def test_publish(self):\n                 \'review_state\',\n             ),\n         )\n-        view = self.comment.restrictedTraverse(\'@@moderate-publish-comment\')\n+        view = self.comment.restrictedTraverse(\'@@transmit-comment\')\n         view()\n         self.assertEqual(\n             \'published\',\n@@ -295,7 +295,7 @@ def test_publish_as_anonymous(self):\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-publish-comment\',\n+            \'@@transmit-comment\',\n         )\n         self.assertEqual(\n             \'pending\',\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 7a0e30c1..2bb3c287 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -20,7 +20,7 @@ def update_rolemap(context):\n     context.runImportStepFromProfile(default_profile, \'rolemap\')\n \n \n-def upgrade_comment_workflows(context):\n+def upgrade_comment_workflows_retain_current_workflow(context):\n     # If the current comment workflow is the one_state_workflow, running our\n     # import step will change it to comment_one_state_workflow.  This is good.\n     # If it was anything else, we should restore this.  So get the original\n@@ -46,13 +46,16 @@ def upgrade_comment_workflows(context):\n             orig_chain[idx] = \'comment_one_state_workflow\'\n         # Restore the chain.\n         wf_tool.setChainForPortalTypes([portal_type], orig_chain)\n-    new_chain = list(wf_tool.getChainFor(portal_type))\n-    workflows = [wf_tool.getWorkflowById(wf_id)\n-                 for wf_id in new_chain]\n \n+\n+def upgrade_comment_workflows_apply_rolemapping(context):\n     # Now go over the comments, update their role mappings, and reindex the\n     # allowedRolesAndUsers index.\n+    portal_type = \'Discussion Item\'\n     catalog = getToolByName(context, \'portal_catalog\')\n+    wf_tool = getToolByName(context, \'portal_workflow\')\n+    new_chain = list(wf_tool.getChainFor(portal_type))\n+    workflows = [wf_tool.getWorkflowById(wf_id) for wf_id in new_chain]\n     for brain in catalog.unrestrictedSearchResults(portal_type=portal_type):\n         try:\n             comment = brain.getObject()\n@@ -63,5 +66,14 @@ def upgrade_comment_workflows(context):\n             logger.info(\'Could not reindex comment {0}\'.format(brain.getURL()))\n \n \n+def upgrade_comment_workflows(context):\n+    upgrade_comment_workflows_retain_current_workflow(context)\n+    upgrade_comment_workflows_apply_rolemapping(context)\n+\n+\n def add_js_to_plone_legacy(context):\n     context.runImportStepFromProfile(default_profile, \'plone.app.registry\')\n+\n+\n+def add_multiple_state_workflow(context):\n+    upgrade_comment_workflows_retain_current_workflow(context)\ndiff --git a/plone/app/discussion/upgrades.zcml b/plone/app/discussion/upgrades.zcml\nindex 02a7e541..d64591ce 100644\n--- a/plone/app/discussion/upgrades.zcml\n+++ b/plone/app/discussion/upgrades.zcml\n@@ -62,4 +62,15 @@\n         />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+      source="1001"\n+      destination="1002"\n+      profile="plone.app.discussion:default">\n+      <genericsetup:upgradeStep\n+          title="Additional workflow with states pending, published, rejected and spam"\n+          description="Additional states allows moderators to review history of publishing and rejection"\n+          handler=".upgrades.add_multiple_state_workflow"\n+          />\n+  </genericsetup:upgradeSteps>\n+\n </configure>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:37:34+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/64d50fbd00b80a5bb5d108b8a63ab9d1b0b47ed2

fix docstring

Files changed:
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/browser/moderation.py

b'diff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex fb99297c..5b8b64c7 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -11,7 +11,6 @@\n     <tal:main-macro metal:define-macro="main"\n         tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n                     items view/comments;\n-                    items_approved_or_rejected view/comments_approved;\n                     filter view/filter|nothing;\n                     Batch python:modules[\'Products.CMFPlone\'].Batch;\n                     b_size python:30;\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 2ed64d7e..5309e413 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -236,29 +236,28 @@ def __call__(self):\n class CommentTransition(BrowserView):\n     r"""Publish, reject, recall a comment or mark it as spam.\n \n-       This view is always called directly on the comment object:\n+    This view is always called directly on the comment object:\n \n-           http://nohost/front-page/++conversation++default/1286289644723317/\\\n-           @@transmit-comment\n+        http://nohost/front-page/++conversation++default/1286289644723317/\\\n+        @@transmit-comment\n \n-       Each table row (comment) in the moderation view contains a hidden input\n-       field with the absolute URL of the content object:\n+    Each table row (comment) in the moderation view contains a hidden input\n+    field with the absolute URL of the content object:\n \n-         <input type="hidden"\n-                value="http://nohost/front-page/++conversation++default/\\\n-                       1286289644723317"\n-                name="selected_obj_paths:list">\n+        <input type="hidden"\n+            value="http://nohost/front-page/++conversation++default/\\\n+                1286289644723317"\n+            name="selected_obj_paths:list">\n \n-       This absolute URL is called from a jQuery method that is bind to the\n-       \'delete\' button of the table row. See javascripts/moderation.js for more\n-       details.\n+    This absolute URL is called from a jQuery method that is bind to the\n+    \'delete\' button of the table row. See javascripts/moderation.js for more\n+    details.\n     """\n \n     def __call__(self):\n         """Call CommentTransition."""\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n-        print("*** called: PublishComment for ", comment.Description)\n         workflowTool = getToolByName(comment, \'portal_workflow\', None)\n         workflow_action = self.request.form.get(\'workflow_action\', \'publish\')\n         review_state = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:37:34+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/7a680675be4918446a8c340bb015223032cafb56

disable portlet slots

Files changed:
M plone/app/discussion/browser/moderation.pt

b'diff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex 5b8b64c7..6f8514c0 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -7,6 +7,10 @@\n       i18n:domain="plone">\n <body>\n \n+<metal:override fill-slot="top_slot"\n+    tal:define="disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);"/>\n+\n <metal:main fill-slot="main">\n     <tal:main-macro metal:define-macro="main"\n         tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:37:34+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/d93525ff2733dbf0b7a8cccab6499747ddc6d4bb

Moderation view: filter on state only for comment_multiple_state_review_workflow

Files changed:
M plone/app/discussion/browser/moderation.pt

b'diff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex 6f8514c0..a8396f6c 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -66,7 +66,7 @@\n                   <thead>\n                       <tr>\n                           <th colspan="7">\n-                              <fieldset>\n+                              <fieldset tal:condition="view/moderation_multiple_state_enabled">\n                                 <input type="radio" id="all" name="review_state" value="all"\n                                     tal:attributes="checked python:request.review_state==\'all\'">\n                                 <label for="all" i18n:translate="">all</label>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:39:57+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/bf20752b69da5e5f56cc756613b63cce54fa6465

bulk moderation of comments

extended for comment_multiple_state_review_workflow, refactoring and tests

Files changed:
A plone/app/discussion/tests/robot/test_moderation.robot
A plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/browser/configure.zcml
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/events.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml
M plone/app/discussion/tests/test_moderation_view.py
D plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml

b'diff --git a/plone/app/discussion/browser/configure.zcml b/plone/app/discussion/browser/configure.zcml\nindex 621428ce..9572de5b 100644\n--- a/plone/app/discussion/browser/configure.zcml\n+++ b/plone/app/discussion/browser/configure.zcml\n@@ -100,6 +100,14 @@\n         permission="plone.app.discussion.ReviewComments"\n         />\n \n+    <browser:page\n+        for="*"\n+        name="translationhelper"\n+        layer="..interfaces.IDiscussionLayer"\n+        class=".moderation.TranslationHelper"\n+        permission="plone.app.discussion.ReviewComments"\n+        />\n+\n \n     <!-- Comments viewlet -->\n     <browser:viewlet\ndiff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 93c56008..8efd74d4 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -1,6 +1,6 @@\n /******************************************************************************\n  *\n- * jQuery functions for the plone.app.discussion bulk moderation.\n+ * jQuery functions for the plone.app.discussion moderation.\n  *\n  ******************************************************************************/\n \n@@ -84,19 +84,80 @@ require(["jquery", "pat-registry"], function($, registry) {\n               init();\n               $(".pat-plone-modal").patPloneModal();\n             });\n-          } else {\n-            location.reload();\n-          }\n-        },\n-        error: function(msg) {\n-          alert(\n-            "Error transmitting comment. (Error sending AJAX request:" +\n-              target +\n-              ")"\n-          );\n-        }\n-      });\n-    });\n+        });\n+\n+\n+        /**********************************************************************\n+         * Bulk actions for comments (delete, publish)\n+         **********************************************************************/\n+        $("input[name=\'form.button.BulkAction\']").click(function (e) {\n+            e.preventDefault();\n+            var form = $(this).closest("form");\n+            var target = $(form).attr(\'action\');\n+            var params = $(form).serialize();\n+            var valArray = $(\'input:checkbox:checked\');\n+            var selectField = $(form).find("[name=\'form.select.BulkAction\']");\n+\n+            if (selectField.val() === \'-1\') {\n+                // TODO: translate message\n+                alert("You haven\'t selected a bulk action. Please select one.");\n+            } else if (valArray.length === 0) {\n+                // TODO: translate message\n+                alert("You haven\'t selected any comment for this bulk action." +\n+                      "Please select at least one comment.");\n+            } else {\n+                $.post(target, params, function (data) {\n+                    // reset the bulkaction select\n+                    selectField.find("option[value=\'-1\']").attr(\'selected\', \'selected\');\n+                    // reload filtered comments\n+                    $("#review-comments").load(window.location + " #review-comments", function() {\n+                        init();\n+                        $(\'.pat-plone-modal\').patPloneModal();\n+                    });\n+                });\n+            }\n+        });\n+\n+\n+        /**********************************************************************\n+         * Check or uncheck all checkboxes from the batch moderation page.\n+         **********************************************************************/\n+        $("input[name=\'check_all\']").click(function () {\n+            if ($(this).val() === \'0\') {\n+                $(this).parents("table")\n+                       .find("input:checkbox")\n+                       .prop("checked", true);\n+                $(this).val("1");\n+            } else {\n+                $(this).parents("table")\n+                       .find("input:checkbox")\n+                       .prop("checked", false);\n+                $(this).val("0");\n+            }\n+        });\n+\n+        /**********************************************************************\n+         * select comments with review_state\n+         **********************************************************************/\n+\n+         $("input[name=\'review_state\']").click(function () {\n+             // location.search = \'review_state=\' + $(this).val();\n+             let review_state = $(this).val();\n+             let url = location.href;\n+             if (location.search) {\n+                 url = location.href.replace(location.search, "?review_state=" + review_state);\n+             } else {\n+                 url = location.href + "?review_state=" + review_state;\n+             }\n+\n+             $("#review-comments").load(url + " #review-comments", function() {\n+                 init();\n+                 $(\'.pat-plone-modal\').patPloneModal();\n+                 let stateObj = { review_state: review_state };\n+                 history.pushState(stateObj, "moderate comments", url);\n+             });\n+         });\n+\n \n     /**********************************************************************\n      * Bulk actions for comments (delete, publish)\ndiff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex a8396f6c..676c55b6 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -15,13 +15,14 @@\n     <tal:main-macro metal:define-macro="main"\n         tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n                     items view/comments;\n-                    filter view/filter|nothing;\n+                    filter request/review_state|nothing;\n                     Batch python:modules[\'Products.CMFPlone\'].Batch;\n                     b_size python:30;\n                     b_start python:0;\n                     b_start request/b_start | b_start;\n                     moderation_enabled view/moderation_enabled;\n                     colorclass python:lambda x: \'state-private\' if x==\'rejected\' else (\'state-internal\' if x==\'spam\' else \'state-\'+x);\n+                    translationhelper nocall:context/@@translationhelper;\n                     ">\n         <script type="text/javascript"\n             tal:attributes="src string:${context/portal_url}/++plone++plone.app.discussion.javascripts/moderation.js">\n@@ -33,7 +34,7 @@\n \n         <div class="portalMessage warning"\n              role="status"\n-             tal:condition="not: view/moderation_enabled">\n+             tal:condition="not: moderation_enabled">\n             <strong i18n:translate="">Warning</strong>\n             <span tal:omit-tag="" i18n:translate="message_moderation_disabled">\n                 Moderation workflow is disabled. You have to\n@@ -56,6 +57,7 @@\n \n       <form method="post"\n             action="#"\n+            tal:condition="moderation_enabled"\n             tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n             tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n \n@@ -76,7 +78,7 @@\n                                             value review_state;\n                                             id review_state;\n                                             checked python:request.review_state==review_state">\n-                                    <label tal:attributes="for review_state"><span tal:content="python:view.translate(\'comment_{}\'.format(review_state))">review_state</span></label>\n+                                    <label tal:attributes="for review_state"><span tal:content="python:translationhelper.translate_comment_review_state(review_state)">review_state</span></label>\n                                 </tal:workflow-filter>\n                               </fieldset>\n                           </th>\n@@ -85,12 +87,15 @@\n                           <th id="bulkactions" class="nosort" colspan="7">\n                               <select name="form.select.BulkAction">\n                                   <option selected="selected" value="-1" i18n:translate="title_bulkactions">Bulk Actions</option>\n+                                  <tal:comment tal:replace="nothing"></tal:comment>\n                                   <option value="publish"\n                                           i18n:translate="bulkactions_publish"\n-                                          tal:condition="python: filter != \'published\' and moderation_enabled">Approve</option>\n+                                          tal:condition="python: filter != \'published\'">Approve</option>\n+                                  <option value="mark_as_spam"\n+                                          tal:condition="python: filter != \'spam\'">Spam</option>\n                                   <option value="delete" i18n:translate="bulkactions_delete">Delete</option>\n                               </select>\n-                              <input type="hidden" name="form.button.Filter" tal:attributes="value filter" value="" />\n+                              <input type="hidden" name="filter" tal:attributes="value filter"/>\n                               <input id="dobulkaction"\n                                      type="submit"\n                                      class="standalone allowMultiSubmit"\n@@ -184,7 +189,7 @@\n                                               value="Label"\n                                               tal:attributes="id item/id;\n                                                     data-transition transition/id;\n-                                                    value python:view.translate(transition[\'title\'])"\n+                                                    value python:translationhelper.translate(transition[\'title\'])"\n                                                  />\n                                       </tal:transitions>\n                                   </div>\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 5309e413..71d3e141 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -4,6 +4,7 @@\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from plone.app.discussion.events import CommentPublishedEvent\n+from plone.app.discussion.events import CommentTransitionEvent\n from plone.app.discussion.events import CommentDeletedEvent\n from plone.app.discussion.interfaces import _\n from plone.app.discussion.interfaces import IComment\n@@ -31,6 +32,15 @@\n _(\'Spam\')\n \n \n+class TranslationHelper(BrowserView):\n+\n+    def translate(self, text=""):\n+        return _(text)\n+\n+    def translate_comment_review_state(self, rs):\n+        return _("comment_" + rs, default=rs)\n+\n+\n class View(BrowserView):\n     """Show comment moderation view."""\n \n@@ -42,9 +52,9 @@ class View(BrowserView):\n         pass\n \n     def __init__(self, context, request):\n-        self.context = context\n-        self.request = request\n+        super(View, self).__init__(context, request)\n         self.workflowTool = getToolByName(self.context, \'portal_workflow\')\n+        self.transitions = []\n \n     def __call__(self):\n         self.request.set(\'disable_border\', True)\n@@ -74,11 +84,10 @@ def moderation_enabled(self):\n         A \'review workflow\' is characterized by implementing a \'pending\'\n         workflow state.\n         """\n-        comment_workflow = self.workflowTool.getChainForPortalType(\n+        workflows = self.workflowTool.getChainForPortalType(\n             \'Discussion Item\')\n-        if comment_workflow:\n-            comment_workflow = comment_workflow[0]\n-            comment_workflow = self.workflowTool[comment_workflow]\n+        if workflows:\n+            comment_workflow = self.workflowTool[workflows[0]]\n             if \'pending\' in comment_workflow.states:\n                 return True\n         return False\n@@ -91,17 +100,16 @@ def moderation_multiple_state_enabled(self):\n         A \'review multipe state workflow\' is characterized by implementing\n         a \'rejected\' workflow state and a \'spam\' workflow state.\n         """\n-        comment_workflow = self.workflowTool.getChainForPortalType(\n+        workflows = self.workflowTool.getChainForPortalType(\n             \'Discussion Item\')\n-        if comment_workflow:\n-            comment_workflow = comment_workflow[0]\n-            comment_workflow = self.workflowTool[comment_workflow]\n-            if \'rejected\' in comment_workflow.states:\n+        if workflows:\n+            comment_workflow = self.workflowTool[workflows[0]]\n+            if \'spam\' in comment_workflow.states:\n                 return True\n         return False\n \n     def allowed_transitions(self, obj=None):\n-        """Return allowed workflow transitions.\n+        """Return allowed workflow transitions for obj.\n \n         Example: pending\n \n@@ -123,8 +131,6 @@ def allowed_transitions(self, obj=None):\n                 ]\n             return transitions\n \n-    def translate(self, text=""):\n-        return _(text)\n \n \n class ModerateCommentsEnabled(BrowserView):\n@@ -265,13 +271,11 @@ def __call__(self):\n         comment.reindexObject()\n         content_object.reindexObject(idxs=[\'total_comments\'])\n         notify(CommentPublishedEvent(self.context, comment))\n+        # for complexer workflows:\n+        notify(CommentTransitionEvent(self.context, comment))\n         review_state_new = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n \n-        # context.translate() does not know a default for untranslated msgids\n-        comment_state_translated = \\\n-            self.context.translate("comment_"+review_state_new)\n-        if comment_state_translated == "comment_"+review_state_new:\n-            comment_state_translated = review_state_new\n+        comment_state_translated = self.context.restrictedTraverse("translationhelper").translate_comment_review_state(review_state_new)\n \n         msgid = _(\n             "comment_transmitted",\n@@ -327,7 +331,7 @@ def __call__(self):\n \n \n class BulkActionsView(BrowserView):\n-    """Bulk actions (approve, delete, reject, recall, mark as spam).\n+    """Call bulk action: publish/approve, delete (, reject, recall, mark as spam).\n \n        Each table row of the moderation view has a checkbox with the absolute\n        path (without host and port) of the comment objects:\n@@ -349,6 +353,10 @@ class BulkActionsView(BrowserView):\n \n     """\n \n+    def __init__(self, context, request):\n+        super(BulkActionsView, self).__init__(context, request)\n+        self.workflowTool = getToolByName(context, \'portal_workflow\')\n+\n     def __call__(self):\n         """Call BulkActionsView."""\n         if \'form.select.BulkAction\' in self.request:\n@@ -358,50 +366,40 @@ def __call__(self):\n                 if bulkaction == \'-1\':\n                     # no bulk action was selected\n                     pass\n-                elif bulkaction == \'retract\':\n-                    self.retract()\n-                elif bulkaction == \'publish\':\n-                    self.publish()\n-                elif bulkaction == \'mark_as_spam\':\n-                    self.mark_as_spam()\n                 elif bulkaction == \'delete\':\n                     self.delete()\n                 else:\n-                    raise KeyError  # pragma: no cover\n-\n-    def retract(self):\n-        raise NotImplementedError\n-\n-    def publish(self):\n-        """Publishes all comments in the paths variable.\n+                    self.transmit(bulkaction)\n \n-           Expects a list of absolute paths (without host and port):\n+    def transmit(self, action=None):\n+        """Transmit all comments in the paths variable to requested review_state.\n \n-             /Plone/startseite/++conversation++default/1286200010610352\n+        Expects a list of absolute paths (without host and port):\n \n+        /Plone/startseite/++conversation++default/1286200010610352\n         """\n         context = aq_inner(self.context)\n         for path in self.paths:\n             comment = context.restrictedTraverse(path)\n             content_object = aq_parent(aq_parent(comment))\n-            workflowTool = getToolByName(comment, \'portal_workflow\')\n-            current_state = workflowTool.getInfoFor(comment, \'review_state\')\n-            if current_state != \'published\':\n-                workflowTool.doActionFor(comment, \'publish\')\n-            comment.reindexObject()\n-            content_object.reindexObject(idxs=[\'total_comments\'])\n-            notify(CommentPublishedEvent(content_object, comment))\n-\n-    def mark_as_spam(self):\n-        raise NotImplementedError\n+            allowed_transitions = [\n+                transition[\'id\'] for transition in self.workflowTool.listActionInfos(object=comment)\n+                if transition[\'category\'] == \'workflow\' and transition[\'allowed\']\n+                ]\n+            if action in allowed_transitions:\n+                self.workflowTool.doActionFor(comment, action)\n+                comment.reindexObject()\n+                content_object.reindexObject(idxs=[\'total_comments\'])\n+                notify(CommentPublishedEvent(content_object, comment))\n+                # for complexer workflows:\n+                notify(CommentTransitionEvent(self.context, comment))\n \n     def delete(self):\n-        """Deletes all comments in the paths variable.\n-\n-           Expects a list of absolute paths (without host and port):\n+        """Delete all comments in the paths variable.\n \n-             /Plone/startseite/++conversation++default/1286200010610352\n+        Expects a list of absolute paths (without host and port):\n \n+        /Plone/startseite/++conversation++default/1286200010610352\n         """\n         context = aq_inner(self.context)\n         for path in self.paths:\ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex 61d50c46..08925bb7 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -6,6 +6,7 @@\n from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import ICommentDeletedEvent\n from plone.app.discussion.interfaces import ICommentPublishedEvent\n+from plone.app.discussion.interfaces import ICommentTransitionEvent\n from plone.app.discussion.interfaces import IReplyAddedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\n from zope.interface import implementer\n@@ -62,3 +63,8 @@ class CommentDeletedEvent(DiscussionEvent):\n class CommentPublishedEvent(DiscussionEvent):\n     """ Event to be triggered when a Comment is publicated\n     """\n+\n+\n+@implementer(ICommentTransitionEvent)\n+class CommentTransitionEvent(DiscussionEvent):\n+    """Event to be triggered when a Comments review_state changed."""\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex d7065e82..c03c0bbc 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -422,3 +422,7 @@ class ICommentPublishedEvent(IDiscussionEvent):\n class ICommentDeletedEvent(IDiscussionEvent):\n     """ Notify user on comment delete\n     """\n+\n+\n+class ICommentTransitionEvent(IDiscussionEvent):\n+    """Notify user on comment transition / change of review_state."""\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml\ndeleted file mode 100644\nindex 14c53cca..00000000\n--- a/plone/app/discussion/profiles/default/workflows/comment_3state_review_workflow/definition.xml\n+++ /dev/null\n@@ -1,105 +0,0 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<dc-workflow workflow_id="comment_3state_review_workflow" title="Comment Review Workflow" description="A simple review workflow for comments" state_variable="review_state" initial_state="pending" manager_bypass="False">\n- <permission>Access contents information</permission>\n- <permission>Modify portal content</permission>\n- <permission>Reply to item</permission>\n- <permission>View</permission>\n- <state state_id="pending" title="Pending">\n-  <description>Submitted, pending review.</description>\n-  <exit-transition transition_id="publish"/>\n-  <exit-transition transition_id="reject"/>\n-  <permission-map name="Access contents information" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="Modify portal content" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="Reply to item" acquired="False">\n-  </permission-map>\n-  <permission-map name="View" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n- </state>\n- <state state_id="published" title="Published">\n-  <description>Visible to everyone, non-editable.</description>\n-  <exit-transition transition_id="reject"/>\n-  <permission-map name="Access contents information" acquired="True">\n-  </permission-map>\n-  <permission-map name="Modify portal content" acquired="False">\n-   <permission-role>Manager</permission-role>\n-  </permission-map>\n-  <permission-map name="Reply to item" acquired="True">\n-  </permission-map>\n-  <permission-map name="View" acquired="True">\n-  </permission-map>\n- </state>\n- <state state_id="rejected" title="">\n-  <exit-transition transition_id="publish"/>\n- </state>\n- <transition transition_id="publish" title="Reviewer approves content" new_state="published" trigger="USER" before_script="" after_script="">\n-  <description>Approving the comment makes it visible to other users.</description>\n-  <action url="%(content_url)s/content_status_modify?workflow_action=publish" category="workflow" icon="">Approve</action>\n-  <guard>\n-   <guard-permission>Review comments</guard-permission>\n-  </guard>\n- </transition>\n- <transition transition_id="reject" title="Reject" new_state="rejected" trigger="USER" before_script="" after_script="">\n-  <action url="%(content_url)s/content_status_modify?workflow_action=rejected" category="workflow" icon="">Reject</action>\n-  <guard>\n-   <guard-permission>Review comments</guard-permission>\n-  </guard>\n- </transition>\n- <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">\n-  <description>Previous transition</description>\n-  <default>\n-\n-   <expression>transition/getId|nothing</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n- <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">\n-  <description>The ID of the user who performed the previous transition</description>\n-  <default>\n-\n-   <expression>user/getUserName</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n- <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">\n-  <description>Comment about the last transition</description>\n-  <default>\n-\n-   <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n- <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">\n-  <description>Provides access to workflow history</description>\n-  <default>\n-\n-   <expression>state_change/getHistory</expression>\n-  </default>\n-  <guard>\n-   <guard-permission>Request review</guard-permission>\n-   <guard-permission>Review portal content</guard-permission>\n-  </guard>\n- </variable>\n- <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">\n-  <description>When the previous transition was performed</description>\n-  <default>\n-\n-   <expression>state_change/getDateTime</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-</dc-workflow>\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\nindex c7759608..a585298e 100644\n--- a/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\n+++ b/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\n@@ -36,7 +36,7 @@\n             <permission-role>Reviewer</permission-role>\n         </permission-map>\n     </state>\n-    <state state_id="published" title="Published">\n+    <state state_id="published" title="Approved">\n         <description>Visible to everyone, non-editable.</description>\n         <exit-transition transition_id="mark_as_spam"/>\n         <exit-transition transition_id="recall"/>\n@@ -76,7 +76,7 @@\n         </guard>\n     </transition>\n     <transition transition_id="recall" title="Reviewer recalls comment back to pending state" new_state="pending" trigger="USER" before_script="" after_script="">\n-        <action url="%(content_url)s/content_status_modify?workflow_action=recall" category="workflow" icon="">Reject</action>\n+        <action url="%(content_url)s/content_status_modify?workflow_action=recall" category="workflow" icon="">Recall</action>\n         <guard>\n             <guard-permission>Review comments</guard-permission>\n         </guard>\ndiff --git a/plone/app/discussion/tests/robot/test_moderation.robot b/plone/app/discussion/tests/robot/test_moderation.robot\nnew file mode 100644\nindex 00000000..0f442a6f\n--- /dev/null\n+++ b/plone/app/discussion/tests/robot/test_moderation.robot\n@@ -0,0 +1,64 @@\n+*** Settings ***\n+\n+Resource  plone/app/robotframework/saucelabs.robot\n+Resource  plone/app/robotframework/selenium.robot\n+\n+Library  Remote  ${PLONE_URL}/RobotRemote\n+\n+Test Setup  Run Keywords  Plone test setup\n+Test Teardown  Run keywords  Plone test teardown\n+\n+\n+*** Test Cases ***\n+\n+Add a Comment to a Document and bulk delete it\n+  Given a logged-in Site Administrator\n+    and workflow multiple enabled\n+    and a document with discussion enabled\n+   When I add a comment and delete it\n+   Then I can not see the comment below the document\n+\n+\n+*** Keywords ***\n+\n+# Given\n+\n+a logged-in Site Administrator\n+  Enable autologin as  Site Administrator\n+\n+a document\n+  Create content  type=Document  id=my-document  title=My Document\n+\n+a document with discussion enabled\n+  a document\n+  I enable discussion on the document\n+\n+\n+# When\n+\n+I enable discussion on the document\n+  Go To  ${PLONE_URL}/my-document/edit\n+  Wait until page contains  Settings\n+  Click Link  Settings\n+  Wait until element is visible  name=form.widgets.IAllowDiscussion.allow_discussion:list\n+  Select From List  name=form.widgets.IAllowDiscussion.allow_discussion:list  True\n+  Click Button  Save\n+\n+I add a comment and delete it\n+  Wait until page contains element  id=form-widgets-comment-text\n+  Input Text  id=form-widgets-comment-text  This is a comment\n+  Click Button  Comment\n+  Go To  ${PLONE_URL}/@@moderate-comments?review_state=all\n+  Select from list by value   xpath://select[@name=\'form.select.BulkAction\']  delete\n+  Select Checkbox  name=check_all\n+  Click Button  Apply\n+\n+workflow multiple enabled\n+  Go To  ${PLONE_URL}/@@content-controlpanel?type_id=Discussion%20Item&new_workflow=comment_multiple_state_review_workflow\n+  Click Button  Save\n+\n+# Then\n+\n+I can not see the comment below the document\n+  Go To  ${PLONE_URL}/my-document/view\n+  Page should not contain  This is a comment\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nnew file mode 100644\nindex 00000000..fe144a0e\n--- /dev/null\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -0,0 +1,124 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.discussion.browser.moderation import BulkActionsView\n+from plone.app.discussion.browser.moderation import DeleteComment\n+from plone.app.discussion.browser.moderation import CommentTransition\n+from plone.app.discussion.browser.moderation import View\n+from plone.app.discussion.interfaces import IConversation\n+from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from zope.component import createObject\n+from zope.component import queryUtility\n+\n+import unittest\n+\n+\n+class ModerationBulkActionsViewTest(unittest.TestCase):\n+\n+    layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.wf = getToolByName(self.portal,\n+                                \'portal_workflow\',\n+                                None)\n+        self.context = self.portal\n+        self.portal.portal_workflow.setChainForPortalTypes(\n+            (\'Discussion Item\',),\n+            \'comment_multiple_state_review_workflow\',\n+        )\n+        self.wf_tool = self.portal.portal_workflow\n+        # Add a conversation with three comments\n+        conversation = IConversation(self.portal.doc1)\n+        comment1 = createObject(\'plone.Comment\')\n+        comment1.title = \'Comment 1\'\n+        comment1.text = \'Comment text\'\n+        comment1.Creator = \'Jim\'\n+        new_id_1 = conversation.addComment(comment1)\n+        self.comment1 = self.portal.doc1.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id_1),\n+        )\n+        comment2 = createObject(\'plone.Comment\')\n+        comment2.title = \'Comment 2\'\n+        comment2.text = \'Comment text\'\n+        comment2.Creator = \'Joe\'\n+        new_id_2 = conversation.addComment(comment2)\n+        self.comment2 = self.portal.doc1.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id_2),\n+        )\n+        comment3 = createObject(\'plone.Comment\')\n+        comment3.title = \'Comment 3\'\n+        comment3.text = \'Comment text\'\n+        comment3.Creator = \'Emma\'\n+        new_id_3 = conversation.addComment(comment3)\n+        self.comment3 = self.portal.doc1.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id_3),\n+        )\n+        self.conversation = conversation\n+\n+    def test_default_bulkaction(self):\n+        # Make sure no error is raised when no bulk actions has been supplied\n+        self.request.set(\'form.select.BulkAction\', \'-1\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+\n+        view = BulkActionsView(self.portal, self.request)\n+\n+        self.assertFalse(view())\n+\n+    def test_publish(self):\n+        self.request.set(\'form.select.BulkAction\', \'publish\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        view = BulkActionsView(self.portal, self.request)\n+\n+        view()\n+\n+        # Count published comments\n+        published_comments = 0\n+        for r in self.conversation.getThreads():\n+            comment_obj = r[\'comment\']\n+            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n+            if workflow_status == \'published\':\n+                published_comments += 1\n+        # Make sure the comment has been published\n+        self.assertEqual(published_comments, 1)\n+\n+    def test_mark_as_spam(self):\n+        self.request.set(\'form.select.BulkAction\', \'mark_as_spam\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+\n+        view = BulkActionsView(self.portal, self.request)\n+\n+        view()\n+\n+        # Count spam comments\n+        spam_comments = 0\n+        for r in self.conversation.getThreads():\n+            comment_obj = r[\'comment\']\n+            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n+            if workflow_status == \'spam\':\n+                spam_comments += 1\n+        # Make sure the comment has been marked as spam\n+        self.assertEqual(spam_comments, 1)\n+\n+    def test_delete(self):\n+        # Initially we have three comments\n+        self.assertEqual(len(self.conversation.objectIds()), 3)\n+        # Delete two comments with bulk actions\n+        self.request.set(\'form.select.BulkAction\', \'delete\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath()),\n+                                   \'/\'.join(self.comment3.getPhysicalPath())])\n+        view = BulkActionsView(self.app, self.request)\n+\n+        view()\n+\n+        # Make sure that the two comments have been deleted\n+        self.assertEqual(len(self.conversation.objectIds()), 1)\n+        comment = next(self.conversation.getComments())\n+        self.assertTrue(comment)\n+        self.assertEqual(comment, self.comment2)\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 08d6cbd6..76eddb31 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -110,14 +110,6 @@ def test_default_bulkaction(self):\n \n         self.assertFalse(view())\n \n-    def test_retract(self):\n-        self.request.set(\'form.select.BulkAction\', \'retract\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n-\n-        view = BulkActionsView(self.portal, self.request)\n-\n-        self.assertRaises(NotImplementedError, view)\n-\n     def test_publish(self):\n         self.request.set(\'form.select.BulkAction\', \'publish\')\n         self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n@@ -135,15 +127,6 @@ def test_publish(self):\n         # Make sure the comment has been published\n         self.assertEqual(published_comments, 1)\n \n-    def test_mark_as_spam(self):\n-        self.request.set(\'form.select.BulkAction\', \'mark_as_spam\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n-\n-        view = BulkActionsView(self.portal, self.request)\n-\n-        self.assertRaises(NotImplementedError,\n-                          view)\n-\n     def test_delete(self):\n         # Initially we have three comments\n         self.assertEqual(len(self.conversation.objectIds()), 3)\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:39:58+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/30490412abc76429388eaab4eee2603f4f95db6e

batch navigation: reload on filtering by review_state

Files changed:
M plone/app/discussion/browser/javascripts/moderation.js

b'diff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 8efd74d4..79f99940 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -150,11 +150,12 @@ require(["jquery", "pat-registry"], function($, registry) {\n                  url = location.href + "?review_state=" + review_state;\n              }\n \n-             $("#review-comments").load(url + " #review-comments", function() {\n-                 init();\n-                 $(\'.pat-plone-modal\').patPloneModal();\n-                 let stateObj = { review_state: review_state };\n-                 history.pushState(stateObj, "moderate comments", url);\n+             $("#fieldset-moderate-comments").parent()\n+                .load(url + " #fieldset-moderate-comments", function() {\n+                    init();\n+                    $(\'.pat-plone-modal\').patPloneModal();\n+                    let stateObj = { review_state: review_state };\n+                    history.pushState(stateObj, "moderate comments", url);\n              });\n          });\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:41:06+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/dfc21d1d5db6414d626b6bd6a92c90e2c4331bc9

comment "approved" renamed to "published"

Files changed:
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml

b'diff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 79f99940..5a4bb3da 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -220,22 +220,29 @@ require(["jquery", "pat-registry"], function($, registry) {\n       }\n     });\n \n-    /**********************************************************************\n-     * select comments with review_state\n-     **********************************************************************/\n-\n-    $("input[name=\'review_state\']").click(function() {\n-      // location.search = \'review_state=\' + $(this).val();\n-      let review_state = $(this).val();\n-      let url = location.href;\n-      if (location.search) {\n-        url = location.href.replace(\n-          location.search,\n-          "?review_state=" + review_state\n-        );\n-      } else {\n-        url = location.href + "?review_state=" + review_state;\n-      }\n+        /**********************************************************************\n+         * Comments published: Load history for publishing date.\n+         **********************************************************************/\n+        $(".last-history-entry").each(function() {\n+            var me = $(this);\n+            $.ajax({\n+                url: me.attr("data-href"),\n+                success: function (data) {\n+                    let first_history_entry = $(data).find(".historyByLine").first();\n+                    me.html("");\n+                    first_history_entry.children().each(function() {\n+                        me.append($(this));\n+                        me.append("<br/>");\n+                    });\n+                    // format date\n+                    registry.scan(me);\n+                },\n+                error: function (msg) {\n+                    alert("Error getting history.");\n+                }\n+            });\n+        });\n+    }; // end init\n \n       $("#review-comments").load(url + " #review-comments", function() {\n         init();\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex 71d3e141..a8f186e9 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -21,8 +21,8 @@\n # Translations for generated values in buttons\n # States\n _(\'comment_pending\', default=\'pending\')\n-# _(\'comment_approved\', default=\'approved\')\n-_(\'comment_published\', default=\'approved\')\n+# _(\'comment_approved\', default=\'published\')\n+_(\'comment_published\', default=\'published\')\n _(\'comment_rejected\', default=\'rejected\')\n _(\'comment_spam\', default=\'marked as spam\')\n # Transitions\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\nindex a585298e..95b11ac3 100644\n--- a/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\n+++ b/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\n@@ -36,7 +36,7 @@\n             <permission-role>Reviewer</permission-role>\n         </permission-map>\n     </state>\n-    <state state_id="published" title="Approved">\n+    <state state_id="published" title="Published">\n         <description>Visible to everyone, non-editable.</description>\n         <exit-transition transition_id="mark_as_spam"/>\n         <exit-transition transition_id="recall"/>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:41:06+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/54de9b32e1c22ba3a15f4b55ba346d93bb0a8ad1

Update test_moderation.robot

Files changed:
M plone/app/discussion/tests/robot/test_moderation.robot

b"diff --git a/plone/app/discussion/tests/robot/test_moderation.robot b/plone/app/discussion/tests/robot/test_moderation.robot\nindex 0f442a6f..cbdffdb7 100644\n--- a/plone/app/discussion/tests/robot/test_moderation.robot\n+++ b/plone/app/discussion/tests/robot/test_moderation.robot\n@@ -49,9 +49,11 @@ I add a comment and delete it\n   Input Text  id=form-widgets-comment-text  This is a comment\n   Click Button  Comment\n   Go To  ${PLONE_URL}/@@moderate-comments?review_state=all\n+  Wait until page contains element  name=form.select.BulkAction\n   Select from list by value   xpath://select[@name='form.select.BulkAction']  delete\n   Select Checkbox  name=check_all\n   Click Button  Apply\n+  Wait Until Page Does Not Contain  This is a comment\n \n workflow multiple enabled\n   Go To  ${PLONE_URL}/@@content-controlpanel?type_id=Discussion%20Item&new_workflow=comment_multiple_state_review_workflow\n@@ -61,4 +63,5 @@ workflow multiple enabled\n \n I can not see the comment below the document\n   Go To  ${PLONE_URL}/my-document/view\n+  Wait until page contains  My Document\n   Page should not contain  This is a comment\n"

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:41:06+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/96e0fb83c02186bc5b3facc93fa5c47558559322

last transition entry as is from history

Files changed:
M plone/app/discussion/browser/javascripts/moderation.js

b'diff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 5a4bb3da..1450af30 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -229,11 +229,8 @@ require(["jquery", "pat-registry"], function($, registry) {\n                 url: me.attr("data-href"),\n                 success: function (data) {\n                     let first_history_entry = $(data).find(".historyByLine").first();\n-                    me.html("");\n-                    first_history_entry.children().each(function() {\n-                        me.append($(this));\n-                        me.append("<br/>");\n-                    });\n+                    me.html(first_history_entry);\n+\n                     // format date\n                     registry.scan(me);\n                 },\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:41:06+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/f777315da3af6693ae0336da9a49b3bd00b983a9

moderation view: get last transition entry faster

get it from @@contenthistorypopup instead from @@historyview

Files changed:
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/tests/functional_test_comment_review_workflow.txt
M plone/app/discussion/tests/robot/test_moderation.robot

b'diff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 1450af30..1016fda0 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -224,18 +224,16 @@ require(["jquery", "pat-registry"], function($, registry) {\n          * Comments published: Load history for publishing date.\n          **********************************************************************/\n         $(".last-history-entry").each(function() {\n-            var me = $(this);\n+            var lasthistoryentry = $(this);\n             $.ajax({\n-                url: me.attr("data-href"),\n+                url: lasthistoryentry.attr("data-href"),\n                 success: function (data) {\n-                    let first_history_entry = $(data).find(".historyByLine").first();\n-                    me.html(first_history_entry);\n-\n+                    lasthistoryentry.html($(data).find(".historyByLine").first());\n                     // format date\n-                    registry.scan(me);\n+                    registry.scan(lasthistoryentry);\n                 },\n                 error: function (msg) {\n-                    alert("Error getting history.");\n+                    console.error("Error getting history.");\n                 }\n             });\n         });\ndiff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex 676c55b6..df6d4551 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -196,7 +196,7 @@\n                               </td>\n                               <td>\n                                   <span class="last-history-entry"\n-                                      tal:attributes="data-href string:$item_url/@@historyview">\n+                                      tal:attributes="data-href string:$item_url/@@contenthistorypopup">\n                                       last history entry\n                                   </span>\n                               </td>\ndiff --git a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\nindex 55318883..84d384ff 100644\n--- a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n+++ b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n@@ -176,7 +176,7 @@ flaw? Though, the comment is published properly.\n     >>> browser.raiseHttpErrors = False\n     >>> browser.getControl(\'Approve\', index=0).click()\n \n-    >>> \'Comment approved\' in browser.contents\n+    >>> \'Comment published\' in browser.contents\n     True\n \n     >>> browser.handleErrors = False\ndiff --git a/plone/app/discussion/tests/robot/test_moderation.robot b/plone/app/discussion/tests/robot/test_moderation.robot\nindex cbdffdb7..bca85628 100644\n--- a/plone/app/discussion/tests/robot/test_moderation.robot\n+++ b/plone/app/discussion/tests/robot/test_moderation.robot\n@@ -15,8 +15,15 @@ Add a Comment to a Document and bulk delete it\n   Given a logged-in Site Administrator\n     and workflow multiple enabled\n     and a document with discussion enabled\n-   When I add a comment and delete it\n-   Then I can not see the comment below the document\n+  When I add a comment and delete it\n+  Then I can not see the comment below the document\n+\n+Last history entry is shown\n+  Given a logged-in Site Administrator\n+    and workflow multiple enabled\n+    and a document with discussion enabled\n+  When I add a comment\n+  Then I can see the last history entry in moderation view\n \n \n *** Keywords ***\n@@ -44,6 +51,11 @@ I enable discussion on the document\n   Select From List  name=form.widgets.IAllowDiscussion.allow_discussion:list  True\n   Click Button  Save\n \n+I add a comment\n+  Wait until page contains element  id=form-widgets-comment-text\n+  Input Text  id=form-widgets-comment-text  This is a comment\n+  Click Button  Comment\n+\n I add a comment and delete it\n   Wait until page contains element  id=form-widgets-comment-text\n   Input Text  id=form-widgets-comment-text  This is a comment\n@@ -65,3 +77,8 @@ I can not see the comment below the document\n   Go To  ${PLONE_URL}/my-document/view\n   Wait until page contains  My Document\n   Page should not contain  This is a comment\n+\n+I can see the last history entry in moderation view\n+  Go To  ${PLONE_URL}/@@moderate-comments?review_state=all\n+  Wait until page contains element  name=form.select.BulkAction\n+  Page should contain  Create\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-08T12:42:03+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/c1ec431769f9c44ba3de2a0d1019eb80085540c1

extended existing review workflow by stati 'rejected' and 'spam'

removed addional third workflow

Files changed:
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/profiles/default/workflows.xml
M plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml
M plone/app/discussion/tests/robot/test_moderation.robot
M plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/upgrades.py
M plone/app/discussion/upgrades.zcml
D plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml

b'diff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex 73086e14..e968367b 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -184,11 +184,8 @@ def custom_comment_workflow_warning(self):\n             \'comment_one_state_workflow\' in workflow_chain\n         comment_review_workflow_enabled = \\\n             \'comment_review_workflow\' in workflow_chain\n-        comment_multiple_state_review_workflow = \\\n-            \'comment_multiple_state_review_workflow\' in workflow_chain\n         if one_state_workflow_enabled \\\n-                or comment_review_workflow_enabled \\\n-                or comment_multiple_state_review_workflow:\n+                or comment_review_workflow_enabled:\n             return\n         return True\n \ndiff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 1016fda0..5275b454 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -80,124 +80,60 @@ require(["jquery", "pat-registry"], function($, registry) {\n         success: function(msg) {\n           if (moderate) {\n             let url = location.href;\n-            $("#review-comments").load(url + " #review-comments", function() {\n-              init();\n-              $(".pat-plone-modal").patPloneModal();\n-            });\n-        });\n-\n-\n-        /**********************************************************************\n-         * Bulk actions for comments (delete, publish)\n-         **********************************************************************/\n-        $("input[name=\'form.button.BulkAction\']").click(function (e) {\n-            e.preventDefault();\n-            var form = $(this).closest("form");\n-            var target = $(form).attr(\'action\');\n-            var params = $(form).serialize();\n-            var valArray = $(\'input:checkbox:checked\');\n-            var selectField = $(form).find("[name=\'form.select.BulkAction\']");\n-\n-            if (selectField.val() === \'-1\') {\n-                // TODO: translate message\n-                alert("You haven\'t selected a bulk action. Please select one.");\n-            } else if (valArray.length === 0) {\n-                // TODO: translate message\n-                alert("You haven\'t selected any comment for this bulk action." +\n-                      "Please select at least one comment.");\n-            } else {\n-                $.post(target, params, function (data) {\n-                    // reset the bulkaction select\n-                    selectField.find("option[value=\'-1\']").attr(\'selected\', \'selected\');\n-                    // reload filtered comments\n-                    $("#review-comments").load(window.location + " #review-comments", function() {\n-                        init();\n-                        $(\'.pat-plone-modal\').patPloneModal();\n-                    });\n-                });\n-            }\n-        });\n-\n-\n-        /**********************************************************************\n-         * Check or uncheck all checkboxes from the batch moderation page.\n-         **********************************************************************/\n-        $("input[name=\'check_all\']").click(function () {\n-            if ($(this).val() === \'0\') {\n-                $(this).parents("table")\n-                       .find("input:checkbox")\n-                       .prop("checked", true);\n-                $(this).val("1");\n-            } else {\n-                $(this).parents("table")\n-                       .find("input:checkbox")\n-                       .prop("checked", false);\n-                $(this).val("0");\n-            }\n-        });\n-\n-        /**********************************************************************\n-         * select comments with review_state\n-         **********************************************************************/\n-\n-         $("input[name=\'review_state\']").click(function () {\n-             // location.search = \'review_state=\' + $(this).val();\n-             let review_state = $(this).val();\n-             let url = location.href;\n-             if (location.search) {\n-                 url = location.href.replace(location.search, "?review_state=" + review_state);\n-             } else {\n-                 url = location.href + "?review_state=" + review_state;\n-             }\n-\n-             $("#fieldset-moderate-comments").parent()\n-                .load(url + " #fieldset-moderate-comments", function() {\n-                    init();\n-                    $(\'.pat-plone-modal\').patPloneModal();\n-                    let stateObj = { review_state: review_state };\n-                    history.pushState(stateObj, "moderate comments", url);\n-             });\n-         });\n-\n+            $("#review-comments").load(\n+              url + " #review-comments > *",\n+              function() {\n+                init();\n+                $(".pat-plone-modal").patPloneModal();\n+              }\n+            );\n+          } else {\n+            location.reload();\n+          }\n+        },\n+        error: function(msg) {\n+          alert(\n+            "Error transmitting comment. (Error sending AJAX request:" +\n+              target +\n+              ")"\n+          );\n+        }\n+      });\n+    });\n \n     /**********************************************************************\n      * Bulk actions for comments (delete, publish)\n      **********************************************************************/\n     $("input[name=\'form.button.BulkAction\']").click(function(e) {\n       e.preventDefault();\n-      var form = $(this).parents("form");\n+      var form = $(this).closest("form");\n       var target = $(form).attr("action");\n       var params = $(form).serialize();\n       var valArray = $("input:checkbox:checked");\n       var selectField = $(form).find("[name=\'form.select.BulkAction\']");\n+\n       if (selectField.val() === "-1") {\n-        // XXX: translate message\n+        // TODO: translate message\n         alert("You haven\'t selected a bulk action. Please select one.");\n       } else if (valArray.length === 0) {\n-        // XXX: translate message\n+        // TODO: translate message\n         alert(\n           "You haven\'t selected any comment for this bulk action." +\n             "Please select at least one comment."\n         );\n       } else {\n         $.post(target, params, function(data) {\n-          valArray.each(function() {\n-            /* Remove all selected lines. */\n-            var row = $(this)\n-              .parent()\n-              .parent();\n-            row.fadeOut("normal", function() {\n-              row.remove();\n-            });\n-          });\n-          // reload page if all comments have been removed\n-          var comments = $("table#review-comments > tbody > tr");\n-          if (comments.length <= valArray.length) {\n-            location.reload();\n-          }\n+          // reset the bulkaction select\n+          selectField.find("option[value=\'-1\']").attr("selected", "selected");\n+          // reload filtered comments\n+          $("#review-comments").load(\n+            window.location + " #review-comments",\n+            function() {\n+              init();\n+              $(".pat-plone-modal").patPloneModal();\n+            }\n+          );\n         });\n-        // reset the bulkaction select\n-        selectField.find("option[value=\'-1\']").attr("selected", "selected");\n       }\n     });\n \n@@ -220,31 +156,30 @@ require(["jquery", "pat-registry"], function($, registry) {\n       }\n     });\n \n-        /**********************************************************************\n-         * Comments published: Load history for publishing date.\n-         **********************************************************************/\n-        $(".last-history-entry").each(function() {\n-            var lasthistoryentry = $(this);\n-            $.ajax({\n-                url: lasthistoryentry.attr("data-href"),\n-                success: function (data) {\n-                    lasthistoryentry.html($(data).find(".historyByLine").first());\n-                    // format date\n-                    registry.scan(lasthistoryentry);\n-                },\n-                error: function (msg) {\n-                    console.error("Error getting history.");\n-                }\n-            });\n-        });\n-    }; // end init\n+    /**********************************************************************\n+     * select comments with review_state\n+     **********************************************************************/\n \n-      $("#review-comments").load(url + " #review-comments", function() {\n-        init();\n-        $(".pat-plone-modal").patPloneModal();\n-        let stateObj = { review_state: review_state };\n-        history.pushState(stateObj, "moderate comments", url);\n-      });\n+    $("input[name=\'review_state\']").click(function() {\n+      let review_state = $(this).val();\n+      let url = location.href;\n+      if (location.search) {\n+        url = location.href.replace(\n+          location.search,\n+          "?review_state=" + review_state\n+        );\n+      } else {\n+        url = location.href + "?review_state=" + review_state;\n+      }\n+\n+      $("#fieldset-moderate-comments")\n+        .parent()\n+        .load(url + " #fieldset-moderate-comments", function() {\n+          init();\n+          $(".pat-plone-modal").patPloneModal();\n+          let stateObj = { review_state: review_state };\n+          history.pushState(stateObj, "moderate comments", url);\n+        });\n     });\n \n     /**********************************************************************\n@@ -269,26 +204,23 @@ require(["jquery", "pat-registry"], function($, registry) {\n     });\n \n     /**********************************************************************\n-     * Comments approved: Load history for approved date.\n+     * Comments published: Load history for publishing date.\n      **********************************************************************/\n     $(".last-history-entry").each(function() {\n-      var me = $(this);\n+      var lasthistoryentry = $(this);\n       $.ajax({\n-        url: me.attr("data-href"),\n+        url: lasthistoryentry.attr("data-href"),\n         success: function(data) {\n-          let first_history_entry = $(data)\n-            .find(".historyByLine")\n-            .first();\n-          me.html("");\n-          first_history_entry.children().each(function() {\n-            me.append($(this));\n-            me.append("<br/>");\n-          });\n+          lasthistoryentry.html(\n+            $(data)\n+              .find(".historyByLine")\n+              .first()\n+          );\n           // format date\n-          registry.scan(me);\n+          registry.scan(lasthistoryentry);\n         },\n         error: function(msg) {\n-          alert("Error getting history.");\n+          console.error("Error getting history.");\n         }\n       });\n     });\ndiff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex df6d4551..bb7d715a 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -46,21 +46,12 @@\n             </span>\n         </div>\n \n-\n-      <form tal:condition="not:items">\n-          <fieldset id="fieldset-moderate-comments" class="formPanel">\n-              <p id="no-comments-message" i18n:translate="message_no_comments">\n-                  No comments\n-              </p>\n-          </fieldset>\n-      </form>\n-\n-      <form method="post"\n+      <form\n+            method="post"\n             action="#"\n             tal:condition="moderation_enabled"\n             tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n             tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n-\n           <fieldset id="fieldset-moderate-comments" class="formPanel">\n \n               <div metal:use-macro="here/batch_macros/macros/navigation" />\n@@ -187,9 +178,11 @@\n                                               class="context"\n                                               type="submit"\n                                               value="Label"\n-                                              tal:attributes="id item/id;\n+                                              tal:attributes="id string:${item/id}_${transition/id};\n                                                     data-transition transition/id;\n-                                                    value python:translationhelper.translate(transition[\'title\'])"\n+                                                    value python:translationhelper.translate(transition[\'title\']);\n+                                                    style python:transition[\'id\']==\'publish\' and \'background-color: #5cb85c;; border-color: #4cae4c;;\' or \'\';\n+                                                    "\n                                                  />\n                                       </tal:transitions>\n                                   </div>\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex a8f186e9..cbbd784e 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -113,15 +113,15 @@ def allowed_transitions(self, obj=None):\n \n         Example: pending\n \n-        [{\'id\': \'mark_as_spam\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=mark_as_spam\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_multiple_state_review_workflow/transitions/mark_as_spam>, \'title\': \'Spam\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n+        [{\'id\': \'mark_as_spam\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=mark_as_spam\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_review_workflow/transitions/mark_as_spam>, \'title\': \'Spam\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n         {\'id\': \'publish\',\n             \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=publish\',\n             \'icon\': \'\',\n             \'category\': \'workflow\',\n-            \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_multiple_state_review_workflow/transitions/publish>,\n+            \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_review_workflow/transitions/publish>,\n             \'title\': \'Approve\',\n             \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n-        {\'id\': \'reject\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=reject\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_multiple_state_review_workflow/transitions/reject>, \'title\': \'Reject\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True}]\n+        {\'id\': \'reject\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=reject\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_review_workflow/transitions/reject>, \'title\': \'Reject\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True}]\n         """\n \n         if obj:\ndiff --git a/plone/app/discussion/profiles/default/workflows.xml b/plone/app/discussion/profiles/default/workflows.xml\nindex 820f22db..328a7ac6 100644\n--- a/plone/app/discussion/profiles/default/workflows.xml\n+++ b/plone/app/discussion/profiles/default/workflows.xml\n@@ -1,7 +1,6 @@\n <?xml version="1.0"?>\n <object name="portal_workflow" meta_type="Plone Workflow Tool">\n   <object name="comment_review_workflow" meta_type="Workflow"/>\n-  <object name="comment_multiple_state_review_workflow" meta_type="Workflow"/>\n   <object name="comment_one_state_workflow" meta_type="Workflow"/>\n   <bindings>\n     <type type_id="Discussion Item">\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\ndeleted file mode 100644\nindex 95b11ac3..00000000\n--- a/plone/app/discussion/profiles/default/workflows/comment_multiple_state_review_workflow/definition.xml\n+++ /dev/null\n@@ -1,138 +0,0 @@\n-<?xml version="1.0" encoding="UTF-8"?>\n-<dc-workflow\n-    xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-    i18n:domain="plone"\n-    workflow_id="comment_multiple_state_review_workflow"\n-    title="Comment Multiple State Review Workflow"\n-    description="A review workflow for comments with multiple states"\n-    state_variable="review_state"\n-    initial_state="pending"\n-    i18n:attributes="title; description"\n-    >\n-    <permission>Access contents information</permission>\n-    <permission>Modify portal content</permission>\n-    <permission>Reply to item</permission>\n-    <permission>View</permission>\n-    <state state_id="pending" title="Pending">\n-        <description>Submitted, pending review.</description>\n-        <exit-transition transition_id="mark_as_spam"/>\n-        <exit-transition transition_id="publish"/>\n-        <exit-transition transition_id="reject"/>\n-        <permission-map name="Access contents information" acquired="False">\n-            <permission-role>Manager</permission-role>\n-            <permission-role>Owner</permission-role>\n-            <permission-role>Reviewer</permission-role>\n-        </permission-map>\n-        <permission-map name="Modify portal content" acquired="False">\n-            <permission-role>Manager</permission-role>\n-            <permission-role>Owner</permission-role>\n-            <permission-role>Reviewer</permission-role>\n-        </permission-map>\n-        <permission-map name="Reply to item" acquired="False">\n-        </permission-map>\n-        <permission-map name="View" acquired="False">\n-            <permission-role>Manager</permission-role>\n-            <permission-role>Owner</permission-role>\n-            <permission-role>Reviewer</permission-role>\n-        </permission-map>\n-    </state>\n-    <state state_id="published" title="Published">\n-        <description>Visible to everyone, non-editable.</description>\n-        <exit-transition transition_id="mark_as_spam"/>\n-        <exit-transition transition_id="recall"/>\n-        <exit-transition transition_id="reject"/>\n-        <permission-map name="Access contents information" acquired="True">\n-        </permission-map>\n-        <permission-map name="Modify portal content" acquired="False">\n-            <permission-role>Manager</permission-role>\n-        </permission-map>\n-        <permission-map name="Reply to item" acquired="True">\n-        </permission-map>\n-        <permission-map name="View" acquired="True">\n-        </permission-map>\n-    </state>\n-    <state state_id="rejected" title="Rejected">\n-        <exit-transition transition_id="mark_as_spam"/>\n-        <exit-transition transition_id="publish"/>\n-        <exit-transition transition_id="recall"/>\n-    </state>\n-    <state state_id="spam" title="Spam">\n-        <exit-transition transition_id="publish"/>\n-        <exit-transition transition_id="recall"/>\n-        <exit-transition transition_id="reject"/>\n-    </state>\n-    <transition transition_id="mark_as_spam" title="Mark as spam" new_state="spam" trigger="USER" before_script="" after_script="">\n-        <description>Spam comments are invisible to other users.</description>\n-        <action url="%(content_url)s/content_status_modify?workflow_action=mark_as_spam" category="workflow" icon="">Spam</action>\n-        <guard>\n-            <guard-permission>Review comments</guard-permission>\n-        </guard>\n-    </transition>\n-    <transition transition_id="publish" title="Reviewer approves content" new_state="published" trigger="USER" before_script="" after_script="">\n-        <description>Approving the comment makes it visible to other users.</description>\n-        <action url="%(content_url)s/content_status_modify?workflow_action=publish" category="workflow" icon="">Approve</action>\n-        <guard>\n-            <guard-permission>Review comments</guard-permission>\n-        </guard>\n-    </transition>\n-    <transition transition_id="recall" title="Reviewer recalls comment back to pending state" new_state="pending" trigger="USER" before_script="" after_script="">\n-        <action url="%(content_url)s/content_status_modify?workflow_action=recall" category="workflow" icon="">Recall</action>\n-        <guard>\n-            <guard-permission>Review comments</guard-permission>\n-        </guard>\n-    </transition>\n-    <transition transition_id="reject" title="Reviewer rejects comment" new_state="rejected" trigger="USER" before_script="" after_script="">\n-        <description>Rejected comments are invisible to other users.</description>\n-        <action url="%(content_url)s/content_status_modify?workflow_action=reject" category="workflow" icon="">Reject</action>\n-        <guard>\n-            <guard-permission>Review comments</guard-permission>\n-        </guard>\n-    </transition>\n-    <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">\n-        <description>Previous transition</description>\n-        <default>\n-\n-            <expression>transition/getId|nothing</expression>\n-        </default>\n-        <guard>\n-        </guard>\n-    </variable>\n-    <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">\n-        <description>The ID of the user who performed the previous transition</description>\n-        <default>\n-\n-            <expression>user/getUserName</expression>\n-        </default>\n-        <guard>\n-        </guard>\n-    </variable>\n-    <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">\n-        <description>Comment about the last transition</description>\n-        <default>\n-\n-            <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n-        </default>\n-        <guard>\n-        </guard>\n-    </variable>\n-    <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">\n-        <description>Provides access to workflow history</description>\n-        <default>\n-\n-            <expression>state_change/getHistory</expression>\n-        </default>\n-        <guard>\n-            <guard-permission>Request review</guard-permission>\n-            <guard-permission>Review portal content</guard-permission>\n-        </guard>\n-    </variable>\n-    <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">\n-        <description>When the previous transition was performed</description>\n-        <default>\n-\n-            <expression>state_change/getDateTime</expression>\n-        </default>\n-        <guard>\n-        </guard>\n-    </variable>\n-</dc-workflow>\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml\nindex 6936319f..af19e9e3 100644\n--- a/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml\n+++ b/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml\n@@ -7,125 +7,130 @@\n              state_variable="review_state"\n              initial_state="pending"\n              i18n:attributes="title; description">\n+             <permission>Access contents information</permission>\n+             <permission>Modify portal content</permission>\n+             <permission>Reply to item</permission>\n+             <permission>View</permission>\n+             <state state_id="pending" title="Pending">\n+                 <description>Submitted, pending review.</description>\n+                 <exit-transition transition_id="mark_as_spam"/>\n+                 <exit-transition transition_id="publish"/>\n+                 <exit-transition transition_id="reject"/>\n+                 <permission-map name="Access contents information" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                     <permission-role>Owner</permission-role>\n+                     <permission-role>Reviewer</permission-role>\n+                 </permission-map>\n+                 <permission-map name="Modify portal content" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                     <permission-role>Owner</permission-role>\n+                     <permission-role>Reviewer</permission-role>\n+                 </permission-map>\n+                 <permission-map name="Reply to item" acquired="False">\n+                 </permission-map>\n+                 <permission-map name="View" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                     <permission-role>Owner</permission-role>\n+                     <permission-role>Reviewer</permission-role>\n+                 </permission-map>\n+             </state>\n+             <state state_id="published" title="Published">\n+                 <description>Visible to everyone, non-editable.</description>\n+                 <exit-transition transition_id="mark_as_spam"/>\n+                 <exit-transition transition_id="recall"/>\n+                 <exit-transition transition_id="reject"/>\n+                 <permission-map name="Access contents information" acquired="True">\n+                 </permission-map>\n+                 <permission-map name="Modify portal content" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                 </permission-map>\n+                 <permission-map name="Reply to item" acquired="True">\n+                 </permission-map>\n+                 <permission-map name="View" acquired="True">\n+                 </permission-map>\n+             </state>\n+             <state state_id="rejected" title="Rejected">\n+                 <exit-transition transition_id="mark_as_spam"/>\n+                 <exit-transition transition_id="publish"/>\n+                 <exit-transition transition_id="recall"/>\n+             </state>\n+             <state state_id="spam" title="Spam">\n+                 <exit-transition transition_id="publish"/>\n+                 <exit-transition transition_id="recall"/>\n+                 <exit-transition transition_id="reject"/>\n+             </state>\n+             <transition transition_id="mark_as_spam" title="Mark as spam" new_state="spam" trigger="USER" before_script="" after_script="">\n+                 <description>Spam comments are invisible to other users.</description>\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=mark_as_spam" category="workflow" icon="">Spam</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <transition transition_id="publish" title="Reviewer approves content" new_state="published" trigger="USER" before_script="" after_script="">\n+                 <description>Approving the comment makes it visible to other users.</description>\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=publish" category="workflow" icon="">Approve</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <transition transition_id="recall" title="Reviewer recalls comment back to pending state" new_state="pending" trigger="USER" before_script="" after_script="">\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=recall" category="workflow" icon="">Recall</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <transition transition_id="reject" title="Reviewer rejects comment" new_state="rejected" trigger="USER" before_script="" after_script="">\n+                 <description>Rejected comments are invisible to other users.</description>\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=reject" category="workflow" icon="">Reject</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">\n+                 <description>Previous transition</description>\n+                 <default>\n \n- <permission>Access contents information</permission>\n- <permission>Modify portal content</permission>\n- <permission>View</permission>\n- <permission>Reply to item</permission>\n+                     <expression>transition/getId|nothing</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">\n+                 <description>The ID of the user who performed the previous transition</description>\n+                 <default>\n \n- <state state_id="pending" title="Pending" i18n:attributes="title">\n-  <exit-transition transition_id="publish"/>\n-  <description i18n:translate="">\n-    Submitted, pending review.\n-  </description>\n-  <permission-map name="Access contents information" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="Modify portal content" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="View" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="Reply to item" acquired="False">\n-  </permission-map>\n- </state>\n+                     <expression>user/getUserName</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">\n+                 <description>Comment about the last transition</description>\n+                 <default>\n \n- <state state_id="published" title="Published" i18n:attributes="title">\n-  <description i18n:translate="">\n-    Visible to everyone, non-editable.\n-  </description>\n-  <permission-map name="Access contents information" acquired="True">\n-  </permission-map>\n-  <permission-map name="Modify portal content" acquired="False">\n-   <permission-role>Manager</permission-role>\n-  </permission-map>\n-  <permission-map name="View" acquired="True">\n-  </permission-map>\n-  <permission-map name="Reply to item" acquired="True">\n-  </permission-map>\n- </state>\n+                     <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">\n+                 <description>Provides access to workflow history</description>\n+                 <default>\n \n- <transition transition_id="publish" new_state="published"\n-             title="Reviewer approves content"\n-             trigger="USER"\n-             before_script="" after_script=""\n-             i18n:attributes="title">\n-  <description i18n:translate="">\n-    Approving the comment makes it visible to other users.\n-  </description>\n-  <action url="%(content_url)s/content_status_modify?workflow_action=publish"\n-          category="workflow"\n-          i18n:translate="">Approve</action>\n-  <guard>\n-   <guard-permission>Review comments</guard-permission>\n-  </guard>\n- </transition>\n+                     <expression>state_change/getHistory</expression>\n+                 </default>\n+                 <guard>\n+                     <guard-permission>Request review</guard-permission>\n+                     <guard-permission>Review portal content</guard-permission>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">\n+                 <description>When the previous transition was performed</description>\n+                 <default>\n \n- <variable variable_id="action" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">Previous transition</description>\n-  <default>\n-   <expression>transition/getId|nothing</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="actor" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">\n-    The ID of the user who performed the previous transition\n-  </description>\n-  <default>\n-   <expression>user/getUserName</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="comments" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">\n-    Comment about the last transition\n-  </description>\n-  <default>\n-   <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="review_history" for_catalog="False"\n-           for_status="False" update_always="False">\n-  <description i18n:translate="">\n-    Provides access to workflow history\n-  </description>\n-  <default>\n-   <expression>state_change/getHistory</expression>\n-  </default>\n-  <guard>\n-   <guard-permission>Request review</guard-permission>\n-   <guard-permission>Review portal content</guard-permission>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="time" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">\n-    When the previous transition was performed\n-  </description>\n-  <default>\n-   <expression>state_change/getDateTime</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n-</dc-workflow>\n+                     <expression>state_change/getDateTime</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+         </dc-workflow>\ndiff --git a/plone/app/discussion/tests/robot/test_moderation.robot b/plone/app/discussion/tests/robot/test_moderation.robot\nindex bca85628..a33d1d5a 100644\n--- a/plone/app/discussion/tests/robot/test_moderation.robot\n+++ b/plone/app/discussion/tests/robot/test_moderation.robot\n@@ -68,7 +68,7 @@ I add a comment and delete it\n   Wait Until Page Does Not Contain  This is a comment\n \n workflow multiple enabled\n-  Go To  ${PLONE_URL}/@@content-controlpanel?type_id=Discussion%20Item&new_workflow=comment_multiple_state_review_workflow\n+  Go To  ${PLONE_URL}/@@content-controlpanel?type_id=Discussion%20Item&new_workflow=comment_review_workflow\n   Click Button  Save\n \n # Then\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nindex fe144a0e..72b1db02 100644\n--- a/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -31,7 +31,7 @@ def setUp(self):\n         self.context = self.portal\n         self.portal.portal_workflow.setChainForPortalTypes(\n             (\'Discussion Item\',),\n-            \'comment_multiple_state_review_workflow\',\n+            \'comment_review_workflow\',\n         )\n         self.wf_tool = self.portal.portal_workflow\n         # Add a conversation with three comments\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 2bb3c287..1d4172f2 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -73,7 +73,3 @@ def upgrade_comment_workflows(context):\n \n def add_js_to_plone_legacy(context):\n     context.runImportStepFromProfile(default_profile, \'plone.app.registry\')\n-\n-\n-def add_multiple_state_workflow(context):\n-    upgrade_comment_workflows_retain_current_workflow(context)\ndiff --git a/plone/app/discussion/upgrades.zcml b/plone/app/discussion/upgrades.zcml\nindex d64591ce..02a7e541 100644\n--- a/plone/app/discussion/upgrades.zcml\n+++ b/plone/app/discussion/upgrades.zcml\n@@ -62,15 +62,4 @@\n         />\n   </genericsetup:upgradeSteps>\n \n-  <genericsetup:upgradeSteps\n-      source="1001"\n-      destination="1002"\n-      profile="plone.app.discussion:default">\n-      <genericsetup:upgradeStep\n-          title="Additional workflow with states pending, published, rejected and spam"\n-          description="Additional states allows moderators to review history of publishing and rejection"\n-          handler=".upgrades.add_multiple_state_workflow"\n-          />\n-  </genericsetup:upgradeSteps>\n-\n </configure>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-11T11:04:19+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/e3080971b33308acb221507084fa7a529b990b07

rebase cleanup

Files changed:
A news/163.bugfix
A news/163.feature.1
A news/163.feature.2
A news/164.feature
D news/163.enhancement
D news/164.enhancement

b'diff --git a/news/163.bugfix b/news/163.bugfix\nnew file mode 100644\nindex 00000000..6bab9907\n--- /dev/null\n+++ b/news/163.bugfix\n@@ -0,0 +1,2 @@\n+``/@@moderate-publish-comment``: publish only pending comment, else show status message "comment already approved".\n+[ksuess]\ndiff --git a/news/163.enhancement b/news/163.enhancement\ndeleted file mode 100644\nindex f6ee230f..00000000\n--- a/news/163.enhancement\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-link of notification mail: /@@moderate-publish-comment : publish only pending comment, else show status message "comment already approved"\n-[ksuess]\ndiff --git a/news/163.feature.1 b/news/163.feature.1\nnew file mode 100644\nindex 00000000..e6963b73\n--- /dev/null\n+++ b/news/163.feature.1\n@@ -0,0 +1 @@\n+Notification for moderator: show email address of commentator.\ndiff --git a/news/163.feature.2 b/news/163.feature.2\nnew file mode 100644\nindex 00000000..48658e7a\n--- /dev/null\n+++ b/news/163.feature.2\n@@ -0,0 +1,2 @@\n+Link to the commented page for editing, approving, deleting comment instead of linking to ``/@@moderate-publish-comment`` and ``@@moderate-delete-comment``.\n+[ksuess]\ndiff --git a/news/164.enhancement b/news/164.enhancement\ndeleted file mode 100644\nindex 6feb63a9..00000000\n--- a/news/164.enhancement\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Additional optional workflow: workflow with two more states: rejected and spam,\n-    added to existing states pending and published. Moderation view extended to handle four workflow states.\n-[ksuess]\ndiff --git a/news/164.feature b/news/164.feature\nnew file mode 100644\nindex 00000000..0810d8fe\n--- /dev/null\n+++ b/news/164.feature\n@@ -0,0 +1,3 @@\n+Extended existing review workflow by stati ``rejected`` and ``spam``\n+Moderation view extended to handle four workflow states.\n+[ksuess]\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-11T11:08:22+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/36c834e6b371da23a9d0a7120fa970ba81871817

rebase cleanup

Files changed:
D news/163.bugfix
D news/163.feature.1
D news/163.feature.2

b'diff --git a/news/163.bugfix b/news/163.bugfix\ndeleted file mode 100644\nindex 6bab9907..00000000\n--- a/news/163.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-``/@@moderate-publish-comment``: publish only pending comment, else show status message "comment already approved".\n-[ksuess]\ndiff --git a/news/163.feature.1 b/news/163.feature.1\ndeleted file mode 100644\nindex e6963b73..00000000\n--- a/news/163.feature.1\n+++ /dev/null\n@@ -1 +0,0 @@\n-Notification for moderator: show email address of commentator.\ndiff --git a/news/163.feature.2 b/news/163.feature.2\ndeleted file mode 100644\nindex 48658e7a..00000000\n--- a/news/163.feature.2\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Link to the commented page for editing, approving, deleting comment instead of linking to ``/@@moderate-publish-comment`` and ``@@moderate-delete-comment``.\n-[ksuess]\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-11T11:43:35+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/dde8640fc5f438ea56488a04e7a9c39617b70e0a

Update test_comments_viewlet.py

Files changed:
M plone/app/discussion/tests/test_comments_viewlet.py

b"diff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 942f0d26..06b32313 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -599,10 +599,10 @@ def test_get_replies_with_workflow_actions(self):\n         self.assertTrue('actions' in reply)\n         self.assertEqual(\n             reply['actions'][0]['id'],\n-            'publish',\n+            'mark_as_spam',\n         )\n         expected_url = 'http://nohost/plone/doc1/++conversation++default/{0}' \\\n-                       '/content_status_modify?workflow_action=publish'\n+                       '/content_status_modify?workflow_action=mark_as_spam'\n         self.assertEqual(\n             reply['actions'][0]['url'],\n             expected_url.format(int(c1)),\n"

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-13T11:23:48+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/336808bfa98befb1fcb9b8dd8f523d38167ea6fa

Update metadata.xml

Files changed:
M plone/app/discussion/profiles/default/metadata.xml

b'diff --git a/plone/app/discussion/profiles/default/metadata.xml b/plone/app/discussion/profiles/default/metadata.xml\nindex 49f2d5ec..c779e86e 100644\n--- a/plone/app/discussion/profiles/default/metadata.xml\n+++ b/plone/app/discussion/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n- <version>1002</version>\n+ <version>1001</version>\n  <dependencies>\n   <dependency>profile-plone.resource:default</dependency>\n   <dependency>profile-plone.app.registry:default</dependency>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-13T11:23:58+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/812b28d846ded3d9ec8d64355d0dcbf65970ed2d

clean up

Files changed:
M plone/app/discussion/browser/moderation.py

b'diff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex cbbd784e..fa42c7be 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -9,13 +9,11 @@\n from plone.app.discussion.interfaces import _\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IReplies\n-from plone.protect.interfaces import IDisableCSRFProtection\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.event import notify\n-from zope.interface import alsoProvides\n \n \n # Translations for generated values in buttons\n@@ -123,7 +121,6 @@ def allowed_transitions(self, obj=None):\n             \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n         {\'id\': \'reject\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=reject\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_review_workflow/transitions/reject>, \'title\': \'Reject\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True}]\n         """\n-\n         if obj:\n             transitions = [\n                 a for a in self.workflowTool.listActionInfos(object=obj)\n@@ -132,7 +129,6 @@ def allowed_transitions(self, obj=None):\n             return transitions\n \n \n-\n class ModerateCommentsEnabled(BrowserView):\n \n     def __call__(self):\n@@ -295,41 +291,6 @@ def __call__(self):\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n \n-class RejectComment(BrowserView):\n-    """Reject a comment.\n-\n-       see PublishComment for more information\n-    """\n-\n-    def __call__(self):\n-        alsoProvides(self.request, IDisableCSRFProtection)\n-        comment = aq_inner(self.context)\n-        content_object = aq_parent(aq_parent(comment))\n-        print("*** called: RejectComment for ", comment.Description)\n-        workflowTool = getToolByName(comment, \'portal_workflow\', None)\n-        workflow_action = self.request.form.get(\'workflow_action\', \'reject\')\n-        review_state = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n-        if review_state != \'rejected\':\n-            workflowTool.doActionFor(comment, workflow_action)\n-            comment.reindexObject()\n-            content_object.reindexObject(idxs=[\'total_comments\'])\n-            notify(CommentPublishedEvent(self.context, comment))\n-            IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment rejected.\'),\n-                type=\'info\')\n-        else:\n-            IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment already rejected.\'),\n-                type=\'info\')\n-        came_from = self.context.REQUEST.HTTP_REFERER\n-        # if the referrer already has a came_from in it, don\'t redirect back\n-        if (len(came_from) == 0 or \'came_from=\' in came_from or\n-                not getToolByName(\n-                content_object, \'portal_url\').isURLInPortal(came_from)):\n-            came_from = content_object.absolute_url()\n-        return self.context.REQUEST.RESPONSE.redirect(came_from)\n-\n-\n class BulkActionsView(BrowserView):\n     """Call bulk action: publish/approve, delete (, reject, recall, mark as spam).\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-14T14:05:36+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/64093660ac99d994a8a5bb592afc2a6c5e5f9cd1

Style: Filter by review state: more space between options

Files changed:
M plone/app/discussion/browser/moderation.pt

b'diff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex bb7d715a..f6d217ab 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -27,6 +27,11 @@\n         <script type="text/javascript"\n             tal:attributes="src string:${context/portal_url}/++plone++plone.app.discussion.javascripts/moderation.js">\n         </script>\n+        <style>\n+            #review-comments th label {\n+                margin-right: 1em;\n+            }\n+        </style>\n \n         <h1 class="documentFirstHeading" i18n:translate="heading_moderate_comments">\n             Moderate comments\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-14T15:59:05+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/9b1eb6834b4856c2782e89779872b374cb0798a0

Upgrade step added

Upgrade applies workflow changes to existing instances

Files changed:
M plone/app/discussion/profiles/default/metadata.xml
M plone/app/discussion/upgrades.py
M plone/app/discussion/upgrades.zcml

b'diff --git a/plone/app/discussion/profiles/default/metadata.xml b/plone/app/discussion/profiles/default/metadata.xml\nindex c779e86e..49f2d5ec 100644\n--- a/plone/app/discussion/profiles/default/metadata.xml\n+++ b/plone/app/discussion/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n- <version>1001</version>\n+ <version>1002</version>\n  <dependencies>\n   <dependency>profile-plone.resource:default</dependency>\n   <dependency>profile-plone.app.registry:default</dependency>\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 1d4172f2..784184e0 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -73,3 +73,8 @@ def upgrade_comment_workflows(context):\n \n def add_js_to_plone_legacy(context):\n     context.runImportStepFromProfile(default_profile, \'plone.app.registry\')\n+\n+\n+def extend_review_workflow(context):\n+    """Apply changes made to review workflow."""\n+    upgrade_comment_workflows_retain_current_workflow(context)\ndiff --git a/plone/app/discussion/upgrades.zcml b/plone/app/discussion/upgrades.zcml\nindex 02a7e541..ae72b6ee 100644\n--- a/plone/app/discussion/upgrades.zcml\n+++ b/plone/app/discussion/upgrades.zcml\n@@ -62,4 +62,15 @@\n         />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+    source="1001"\n+    destination="1002"\n+    profile="plone.app.discussion:default">\n+    <genericsetup:upgradeStep\n+        title="Extended review workflow with states pending, published and new: rejected and spam"\n+        description="Additional states allows moderator to review history of publishing and rejection"\n+        handler=".upgrades.extend_review_workflow"\n+        />\n+</genericsetup:upgradeSteps>\n+\n </configure>\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-14T16:26:32+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/6794d95f853eaf678348008b849e2c2b4a2de8b7

Translation: label for save button on edit form

Files changed:
M plone/app/discussion/browser/comment.py

b"diff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 3b1ea47b..ef750831 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -76,7 +76,7 @@ def _redirect(self, target=''):\n         self.request.response.redirect(target)\n \n     @button.buttonAndHandler(_(u'edit_comment_form_button',\n-                               default=u'Edit comment'), name='comment')\n+                               default=u'Save'), name='comment')\n     def handleComment(self, action):\n \n         # Validate form\n"

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-16T15:32:46+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/f7ae6e49a5f146bfcb95d1f0d8e91786f2d05ea0

unique css ids

and bug fix test: editing comment: button label "save" instead of "edit comment"

Files changed:
M news/164.feature
M plone/app/discussion/browser/comments.pt
M plone/app/discussion/browser/javascripts/comments.js
M plone/app/discussion/tests/functional_test_comments.txt

b'diff --git a/news/164.feature b/news/164.feature\nindex 0810d8fe..c582a848 100644\n--- a/news/164.feature\n+++ b/news/164.feature\n@@ -1,3 +1,3 @@\n Extended existing review workflow by stati ``rejected`` and ``spam``\n Moderation view extended to handle four workflow states.\n-[ksuess]\n+[ksuess and precious input of agitator]\ndiff --git a/plone/app/discussion/browser/comments.pt b/plone/app/discussion/browser/comments.pt\nindex 1dd26b6f..6635bccd 100644\n--- a/plone/app/discussion/browser/comments.pt\n+++ b/plone/app/discussion/browser/comments.pt\n@@ -32,6 +32,7 @@\n \n             <div class="comment"\n                  tal:define="reply reply_dict/comment;\n+                             comment_id reply/getId;\n                              depth reply_dict/depth|python:0;\n                              depth python: depth > 10 and \'10\' or depth;\n                              author_home_url python:view.get_commenter_home_url(username=reply.author_username);\n@@ -42,7 +43,7 @@\n                              canDelete python:view.can_delete(reply);\n                              colorclass python:lambda x: \'state-private\' if x==\'rejected\' else (\'state-internal\' if x==\'spam\' else \'state-\'+x);"\n                  tal:attributes="class python:\'comment replyTreeLevel{depth} {state}\'.format(depth= depth, state=colorclass(review_state));\n-                                 id string:${reply/getId}"\n+                                 id comment_id"\n                  tal:condition="python:canReview or review_state == \'published\'">\n \n                 <div class="commentImage" tal:condition="showCommenterImage">\n@@ -95,7 +96,8 @@\n                               class="commentactionsform"\n                               tal:condition="python:not canDelete and isDeleteOwnCommentAllowed and view.could_delete_own(reply)"\n                               tal:attributes="action string:${reply/absolute_url}/@@delete-own-comment;\n-                                              style python:view.can_delete_own(reply) and \'display: inline\' or \'display: none\'">\n+                                              style python:view.can_delete_own(reply) and \'display: inline\' or \'display: none\';\n+                                              id string:delete-${comment_id}">\n                             <input name="form.button.DeleteComment"\n                                    class="destructive"\n                                    type="submit"\n@@ -108,7 +110,8 @@\n                               method="post"\n                               class="commentactionsform"\n                               tal:condition="python:canDelete"\n-                              tal:attributes="action string:${reply/absolute_url}/@@moderate-delete-comment">\n+                              tal:attributes="action string:${reply/absolute_url}/@@moderate-delete-comment;\n+                                              id string:delete-${comment_id}">\n                             <input name="form.button.DeleteComment"\n                                    class="destructive"\n                                    type="submit"\n@@ -120,7 +123,7 @@\n                         <tal:edit tal:condition="python:isEditCommentAllowed and canEdit">\n                           <!-- plone 5 will have auth_token available\n                                so we\'ll use modal pattern -->\n-                          <a class="pat-plone-modal context"\n+                          <a class="pat-plone-modal context commentactionsform"\n                              tal:condition="auth_token"\n                              tal:attributes="href string:${reply/absolute_url}/@@edit-comment?_authenticator=${auth_token}"\n                              i18n:translate="Edit">Edit</a>\n@@ -129,7 +132,8 @@\n                                 method="get"\n                                 class="commentactionsform"\n                                 tal:condition="not: auth_token"\n-                                tal:attributes="action string:${reply/absolute_url}/@@edit-comment">\n+                                tal:attributes="action string:${reply/absolute_url}/@@edit-comment;\n+                                                id string:edit-${comment_id}">\n                               <input name="form.button.EditComment"\n                                      class="context"\n                                      type="submit"\n@@ -148,7 +152,8 @@\n                               tal:condition="canReview"\n                               tal:repeat="action reply_dict/actions|nothing"\n                               tal:attributes="action string:${reply/absolute_url}/@@transmit-comment;\n-                                              name action/id">\n+                                              name action/id;\n+                                              id string:${action/id}-${comment_id}">\n                             <input type="hidden" name="workflow_action" tal:attributes="value action/id" />\n                             <input name="form.button.TransmitComment"\n                                    class="context"\ndiff --git a/plone/app/discussion/browser/javascripts/comments.js b/plone/app/discussion/browser/javascripts/comments.js\nindex e8ebb55a..be53bd6b 100644\n--- a/plone/app/discussion/browser/javascripts/comments.js\n+++ b/plone/app/discussion/browser/javascripts/comments.js\n@@ -5,263 +5,276 @@\n  ******************************************************************************/\n /* global require */\n \n-if(require === undefined){\n-    require = function(reqs, torun){  // jshint ignore:line\n-        \'use strict\';\n-        return torun(window.jQuery);\n-    };\n+if (require === undefined) {\n+  require = function(reqs, torun) {\n+    // jshint ignore:line\n+    "use strict";\n+    return torun(window.jQuery);\n+  };\n }\n \n-require([  // jshint ignore:line\n-    \'jquery\'\n-], function ($) {\n-    \'use strict\';\n-\n-    // This unnamed function allows us to use $ inside of a block of code\n-    // without permanently overwriting $.\n-    // http://docs.jquery.com/Using_jQuery_with_Other_Libraries\n-    /**************************************************************************\n-     * Create a reply-to-comment form right beneath the form that is passed to\n-     * the function. We do this by copying the regular comment form and\n-     * adding a hidden in_reply_to field to the form.\n-     **************************************************************************/\n-    $.createReplyForm = function (comment_div) {\n-\n-        var comment_id = comment_div.attr(\'id\');\n-\n-        var reply_button = comment_div.find(\'.reply-to-comment-button\');\n-\n-        /* Clone the reply div at the end of the page template that contains\n-         * the regular comment form.\n-         */\n-        var reply_div = $(\'#commenting\').clone(true);\n-\n-        /* Remove the ReCaptcha JS code before appending the form. If not\n-         * removed, this causes problems\n-         */\n-        reply_div.find(\'#formfield-form-widgets-captcha\')\n-                 .find(\'script\')\n-                 .remove();\n-\n-        /* Insert the cloned comment form right after the reply button of the\n-         * current comment.\n-         */\n-        reply_div.appendTo(comment_div).css(\'display\', \'none\');\n-\n-        /* Remove id=\'commenting\' attribute, since we use it to uniquely define\n+require([\n+  // jshint ignore:line\n+  "jquery"\n+], function($) {\n+  "use strict";\n+\n+  // This unnamed function allows us to use $ inside of a block of code\n+  // without permanently overwriting $.\n+  // http://docs.jquery.com/Using_jQuery_with_Other_Libraries\n+  /**************************************************************************\n+   * Create a reply-to-comment form right beneath the form that is passed to\n+   * the function. We do this by copying the regular comment form and\n+   * adding a hidden in_reply_to field to the form.\n+   **************************************************************************/\n+  $.createReplyForm = function(comment_div) {\n+    var comment_id = comment_div.attr("id");\n+\n+    var reply_button = comment_div.find(".reply-to-comment-button");\n+\n+    /* Clone the reply div at the end of the page template that contains\n+     * the regular comment form.\n+     */\n+    var reply_div = $("#commenting").clone(true);\n+\n+    /* Remove the ReCaptcha JS code before appending the form. If not\n+     * removed, this causes problems\n+     */\n+    reply_div\n+      .find("#formfield-form-widgets-captcha")\n+      .find("script")\n+      .remove();\n+\n+    /* Insert the cloned comment form right after the reply button of the\n+     * current comment.\n+     */\n+    reply_div.appendTo(comment_div).css("display", "none");\n+\n+    /* Remove id=\'commenting\' attribute, since we use it to uniquely define\n            the main reply form. */\n-        // Still belongs to class=\'reply\'\n-        reply_div.removeAttr(\'id\');\n-\n-        /* Hide the reply button (only hide, because we may want to show it\n-         * again if the user hits the cancel button).\n-         */\n-        $(reply_button).css(\'display\', \'none\');\n-\n-        /* Fetch the reply form inside the reply div */\n-        var reply_form = reply_div.find(\'form\');\n-\n-        /* Change the id of the textarea of the reply form\n-         * To avoid conflict later between textareas with same id \'form-widgets-comment-text\' while implementing a seperate instance of TinyMCE\n-         * */\n-        reply_form.find(\'#formfield-form-widgets-comment-text\').attr(\'id\', \'formfield-form-widgets-new-textarea\'+comment_id );\n-        reply_form.find(\'#form-widgets-comment-text\').attr(\'id\', \'form-widgets-new-textarea\'+comment_id );\n-\n-\n-        /* Populate the hidden \'in_reply_to\' field with the correct comment\n+    // Still belongs to class=\'reply\'\n+    reply_div.removeAttr("id");\n+\n+    /* Hide the reply button (only hide, because we may want to show it\n+     * again if the user hits the cancel button).\n+     */\n+    $(reply_button).css("display", "none");\n+\n+    /* Fetch the reply form inside the reply div */\n+    var reply_form = reply_div.find("form");\n+\n+    /* Change the id of the textarea of the reply form\n+     * To avoid conflict later between textareas with same id \'form-widgets-comment-text\' while implementing a seperate instance of TinyMCE\n+     * */\n+    reply_form\n+      .find("#formfield-form-widgets-comment-text")\n+      .attr("id", "formfield-form-widgets-new-textarea" + comment_id);\n+    reply_form\n+      .find("#form-widgets-comment-text")\n+      .attr("id", "form-widgets-new-textarea" + comment_id);\n+\n+    /* Populate the hidden \'in_reply_to\' field with the correct comment\n            id */\n-        reply_form.find(\'input[name="form.widgets.in_reply_to"]\')\n-                  .val(comment_id);\n+    reply_form.find(\'input[name="form.widgets.in_reply_to"]\').val(comment_id);\n \n-        /* Add a remove-reply-to-comment Javascript function to remove the\n+    /* Add a remove-reply-to-comment Javascript function to remove the\n            form */\n-        var cancel_reply_button = reply_div.find(\'.cancelreplytocomment\');\n-        cancel_reply_button.attr(\'id\', comment_id);\n-\n-        /* Show the cancel buttons. */\n-        reply_form.find(\'input[name="form.buttons.cancel"]\')\n-                  .css(\'display\', \'inline\');\n-\n-        /* Show the reply layer with a slide down effect */\n-        reply_div.slideDown(\'slow\');\n-\n-        /* Show the cancel button in the reply-to-comment form */\n-        cancel_reply_button.css(\'display\', \'inline\');\n-    };\n-\n-\n-    /**************************************************************************\n-     * Remove all error messages and field values from the form that is passed\n-     * to the function.\n-     **************************************************************************/\n-    $.clearForm = function (form_div) {\n-        form_div.find(\'.error\').removeClass(\'error\');\n-        form_div.find(\'.fieldErrorBox\').remove();\n-        form_div.find(\'input[type="text"]\').attr(\'value\', \'\');\n-        form_div.find(\'textarea\').attr(\'value\', \'\');\n-        /* XXX: Clean all additional form extender fields. */\n-    };\n-\n-    //#JSCOVERAGE_IF 0\n-\n-    /**************************************************************************\n-     * Window Load Function: Executes when complete page is fully loaded,\n-     * including all frames,\n-     **************************************************************************/\n-    $(window).load(function () {\n+    var cancel_reply_button = reply_div.find(".cancelreplytocomment");\n+    cancel_reply_button.attr("id", comment_id);\n+\n+    /* Show the cancel buttons. */\n+    reply_form\n+      .find(\'input[name="form.buttons.cancel"]\')\n+      .css("display", "inline");\n+\n+    /* Show the reply layer with a slide down effect */\n+    reply_div.slideDown("slow");\n+\n+    /* Show the cancel button in the reply-to-comment form */\n+    cancel_reply_button.css("display", "inline");\n+  };\n+\n+  /**************************************************************************\n+   * Remove all error messages and field values from the form that is passed\n+   * to the function.\n+   **************************************************************************/\n+  $.clearForm = function(form_div) {\n+    form_div.find(".error").removeClass("error");\n+    form_div.find(".fieldErrorBox").remove();\n+    form_div.find(\'input[type="text"]\').attr("value", "");\n+    form_div.find("textarea").attr("value", "");\n+    /* XXX: Clean all additional form extender fields. */\n+  };\n+\n+  //#JSCOVERAGE_IF 0\n+\n+  /**************************************************************************\n+   * Window Load Function: Executes when complete page is fully loaded,\n+   * including all frames,\n+   **************************************************************************/\n+  $(window).load(function() {\n+    /**********************************************************************\n+     * If the user has hit the reply button of a reply-to-comment form\n+     * (form was submitted with a value for the \'in_reply_to\' field in the\n+     * request), create a reply-to-comment form right under this comment.\n+     **********************************************************************/\n+    var post_comment_div = $("#commenting");\n+    var in_reply_to_field = post_comment_div.find(\n+      \'input[name="form.widgets.in_reply_to"]\'\n+    );\n+    if (in_reply_to_field.length !== 0 && in_reply_to_field.val() !== "") {\n+      var current_reply_id = "#" + in_reply_to_field.val();\n+      var current_reply_to_div = $(".discussion").find(current_reply_id);\n+      $.createReplyForm(current_reply_to_div);\n+      $.clearForm(post_comment_div);\n+    }\n+\n+    /**********************************************************************\n+     * If the user hits the \'reply\' button of an existing comment, create a\n+     * reply form right beneath this comment.\n+     **********************************************************************/\n+    $(".reply-to-comment-button").bind("click", function(e) {\n+      // jshint ignore:line\n+      var comment_div = $(this)\n+        .parents()\n+        .filter(".comment");\n+      $.createReplyForm(comment_div);\n+      $.clearForm(comment_div);\n+    });\n \n+    /**********************************************************************\n+     * If the user hits the \'clear\' button of an open reply-to-comment form,\n+     * remove the form and show the \'reply\' button again.\n+     **********************************************************************/\n+    $("#commenting #form-buttons-cancel").bind("click", function(e) {\n+      e.preventDefault();\n+      var reply_to_comment_button = $(this)\n+        .parents()\n+        .filter(".comment")\n+        .find(".reply-to-comment-button");\n+\n+      /* Find the reply-to-comment form and hide and remove it again. */\n+      $.reply_to_comment_form = $(this)\n+        .parents()\n+        .filter(".reply");\n+      $.reply_to_comment_form.slideUp("slow", function() {\n+        $(this).remove();\n+      });\n+\n+      /* Show the reply-to-comment button again. */\n+      reply_to_comment_button.css("display", "inline");\n+    });\n \n-        /**********************************************************************\n-         * If the user has hit the reply button of a reply-to-comment form\n-         * (form was submitted with a value for the \'in_reply_to\' field in the\n-         * request), create a reply-to-comment form right under this comment.\n-         **********************************************************************/\n-        var post_comment_div = $(\'#commenting\');\n-        var in_reply_to_field =\n-            post_comment_div.find(\'input[name="form.widgets.in_reply_to"]\');\n-        if (in_reply_to_field.length !== 0 && in_reply_to_field.val() !== \'\') {\n-            var current_reply_id = \'#\' + in_reply_to_field.val();\n-            var current_reply_to_div = $(\'.discussion\').find(current_reply_id);\n-            $.createReplyForm(current_reply_to_div);\n-            $.clearForm(post_comment_div);\n+    /**********************************************************************\n+     * Transmit a single comment.\n+     **********************************************************************/\n+    $(\'input[name="form.button.TransmitComment"]\').on("click", function() {\n+      var trigger = this;\n+      var form = $(this).parents("form");\n+      var data = $(form).serialize();\n+      var form_url = $(form).attr("action");\n+      $.ajax({\n+        type: "GET",\n+        url: form_url,\n+        data: data,\n+        context: trigger,\n+        success: function(msg) {\n+          // jshint ignore:line\n+          // remove button (trigger object can\'t be directly removed)\n+          form.find(\'input[name="form.button.TransmitComment"]\').remove();\n+          form\n+            .parents(".state-pending")\n+            .toggleClass("state-pending")\n+            .toggleClass("state-published");\n+        },\n+        error: function(msg) {\n+          // jshint ignore:line\n+          return true;\n         }\n+      });\n+      return false;\n+    });\n \n-\n-         /**********************************************************************\n-         * If the user hits the \'reply\' button of an existing comment, create a\n-         * reply form right beneath this comment.\n-         **********************************************************************/\n-        $(\'.reply-to-comment-button\').bind(\'click\', function (e) {  // jshint ignore:line\n-            var comment_div = $(this).parents().filter(\'.comment\');\n-            $.createReplyForm(comment_div);\n-            $.clearForm(comment_div);\n-        });\n-\n-\n-        /**********************************************************************\n-         * If the user hits the \'clear\' button of an open reply-to-comment form,\n-         * remove the form and show the \'reply\' button again.\n-         **********************************************************************/\n-        $(\'#commenting #form-buttons-cancel\').bind(\'click\', function (e) {\n-            e.preventDefault();\n-            var reply_to_comment_button = $(this).\n-                                              parents().\n-                                              filter(\'.comment\').\n-                                              find(\'.reply-to-comment-button\');\n-\n-            /* Find the reply-to-comment form and hide and remove it again. */\n-            $.reply_to_comment_form = $(this).parents().filter(\'.reply\');\n-            $.reply_to_comment_form.slideUp(\'slow\', function () {\n-                $(this).remove();\n-            });\n-\n-            /* Show the reply-to-comment button again. */\n-            reply_to_comment_button.css(\'display\', \'inline\');\n-\n-        });\n-\n-\n-        /**********************************************************************\n-         * Transmit a single comment.\n-         **********************************************************************/\n-        $(\'input[name="form.button.TransmitComment"]\').on(\'click\', function () {\n-            var trigger = this;\n-            var form = $(this).parents(\'form\');\n-            var data = $(form).serialize();\n-            var form_url = $(form).attr(\'action\');\n-            $.ajax({\n-                type: \'GET\',\n-                url: form_url,\n-                data: data,\n-                context: trigger,\n-                success: function (msg) {  // jshint ignore:line\n-                    // remove button (trigger object can\'t be directly removed)\n-                    form.find(\'input[name="form.button.TransmitComment"]\').remove();\n-                    form.parents(\'.state-pending\').toggleClass(\'state-pending\').toggleClass(\'state-published\');\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    return true;\n-                }\n-            });\n-            return false;\n-        });\n-\n-        /**********************************************************************\n-         * Edit a comment\n-         **********************************************************************/\n-        if($.fn.prepOverlay){\n-            $(\'form[name="edit"]\').prepOverlay({\n-                cssclass: \'overlay-edit-comment\',\n-                width: \'60%\',\n-                subtype: \'ajax\',\n-                filter: \'#content>*\'\n+    /**********************************************************************\n+     * Edit a comment\n+     **********************************************************************/\n+    if ($.fn.prepOverlay) {\n+      $(\'form[name="edit"]\').prepOverlay({\n+        cssclass: "overlay-edit-comment",\n+        width: "60%",\n+        subtype: "ajax",\n+        filter: "#content>*"\n+      });\n+    }\n+\n+    /**********************************************************************\n+     * Delete a comment and its answers.\n+     **********************************************************************/\n+    $(\'input[name="form.button.DeleteComment"]\').on("click", function() {\n+      var trigger = this;\n+      var form = $(this).parents("form");\n+      var data = $(form).serialize();\n+      var form_url = $(form).attr("action");\n+      $.ajax({\n+        type: "POST",\n+        url: form_url,\n+        data: data,\n+        context: $(trigger).parents(".comment"),\n+        success: function(data) {\n+          // jshint ignore:line\n+          var comment = $(this);\n+          var clss = comment.attr("class");\n+          // remove replies\n+          var treelevel = parseInt(\n+            clss[clss.indexOf("replyTreeLevel") + "replyTreeLevel".length],\n+            10\n+          );\n+          // selector for all the following elements of lower level\n+          var selector = ".replyTreeLevel" + treelevel;\n+          for (var i = 0; i < treelevel; i++) {\n+            selector += ", .replyTreeLevel" + i;\n+          }\n+          comment.nextUntil(selector).each(function() {\n+            $(this).fadeOut("fast", function() {\n+              $(this).remove();\n             });\n+          });\n+          // Add delete button to the parent\n+          var parent = comment.prev(\n+            \'[class*="replyTreeLevel\' + (treelevel - 1) + \'"]\'\n+          );\n+          parent.find(\'form[name="delete"]\').css("display", "inline");\n+          // remove comment\n+          $(this).fadeOut("fast", function() {\n+            $(this).remove();\n+          });\n+        },\n+        error: function(req, error) {\n+          // jshint ignore:line\n+          return true;\n         }\n-\n-        /**********************************************************************\n-         * Delete a comment and its answers.\n-         **********************************************************************/\n-        $(\'input[name="form.button.DeleteCommentComment"]\').on(\'click\', function () {\n-            var trigger = this;\n-            var form = $(this).parents(\'form\');\n-            var data = $(form).serialize();\n-            var form_url = $(form).attr(\'action\');\n-            $.ajax({\n-                type: \'POST\',\n-                url: form_url,\n-                data: data,\n-                context: $(trigger).parents(\'.comment\'),\n-                success: function (data) {  // jshint ignore:line\n-                    var comment = $(this);\n-                    var clss = comment.attr(\'class\');\n-                    // remove replies\n-                    var treelevel = parseInt(clss[clss.indexOf(\'replyTreeLevel\') + \'replyTreeLevel\'.length], 10);\n-                    // selector for all the following elements of lower level\n-                    var selector = \'.replyTreeLevel\' + treelevel;\n-                    for (var i = 0; i < treelevel; i++) {\n-                        selector += \', .replyTreeLevel\' + i;\n-                    }\n-                    comment.nextUntil(selector).each(function () {\n-                        $(this).fadeOut(\'fast\', function () {\n-                            $(this).remove();\n-                        });\n-                    });\n-                    // Add delete button to the parent\n-                    var parent = comment.prev(\'[class*="replyTreeLevel\' + (treelevel - 1) + \'"]\');\n-                    parent.find(\'form[name="delete"]\').css(\'display\', \'inline\');\n-                    // remove comment\n-                    $(this).fadeOut(\'fast\', function () {\n-                        $(this).remove();\n-                    });\n-                },\n-                error: function (req, error) {  // jshint ignore:line\n-                    return true;\n-                }\n-            });\n-            return false;\n-        });\n-\n-\n-        /**********************************************************************\n-         * By default, hide the reply and the cancel button for the regular add\n-         * comment form.\n-         **********************************************************************/\n-        $(\'.reply\').find(\'input[name="form.buttons.reply"]\')\n-                    .css(\'display\', \'none\');\n-        $(\'.reply\').find(\'input[name="form.buttons.cancel"]\')\n-                    .css(\'display\', \'none\');\n-\n-\n-        /**********************************************************************\n-         * By default, show the reply button only when Javascript is enabled.\n-         * Otherwise hide it, since the reply functions only work with JS\n-         * enabled.\n-         **********************************************************************/\n-        $(\'.reply-to-comment-button\').removeClass(\'hide\');\n-\n+      });\n+      return false;\n     });\n \n-\n-    //#JSCOVERAGE_ENDIF\n-\n+    /**********************************************************************\n+     * By default, hide the reply and the cancel button for the regular add\n+     * comment form.\n+     **********************************************************************/\n+    $(".reply")\n+      .find(\'input[name="form.buttons.reply"]\')\n+      .css("display", "none");\n+    $(".reply")\n+      .find(\'input[name="form.buttons.cancel"]\')\n+      .css("display", "none");\n+\n+    /**********************************************************************\n+     * By default, show the reply button only when Javascript is enabled.\n+     * Otherwise hide it, since the reply functions only work with JS\n+     * enabled.\n+     **********************************************************************/\n+    $(".reply-to-comment-button").removeClass("hide");\n+  });\n+\n+  //#JSCOVERAGE_ENDIF\n });\ndiff --git a/plone/app/discussion/tests/functional_test_comments.txt b/plone/app/discussion/tests/functional_test_comments.txt\nindex 89bdeccf..c78d4b8e 100644\n--- a/plone/app/discussion/tests/functional_test_comments.txt\n+++ b/plone/app/discussion/tests/functional_test_comments.txt\n@@ -285,7 +285,7 @@ Open the edit comment view\n Change and save the comment\n \n     >>> ctrl.value = \'Comment from admin / was edited\'\n-    >>> browser.getControl(\'Edit comment\').click()\n+    >>> browser.getControl(\'Save\').click()\n \n This used to trigger permissions problems in some portlet configurations.\n Check it ain\'t so.\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-01-21T12:02:09+01:00
Author: Katja Suess (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.app.discussion/commit/61545c6ef667bf75d07c437ad528bc50ee0a4d11

Moderation on commented page also with ajax like on moderation view

Files changed:
M plone/app/discussion/browser/javascripts/comments.js
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.py

b'diff --git a/plone/app/discussion/browser/javascripts/comments.js b/plone/app/discussion/browser/javascripts/comments.js\nindex be53bd6b..89ce56a3 100644\n--- a/plone/app/discussion/browser/javascripts/comments.js\n+++ b/plone/app/discussion/browser/javascripts/comments.js\n@@ -106,13 +106,109 @@ require([\n     /* XXX: Clean all additional form extender fields. */\n   };\n \n-  //#JSCOVERAGE_IF 0\n+  function init_comment_eventhandler () {\n+      /**********************************************************************\n+       * Transmit a single comment.\n+       **********************************************************************/\n+      $(\'input[name="form.button.TransmitComment"]\').on("click", function(e) {\n+        e.preventDefault();\n+        var trigger = this;\n+        var form = $(this).parents("form");\n+        var data = $(form).serialize();\n+        var form_url = $(form).attr("action");\n+        var comment_id = $(this).parents(".comment").attr("id");\n+        $.ajax({\n+          type: "GET",\n+          url: form_url,\n+          data: data,\n+          context: trigger,\n+          success: function(msg) {\n+              let url = location.href;\n+              $(this).parents(".comment").load(\n+                // loading child nodes is not enough,\n+                // class attributes are needed for visualization of workflow_state\n+                url + " #" + comment_id + ".comment",\n+                function() {\n+                  $(this).find(".comment").unwrap();\n+                  init_comment_eventhandler();\n+                  $(".pat-plone-modal").patPloneModal();\n+                }\n+              );\n+          },\n+          error: function(msg) {\n+            return true;\n+          }\n+        });\n+        return false;\n+      });\n+\n+      /**********************************************************************\n+       * Edit a comment\n+       **********************************************************************/\n+      if ($.fn.prepOverlay) {\n+        $(\'form[name="edit"]\').prepOverlay({\n+          cssclass: "overlay-edit-comment",\n+          width: "60%",\n+          subtype: "ajax",\n+          filter: "#content>*"\n+        });\n+      }\n+\n+      /**********************************************************************\n+       * Delete a comment and its answers.\n+       **********************************************************************/\n+      $(\'input[name="form.button.DeleteComment"]\').on("click", function(e) {\n+        e.preventDefault();\n+        var trigger = this;\n+        var form = $(this).parents("form");\n+        var data = $(form).serialize();\n+        var form_url = $(form).attr("action");\n+        $.ajax({\n+          type: "POST",\n+          url: form_url,\n+          data: data,\n+          context: $(trigger).parents(".comment"),\n+          success: function(data) {\n+            // jshint ignore:line\n+            var comment = $(this);\n+            var clss = comment.attr("class");\n+            // remove replies\n+            var treelevel = parseInt(\n+              clss[clss.indexOf("replyTreeLevel") + "replyTreeLevel".length],\n+              10\n+            );\n+            // selector for all the following elements of lower level\n+            var selector = ".replyTreeLevel" + treelevel;\n+            for (var i = 0; i < treelevel; i++) {\n+              selector += ", .replyTreeLevel" + i;\n+            }\n+            comment.nextUntil(selector).each(function() {\n+              $(this).fadeOut("fast", function() {\n+                $(this).remove();\n+              });\n+            });\n+            // Add delete button to the parent\n+            var parent = comment.prev(\n+              \'[class*="replyTreeLevel\' + (treelevel - 1) + \'"]\'\n+            );\n+            parent.find(\'form[name="delete"]\').css("display", "inline");\n+            // remove comment\n+            $(this).fadeOut("fast", function() {\n+              $(this).remove();\n+            });\n+          },\n+          error: function(req, error) {\n+            // jshint ignore:line\n+            return true;\n+          }\n+        });\n+        return false;\n+      });\n+  };\n+\n+  $(document).ready(function() {\n+    init_comment_eventhandler();\n \n-  /**************************************************************************\n-   * Window Load Function: Executes when complete page is fully loaded,\n-   * including all frames,\n-   **************************************************************************/\n-  $(window).load(function() {\n     /**********************************************************************\n      * If the user has hit the reply button of a reply-to-comment form\n      * (form was submitted with a value for the \'in_reply_to\' field in the\n@@ -165,98 +261,6 @@ require([\n       reply_to_comment_button.css("display", "inline");\n     });\n \n-    /**********************************************************************\n-     * Transmit a single comment.\n-     **********************************************************************/\n-    $(\'input[name="form.button.TransmitComment"]\').on("click", function() {\n-      var trigger = this;\n-      var form = $(this).parents("form");\n-      var data = $(form).serialize();\n-      var form_url = $(form).attr("action");\n-      $.ajax({\n-        type: "GET",\n-        url: form_url,\n-        data: data,\n-        context: trigger,\n-        success: function(msg) {\n-          // jshint ignore:line\n-          // remove button (trigger object can\'t be directly removed)\n-          form.find(\'input[name="form.button.TransmitComment"]\').remove();\n-          form\n-            .parents(".state-pending")\n-            .toggleClass("state-pending")\n-            .toggleClass("state-published");\n-        },\n-        error: function(msg) {\n-          // jshint ignore:line\n-          return true;\n-        }\n-      });\n-      return false;\n-    });\n-\n-    /**********************************************************************\n-     * Edit a comment\n-     **********************************************************************/\n-    if ($.fn.prepOverlay) {\n-      $(\'form[name="edit"]\').prepOverlay({\n-        cssclass: "overlay-edit-comment",\n-        width: "60%",\n-        subtype: "ajax",\n-        filter: "#content>*"\n-      });\n-    }\n-\n-    /**********************************************************************\n-     * Delete a comment and its answers.\n-     **********************************************************************/\n-    $(\'input[name="form.button.DeleteComment"]\').on("click", function() {\n-      var trigger = this;\n-      var form = $(this).parents("form");\n-      var data = $(form).serialize();\n-      var form_url = $(form).attr("action");\n-      $.ajax({\n-        type: "POST",\n-        url: form_url,\n-        data: data,\n-        context: $(trigger).parents(".comment"),\n-        success: function(data) {\n-          // jshint ignore:line\n-          var comment = $(this);\n-          var clss = comment.attr("class");\n-          // remove replies\n-          var treelevel = parseInt(\n-            clss[clss.indexOf("replyTreeLevel") + "replyTreeLevel".length],\n-            10\n-          );\n-          // selector for all the following elements of lower level\n-          var selector = ".replyTreeLevel" + treelevel;\n-          for (var i = 0; i < treelevel; i++) {\n-            selector += ", .replyTreeLevel" + i;\n-          }\n-          comment.nextUntil(selector).each(function() {\n-            $(this).fadeOut("fast", function() {\n-              $(this).remove();\n-            });\n-          });\n-          // Add delete button to the parent\n-          var parent = comment.prev(\n-            \'[class*="replyTreeLevel\' + (treelevel - 1) + \'"]\'\n-          );\n-          parent.find(\'form[name="delete"]\').css("display", "inline");\n-          // remove comment\n-          $(this).fadeOut("fast", function() {\n-            $(this).remove();\n-          });\n-        },\n-        error: function(req, error) {\n-          // jshint ignore:line\n-          return true;\n-        }\n-      });\n-      return false;\n-    });\n-\n     /**********************************************************************\n      * By default, hide the reply and the cancel button for the regular add\n      * comment form.\n@@ -276,5 +280,4 @@ require([\n     $(".reply-to-comment-button").removeClass("hide");\n   });\n \n-  //#JSCOVERAGE_ENDIF\n });\ndiff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 5275b454..f74a2d66 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -15,10 +15,10 @@ require(["jquery", "pat-registry"], function($, registry) {\n   "use strict";\n \n   $(document).ready(function() {\n-    init();\n+    init_moderation_eventhandler();\n   });\n \n-  function init() {\n+  function init_moderation_eventhandler() {\n     /**********************************************************************\n      * Delete a single comment.\n      **********************************************************************/\n@@ -83,7 +83,7 @@ require(["jquery", "pat-registry"], function($, registry) {\n             $("#review-comments").load(\n               url + " #review-comments > *",\n               function() {\n-                init();\n+                init_moderation_eventhandler();\n                 $(".pat-plone-modal").patPloneModal();\n               }\n             );\n@@ -129,7 +129,7 @@ require(["jquery", "pat-registry"], function($, registry) {\n           $("#review-comments").load(\n             window.location + " #review-comments",\n             function() {\n-              init();\n+              init_moderation_eventhandler();\n               $(".pat-plone-modal").patPloneModal();\n             }\n           );\n@@ -174,8 +174,8 @@ require(["jquery", "pat-registry"], function($, registry) {\n \n       $("#fieldset-moderate-comments")\n         .parent()\n-        .load(url + " #fieldset-moderate-comments", function() {\n-          init();\n+        .load(url + " #content form > *", function() {\n+          init_moderation_eventhandler();\n           $(".pat-plone-modal").patPloneModal();\n           let stateObj = { review_state: review_state };\n           history.pushState(stateObj, "moderate comments", url);\n@@ -224,5 +224,5 @@ require(["jquery", "pat-registry"], function($, registry) {\n         }\n       });\n     });\n-  } // end init\n+  } // end init_moderation_eventhandler\n });\ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex fa42c7be..05c0236c 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -3,6 +3,7 @@\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n+from plone import api\n from plone.app.discussion.events import CommentPublishedEvent\n from plone.app.discussion.events import CommentTransitionEvent\n from plone.app.discussion.events import CommentDeletedEvent\n@@ -260,16 +261,14 @@ def __call__(self):\n         """Call CommentTransition."""\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n-        workflowTool = getToolByName(comment, \'portal_workflow\', None)\n         workflow_action = self.request.form.get(\'workflow_action\', \'publish\')\n-        review_state = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n-        workflowTool.doActionFor(comment, workflow_action)\n+        api.content.transition(comment, transition=workflow_action)\n         comment.reindexObject()\n         content_object.reindexObject(idxs=[\'total_comments\'])\n         notify(CommentPublishedEvent(self.context, comment))\n         # for complexer workflows:\n         notify(CommentTransitionEvent(self.context, comment))\n-        review_state_new = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n+        review_state_new = api.content.get_state(comment, \'\')\n \n         comment_state_translated = self.context.restrictedTraverse("translationhelper").translate_comment_review_state(review_state_new)\n \n@@ -278,8 +277,7 @@ def __call__(self):\n             default=\'Comment ${comment_state_translated}.\',\n             mapping={"comment_state_translated": comment_state_translated})\n         translated = self.context.translate(msgid)\n-        IStatusMessage(self.context.REQUEST).addStatusMessage(\n-            translated, type=\'info\')\n+        api.portal.show_message(translated, self.context.REQUEST)\n \n         came_from = self.context.REQUEST.HTTP_REFERER\n         # if the referrer already has a came_from in it, don\'t redirect back\n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2020-03-16T23:18:14+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.discussion/commit/d39b2fcbbe6c72d36824c223859dc1e46fdaf47e

Merge pull request #166 from plone/moderation-extended

Extended Moderation of comments

Files changed:
A news/164.feature
A plone/app/discussion/tests/robot/test_moderation.robot
A plone/app/discussion/tests/test_moderation_multiple_state_view.py
M plone/app/discussion/browser/comment.py
M plone/app/discussion/browser/comments.pt
M plone/app/discussion/browser/configure.zcml
M plone/app/discussion/browser/controlpanel.py
M plone/app/discussion/browser/javascripts/comments.js
M plone/app/discussion/browser/javascripts/moderation.js
M plone/app/discussion/browser/moderation.pt
M plone/app/discussion/browser/moderation.py
M plone/app/discussion/events.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/profiles/default/metadata.xml
M plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml
M plone/app/discussion/tests/functional_test_comment_review_workflow.txt
M plone/app/discussion/tests/functional_test_comments.txt
M plone/app/discussion/tests/test_comments_viewlet.py
M plone/app/discussion/tests/test_moderation_view.py
M plone/app/discussion/tests/test_workflow.py
M plone/app/discussion/upgrades.py
M plone/app/discussion/upgrades.zcml
D plone/app/discussion/browser/comments_approved.pt

b'diff --git a/news/164.feature b/news/164.feature\nnew file mode 100644\nindex 00000000..c582a848\n--- /dev/null\n+++ b/news/164.feature\n@@ -0,0 +1,3 @@\n+Extended existing review workflow by stati ``rejected`` and ``spam``\n+Moderation view extended to handle four workflow states.\n+[ksuess and precious input of agitator]\ndiff --git a/plone/app/discussion/browser/comment.py b/plone/app/discussion/browser/comment.py\nindex 3b1ea47b..ef750831 100644\n--- a/plone/app/discussion/browser/comment.py\n+++ b/plone/app/discussion/browser/comment.py\n@@ -76,7 +76,7 @@ def _redirect(self, target=\'\'):\n         self.request.response.redirect(target)\n \n     @button.buttonAndHandler(_(u\'edit_comment_form_button\',\n-                               default=u\'Edit comment\'), name=\'comment\')\n+                               default=u\'Save\'), name=\'comment\')\n     def handleComment(self, action):\n \n         # Validate form\ndiff --git a/plone/app/discussion/browser/comments.pt b/plone/app/discussion/browser/comments.pt\nindex bf6671bc..6635bccd 100644\n--- a/plone/app/discussion/browser/comments.pt\n+++ b/plone/app/discussion/browser/comments.pt\n@@ -32,6 +32,7 @@\n \n             <div class="comment"\n                  tal:define="reply reply_dict/comment;\n+                             comment_id reply/getId;\n                              depth reply_dict/depth|python:0;\n                              depth python: depth > 10 and \'10\' or depth;\n                              author_home_url python:view.get_commenter_home_url(username=reply.author_username);\n@@ -39,9 +40,10 @@\n                              portrait_url python:view.get_commenter_portrait(reply.author_username);\n                              review_state python:wtool.getInfoFor(reply, \'review_state\', \'none\');\n                              canEdit python:view.can_edit(reply);\n-                             canDelete python:view.can_delete(reply)"\n-                 tal:attributes="class python:\'comment replyTreeLevel\'+str(depth)+\' state-\'+str(review_state);\n-                                 id string:${reply/getId}"\n+                             canDelete python:view.can_delete(reply);\n+                             colorclass python:lambda x: \'state-private\' if x==\'rejected\' else (\'state-internal\' if x==\'spam\' else \'state-\'+x);"\n+                 tal:attributes="class python:\'comment replyTreeLevel{depth} {state}\'.format(depth= depth, state=colorclass(review_state));\n+                                 id comment_id"\n                  tal:condition="python:canReview or review_state == \'published\'">\n \n                 <div class="commentImage" tal:condition="showCommenterImage">\n@@ -94,7 +96,8 @@\n                               class="commentactionsform"\n                               tal:condition="python:not canDelete and isDeleteOwnCommentAllowed and view.could_delete_own(reply)"\n                               tal:attributes="action string:${reply/absolute_url}/@@delete-own-comment;\n-                                              style python:view.can_delete_own(reply) and \'display: inline\' or \'display: none\'">\n+                                              style python:view.can_delete_own(reply) and \'display: inline\' or \'display: none\';\n+                                              id string:delete-${comment_id}">\n                             <input name="form.button.DeleteComment"\n                                    class="destructive"\n                                    type="submit"\n@@ -107,7 +110,8 @@\n                               method="post"\n                               class="commentactionsform"\n                               tal:condition="python:canDelete"\n-                              tal:attributes="action string:${reply/absolute_url}/@@moderate-delete-comment">\n+                              tal:attributes="action string:${reply/absolute_url}/@@moderate-delete-comment;\n+                                              id string:delete-${comment_id}">\n                             <input name="form.button.DeleteComment"\n                                    class="destructive"\n                                    type="submit"\n@@ -119,7 +123,7 @@\n                         <tal:edit tal:condition="python:isEditCommentAllowed and canEdit">\n                           <!-- plone 5 will have auth_token available\n                                so we\'ll use modal pattern -->\n-                          <a class="commentactionsform pat-plone-modal context"\n+                          <a class="pat-plone-modal context commentactionsform"\n                              tal:condition="auth_token"\n                              tal:attributes="href string:${reply/absolute_url}/@@edit-comment?_authenticator=${auth_token}"\n                              i18n:translate="Edit">Edit</a>\n@@ -128,7 +132,8 @@\n                                 method="get"\n                                 class="commentactionsform"\n                                 tal:condition="not: auth_token"\n-                                tal:attributes="action string:${reply/absolute_url}/@@edit-comment">\n+                                tal:attributes="action string:${reply/absolute_url}/@@edit-comment;\n+                                                id string:edit-${comment_id}">\n                               <input name="form.button.EditComment"\n                                      class="context"\n                                      type="submit"\n@@ -146,10 +151,11 @@\n                               class="commentactionsform"\n                               tal:condition="canReview"\n                               tal:repeat="action reply_dict/actions|nothing"\n-                              tal:attributes="action string:${reply/absolute_url}/@@moderate-publish-comment;\n-                                              name action/id">\n+                              tal:attributes="action string:${reply/absolute_url}/@@transmit-comment;\n+                                              name action/id;\n+                                              id string:${action/id}-${comment_id}">\n                             <input type="hidden" name="workflow_action" tal:attributes="value action/id" />\n-                            <input name="form.button.PublishComment"\n+                            <input name="form.button.TransmitComment"\n                                    class="context"\n                                    type="submit"\n                                    tal:attributes="value action/title"\ndiff --git a/plone/app/discussion/browser/comments_approved.pt b/plone/app/discussion/browser/comments_approved.pt\ndeleted file mode 100644\nindex 1149e97e..00000000\n--- a/plone/app/discussion/browser/comments_approved.pt\n+++ /dev/null\n@@ -1,129 +0,0 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n-      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-      lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n-\n-<metal:main fill-slot="main">\n-    <tal:main-macro metal:define-macro="main"\n-        tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n-                    items view/comments;\n-                    filter view/filter|nothing;\n-                    Batch python:modules[\'Products.CMFPlone\'].Batch;\n-                    b_size python:30;\n-                    b_start python:0;\n-                    b_start request/b_start | b_start;\n-                    moderation_enabled view/moderation_enabled;">\n-        <script type="text/javascript"\n-            tal:attributes="src string:${context/portal_url}/++plone++plone.app.discussion.javascripts/moderation.js">\n-        </script>\n-\n-        <h1 class="documentFirstHeading" i18n:translate="heading_comments_approved">\n-            Comments approved\n-        </h1>\n-\n-        <div class="portalMessage warning"\n-            tal:condition="not: view/moderation_enabled">\n-            <strong i18n:translate="">Warning</strong>\n-            <span tal:omit-tag="" i18n:translate="message_moderation_disabled">\n-                Moderation workflow is disabled. You have to\n-                <a i18n:name="enable_comment_workflow"\n-                   i18n:translate="message_enable_comment_workflow" href=""\n-                   tal:attributes="href string:${context/portal_url}/@@content-controlpanel?type_id=Discussion Item">\n-                enable the \'Comment Review Workflow\' for the Comment content\n-                type</a> before you can moderate comments here.\n-            </span>\n-        </div>\n-\n-        <form tal:condition="not:items">\n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n-                <p id="no-comments-message" i18n:translate="message_no_comments_approved">\n-                    No comments approved\n-                </p>\n-            </fieldset>\n-        </form>\n-\n-        <form method="post"\n-              action="#"\n-              tal:condition="items"\n-              tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n-\n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n-\n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n-\n-                <table id="review-comments" class="listing">\n-                    <thead>\n-                        <tr>\n-                            <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n-                            <th class="nosort" i18n:translate="heading_date">Date</th>\n-                            <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n-                            <th class="nosort" i18n:translate="heading_comment">Comment</th>\n-                            <th class="nosort" i18n:translate="heading_approvedby">Approved by</th>\n-                            <th class="nosort" i18n:translate="heading_action">Action</th>\n-                        </tr>\n-                    </thead>\n-                    <tbody>\n-                        <tal:block repeat="item batch">\n-                            <tr class="commentrow"\n-                                tal:define="even repeat/item/even;\n-                                            email python:getattr(item.getObject(), \'author_email\');\n-                                            item_url item/getURL;"\n-                                tal:attributes="class python: even and \'odd\' or \'even\'">\n-                                <td>\n-                                    <span tal:content="python:item.author_name or item.Creator">Name</span>\n-                                    <tal:email tal:condition="email">\n-                                        <br/>\n-                                        <a tal:attributes="href string:mailto:$email;"\n-                                           tal:content="email">Email\n-                                        </a>\n-                                    </tal:email>\n-                                </td>\n-                                <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n-                                <td>\n-                                    <a tal:attributes="href item_url"\n-                                       tal:content="item/in_response_to" />\n-                                </td>\n-                                <td>\n-                                    <span tal:replace="item/Description" />\n-                                    <a href=""\n-                                       tal:attributes="href string:$item_url/getText"\n-                                       tal:condition="python:item.Description.endswith(\'[...]\')"\n-                                       i18n:translate="label_show_full_comment_text"\n-                                       class="show-full-comment-text">show full comment text</a>\n-                                </td>\n-                                <td>\n-                                    <span class="last-history-entry"\n-                                        tal:attributes="data-href string:$item_url/@@historyview">\n-                                        last history entry\n-                                    </span>\n-                                </td>\n-\n-                                <td class="actions">\n-                                    <input type="hidden" name="selected_obj_paths:list" value="#"\n-                                           tal:attributes="value item/getURL" />\n-                                    <input id=""\n-                                           class="destructive comment-delete-button"\n-                                           type="submit"\n-                                           value="Delete"\n-                                           name="form.button.Delete"\n-                                           i18n:attributes="value label_delete;"\n-                                           tal:attributes="id item/id"\n-                                           />\n-                                </td>\n-                            </tr>\n-                        </tal:block>\n-                    </tbody>\n-                </table>\n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n-            </fieldset>\n-        </form>\n-\n-    </tal:main-macro>\n-</metal:main>\n-\n-</body>\n-</html>\ndiff --git a/plone/app/discussion/browser/configure.zcml b/plone/app/discussion/browser/configure.zcml\nindex 6caff55b..9572de5b 100644\n--- a/plone/app/discussion/browser/configure.zcml\n+++ b/plone/app/discussion/browser/configure.zcml\n@@ -29,23 +29,6 @@\n         permission="plone.app.discussion.ReviewComments"\n         />\n \n-    <!-- Approved comments view -->\n-    <browser:page\n-        for="Products.CMFCore.interfaces.ISiteRoot"\n-        name="comments-approved"\n-        layer="..interfaces.IDiscussionLayer"\n-        class=".moderation.ApprovedView"\n-        permission="plone.app.discussion.ReviewComments"\n-        />\n-\n-    <browser:page\n-        for="plone.app.layout.navigation.interfaces.INavigationRoot"\n-        name="comments-approved"\n-        layer="..interfaces.IDiscussionLayer"\n-        class=".moderation.ApprovedView"\n-        permission="plone.app.discussion.ReviewComments"\n-        />\n-\n     <!-- Moderation bulk actions view -->\n     <browser:page\n         for="Products.CMFCore.interfaces.ISiteRoot"\n@@ -108,15 +91,24 @@\n         permission="plone.app.discussion.DeleteOwnComments"\n         />\n \n-    <!-- Publish comment view -->\n+    <!-- Comment Transition -->\n     <browser:page\n         for="plone.app.discussion.interfaces.IComment"\n-        name="moderate-publish-comment"\n+        name="transmit-comment"\n         layer="..interfaces.IDiscussionLayer"\n-        class=".moderation.PublishComment"\n+        class=".moderation.CommentTransition"\n         permission="plone.app.discussion.ReviewComments"\n         />\n \n+    <browser:page\n+        for="*"\n+        name="translationhelper"\n+        layer="..interfaces.IDiscussionLayer"\n+        class=".moderation.TranslationHelper"\n+        permission="plone.app.discussion.ReviewComments"\n+        />\n+\n+\n     <!-- Comments viewlet -->\n     <browser:viewlet\n         name="plone.comments"\ndiff --git a/plone/app/discussion/browser/controlpanel.py b/plone/app/discussion/browser/controlpanel.py\nindex a8ffe957..e968367b 100644\n--- a/plone/app/discussion/browser/controlpanel.py\n+++ b/plone/app/discussion/browser/controlpanel.py\n@@ -177,15 +177,15 @@ def mailhost_warning(self):\n         return True\n \n     def custom_comment_workflow_warning(self):\n-        """Returns a warning string if a custom comment workflow is enabled.\n-        """\n+        """Return True if a custom comment workflow is enabled."""\n         wftool = getToolByName(self.context, \'portal_workflow\', None)\n         workflow_chain = wftool.getChainForPortalType(\'Discussion Item\')\n         one_state_workflow_enabled = \\\n             \'comment_one_state_workflow\' in workflow_chain\n         comment_review_workflow_enabled = \\\n             \'comment_review_workflow\' in workflow_chain\n-        if one_state_workflow_enabled or comment_review_workflow_enabled:\n+        if one_state_workflow_enabled \\\n+                or comment_review_workflow_enabled:\n             return\n         return True\n \ndiff --git a/plone/app/discussion/browser/javascripts/comments.js b/plone/app/discussion/browser/javascripts/comments.js\nindex 0c64b13d..89ce56a3 100644\n--- a/plone/app/discussion/browser/javascripts/comments.js\n+++ b/plone/app/discussion/browser/javascripts/comments.js\n@@ -5,263 +5,279 @@\n  ******************************************************************************/\n /* global require */\n \n-if(require === undefined){\n-    require = function(reqs, torun){  // jshint ignore:line\n-        \'use strict\';\n-        return torun(window.jQuery);\n-    };\n+if (require === undefined) {\n+  require = function(reqs, torun) {\n+    // jshint ignore:line\n+    "use strict";\n+    return torun(window.jQuery);\n+  };\n }\n \n-require([  // jshint ignore:line\n-    \'jquery\'\n-], function ($) {\n-    \'use strict\';\n-\n-    // This unnamed function allows us to use $ inside of a block of code\n-    // without permanently overwriting $.\n-    // http://docs.jquery.com/Using_jQuery_with_Other_Libraries\n-    /**************************************************************************\n-     * Create a reply-to-comment form right beneath the form that is passed to\n-     * the function. We do this by copying the regular comment form and\n-     * adding a hidden in_reply_to field to the form.\n-     **************************************************************************/\n-    $.createReplyForm = function (comment_div) {\n-\n-        var comment_id = comment_div.attr(\'id\');\n-\n-        var reply_button = comment_div.find(\'.reply-to-comment-button\');\n-\n-        /* Clone the reply div at the end of the page template that contains\n-         * the regular comment form.\n-         */\n-        var reply_div = $(\'#commenting\').clone(true);\n-\n-        /* Remove the ReCaptcha JS code before appending the form. If not\n-         * removed, this causes problems\n-         */\n-        reply_div.find(\'#formfield-form-widgets-captcha\')\n-                 .find(\'script\')\n-                 .remove();\n-\n-        /* Insert the cloned comment form right after the reply button of the\n-         * current comment.\n-         */\n-        reply_div.appendTo(comment_div).css(\'display\', \'none\');\n-\n-        /* Remove id=\'commenting\' attribute, since we use it to uniquely define\n+require([\n+  // jshint ignore:line\n+  "jquery"\n+], function($) {\n+  "use strict";\n+\n+  // This unnamed function allows us to use $ inside of a block of code\n+  // without permanently overwriting $.\n+  // http://docs.jquery.com/Using_jQuery_with_Other_Libraries\n+  /**************************************************************************\n+   * Create a reply-to-comment form right beneath the form that is passed to\n+   * the function. We do this by copying the regular comment form and\n+   * adding a hidden in_reply_to field to the form.\n+   **************************************************************************/\n+  $.createReplyForm = function(comment_div) {\n+    var comment_id = comment_div.attr("id");\n+\n+    var reply_button = comment_div.find(".reply-to-comment-button");\n+\n+    /* Clone the reply div at the end of the page template that contains\n+     * the regular comment form.\n+     */\n+    var reply_div = $("#commenting").clone(true);\n+\n+    /* Remove the ReCaptcha JS code before appending the form. If not\n+     * removed, this causes problems\n+     */\n+    reply_div\n+      .find("#formfield-form-widgets-captcha")\n+      .find("script")\n+      .remove();\n+\n+    /* Insert the cloned comment form right after the reply button of the\n+     * current comment.\n+     */\n+    reply_div.appendTo(comment_div).css("display", "none");\n+\n+    /* Remove id=\'commenting\' attribute, since we use it to uniquely define\n            the main reply form. */\n-        // Still belongs to class=\'reply\'\n-        reply_div.removeAttr(\'id\');\n-\n-        /* Hide the reply button (only hide, because we may want to show it\n-         * again if the user hits the cancel button).\n-         */\n-        $(reply_button).css(\'display\', \'none\');\n-\n-        /* Fetch the reply form inside the reply div */\n-        var reply_form = reply_div.find(\'form\');\n-\n-        /* Change the id of the textarea of the reply form\n-         * To avoid conflict later between textareas with same id \'form-widgets-comment-text\' while implementing a seperate instance of TinyMCE\n-         * */\n-        reply_form.find(\'#formfield-form-widgets-comment-text\').attr(\'id\', \'formfield-form-widgets-new-textarea\'+comment_id );\n-        reply_form.find(\'#form-widgets-comment-text\').attr(\'id\', \'form-widgets-new-textarea\'+comment_id );\n-\n-\n-        /* Populate the hidden \'in_reply_to\' field with the correct comment\n+    // Still belongs to class=\'reply\'\n+    reply_div.removeAttr("id");\n+\n+    /* Hide the reply button (only hide, because we may want to show it\n+     * again if the user hits the cancel button).\n+     */\n+    $(reply_button).css("display", "none");\n+\n+    /* Fetch the reply form inside the reply div */\n+    var reply_form = reply_div.find("form");\n+\n+    /* Change the id of the textarea of the reply form\n+     * To avoid conflict later between textareas with same id \'form-widgets-comment-text\' while implementing a seperate instance of TinyMCE\n+     * */\n+    reply_form\n+      .find("#formfield-form-widgets-comment-text")\n+      .attr("id", "formfield-form-widgets-new-textarea" + comment_id);\n+    reply_form\n+      .find("#form-widgets-comment-text")\n+      .attr("id", "form-widgets-new-textarea" + comment_id);\n+\n+    /* Populate the hidden \'in_reply_to\' field with the correct comment\n            id */\n-        reply_form.find(\'input[name="form.widgets.in_reply_to"]\')\n-                  .val(comment_id);\n+    reply_form.find(\'input[name="form.widgets.in_reply_to"]\').val(comment_id);\n \n-        /* Add a remove-reply-to-comment Javascript function to remove the\n+    /* Add a remove-reply-to-comment Javascript function to remove the\n            form */\n-        var cancel_reply_button = reply_div.find(\'.cancelreplytocomment\');\n-        cancel_reply_button.attr(\'id\', comment_id);\n-\n-        /* Show the cancel buttons. */\n-        reply_form.find(\'input[name="form.buttons.cancel"]\')\n-                  .css(\'display\', \'inline\');\n-\n-        /* Show the reply layer with a slide down effect */\n-        reply_div.slideDown(\'slow\');\n-\n-        /* Show the cancel button in the reply-to-comment form */\n-        cancel_reply_button.css(\'display\', \'inline\');\n-    };\n-\n-\n-    /**************************************************************************\n-     * Remove all error messages and field values from the form that is passed\n-     * to the function.\n-     **************************************************************************/\n-    $.clearForm = function (form_div) {\n-        form_div.find(\'.error\').removeClass(\'error\');\n-        form_div.find(\'.fieldErrorBox\').remove();\n-        form_div.find(\'input[type="text"]\').attr(\'value\', \'\');\n-        form_div.find(\'textarea\').attr(\'value\', \'\');\n-        /* XXX: Clean all additional form extender fields. */\n-    };\n-\n-    //#JSCOVERAGE_IF 0\n-\n-    /**************************************************************************\n-     * Window Load Function: Executes when complete page is fully loaded,\n-     * including all frames,\n-     **************************************************************************/\n-    $(window).load(function () {\n-\n-\n-        /**********************************************************************\n-         * If the user has hit the reply button of a reply-to-comment form\n-         * (form was submitted with a value for the \'in_reply_to\' field in the\n-         * request), create a reply-to-comment form right under this comment.\n-         **********************************************************************/\n-        var post_comment_div = $(\'#commenting\');\n-        var in_reply_to_field =\n-            post_comment_div.find(\'input[name="form.widgets.in_reply_to"]\');\n-        if (in_reply_to_field.length !== 0 && in_reply_to_field.val() !== \'\') {\n-            var current_reply_id = \'#\' + in_reply_to_field.val();\n-            var current_reply_to_div = $(\'.discussion\').find(current_reply_id);\n-            $.createReplyForm(current_reply_to_div);\n-            $.clearForm(post_comment_div);\n-        }\n-\n-\n-         /**********************************************************************\n-         * If the user hits the \'reply\' button of an existing comment, create a\n-         * reply form right beneath this comment.\n-         **********************************************************************/\n-        $(\'.reply-to-comment-button\').bind(\'click\', function (e) {  // jshint ignore:line\n-            var comment_div = $(this).parents().filter(\'.comment\');\n-            $.createReplyForm(comment_div);\n-            $.clearForm(comment_div);\n-        });\n-\n-\n-        /**********************************************************************\n-         * If the user hits the \'clear\' button of an open reply-to-comment form,\n-         * remove the form and show the \'reply\' button again.\n-         **********************************************************************/\n-        $(\'#commenting #form-buttons-cancel\').bind(\'click\', function (e) {\n-            e.preventDefault();\n-            var reply_to_comment_button = $(this).\n-                                              parents().\n-                                              filter(\'.comment\').\n-                                              find(\'.reply-to-comment-button\');\n-\n-            /* Find the reply-to-comment form and hide and remove it again. */\n-            $.reply_to_comment_form = $(this).parents().filter(\'.reply\');\n-            $.reply_to_comment_form.slideUp(\'slow\', function () {\n-                $(this).remove();\n-            });\n-\n-            /* Show the reply-to-comment button again. */\n-            reply_to_comment_button.css(\'display\', \'inline\');\n-\n-        });\n-\n-\n-        /**********************************************************************\n-         * Publish a single comment.\n-         **********************************************************************/\n-        $(\'input[name="form.button.PublishComment"]\').on(\'click\', function () {\n-            var trigger = this;\n-            var form = $(this).parents(\'form\');\n-            var data = $(form).serialize();\n-            var form_url = $(form).attr(\'action\');\n-            $.ajax({\n-                type: \'GET\',\n-                url: form_url,\n-                data: data,\n-                context: trigger,\n-                success: function (msg) {  // jshint ignore:line\n-                    // remove button (trigger object can\'t be directly removed)\n-                    form.find(\'input[name="form.button.PublishComment"]\').remove();\n-                    form.parents(\'.state-pending\').toggleClass(\'state-pending\').toggleClass(\'state-published\');\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    return true;\n+    var cancel_reply_button = reply_div.find(".cancelreplytocomment");\n+    cancel_reply_button.attr("id", comment_id);\n+\n+    /* Show the cancel buttons. */\n+    reply_form\n+      .find(\'input[name="form.buttons.cancel"]\')\n+      .css("display", "inline");\n+\n+    /* Show the reply layer with a slide down effect */\n+    reply_div.slideDown("slow");\n+\n+    /* Show the cancel button in the reply-to-comment form */\n+    cancel_reply_button.css("display", "inline");\n+  };\n+\n+  /**************************************************************************\n+   * Remove all error messages and field values from the form that is passed\n+   * to the function.\n+   **************************************************************************/\n+  $.clearForm = function(form_div) {\n+    form_div.find(".error").removeClass("error");\n+    form_div.find(".fieldErrorBox").remove();\n+    form_div.find(\'input[type="text"]\').attr("value", "");\n+    form_div.find("textarea").attr("value", "");\n+    /* XXX: Clean all additional form extender fields. */\n+  };\n+\n+  function init_comment_eventhandler () {\n+      /**********************************************************************\n+       * Transmit a single comment.\n+       **********************************************************************/\n+      $(\'input[name="form.button.TransmitComment"]\').on("click", function(e) {\n+        e.preventDefault();\n+        var trigger = this;\n+        var form = $(this).parents("form");\n+        var data = $(form).serialize();\n+        var form_url = $(form).attr("action");\n+        var comment_id = $(this).parents(".comment").attr("id");\n+        $.ajax({\n+          type: "GET",\n+          url: form_url,\n+          data: data,\n+          context: trigger,\n+          success: function(msg) {\n+              let url = location.href;\n+              $(this).parents(".comment").load(\n+                // loading child nodes is not enough,\n+                // class attributes are needed for visualization of workflow_state\n+                url + " #" + comment_id + ".comment",\n+                function() {\n+                  $(this).find(".comment").unwrap();\n+                  init_comment_eventhandler();\n+                  $(".pat-plone-modal").patPloneModal();\n                 }\n-            });\n-            return false;\n+              );\n+          },\n+          error: function(msg) {\n+            return true;\n+          }\n         });\n-\n-        /**********************************************************************\n-         * Edit a comment\n-         **********************************************************************/\n-        if($.fn.prepOverlay){\n-            $(\'form[name="edit"]\').prepOverlay({\n-                cssclass: \'overlay-edit-comment\',\n-                width: \'60%\',\n-                subtype: \'ajax\',\n-                filter: \'#content>*\'\n+        return false;\n+      });\n+\n+      /**********************************************************************\n+       * Edit a comment\n+       **********************************************************************/\n+      if ($.fn.prepOverlay) {\n+        $(\'form[name="edit"]\').prepOverlay({\n+          cssclass: "overlay-edit-comment",\n+          width: "60%",\n+          subtype: "ajax",\n+          filter: "#content>*"\n+        });\n+      }\n+\n+      /**********************************************************************\n+       * Delete a comment and its answers.\n+       **********************************************************************/\n+      $(\'input[name="form.button.DeleteComment"]\').on("click", function(e) {\n+        e.preventDefault();\n+        var trigger = this;\n+        var form = $(this).parents("form");\n+        var data = $(form).serialize();\n+        var form_url = $(form).attr("action");\n+        $.ajax({\n+          type: "POST",\n+          url: form_url,\n+          data: data,\n+          context: $(trigger).parents(".comment"),\n+          success: function(data) {\n+            // jshint ignore:line\n+            var comment = $(this);\n+            var clss = comment.attr("class");\n+            // remove replies\n+            var treelevel = parseInt(\n+              clss[clss.indexOf("replyTreeLevel") + "replyTreeLevel".length],\n+              10\n+            );\n+            // selector for all the following elements of lower level\n+            var selector = ".replyTreeLevel" + treelevel;\n+            for (var i = 0; i < treelevel; i++) {\n+              selector += ", .replyTreeLevel" + i;\n+            }\n+            comment.nextUntil(selector).each(function() {\n+              $(this).fadeOut("fast", function() {\n+                $(this).remove();\n+              });\n             });\n-        }\n-\n-        /**********************************************************************\n-         * Delete a comment and its answers.\n-         **********************************************************************/\n-        $(\'input[name="form.button.DeleteComment"]\').on(\'click\', function () {\n-            var trigger = this;\n-            var form = $(this).parents(\'form\');\n-            var data = $(form).serialize();\n-            var form_url = $(form).attr(\'action\');\n-            $.ajax({\n-                type: \'POST\',\n-                url: form_url,\n-                data: data,\n-                context: $(trigger).parents(\'.comment\'),\n-                success: function (data) {  // jshint ignore:line\n-                    var comment = $(this);\n-                    var clss = comment.attr(\'class\');\n-                    // remove replies\n-                    var treelevel = parseInt(clss[clss.indexOf(\'replyTreeLevel\') + \'replyTreeLevel\'.length], 10);\n-                    // selector for all the following elements of lower level\n-                    var selector = \'.replyTreeLevel\' + treelevel;\n-                    for (var i = 0; i < treelevel; i++) {\n-                        selector += \', .replyTreeLevel\' + i;\n-                    }\n-                    comment.nextUntil(selector).each(function () {\n-                        $(this).fadeOut(\'fast\', function () {\n-                            $(this).remove();\n-                        });\n-                    });\n-                    // Add delete button to the parent\n-                    var parent = comment.prev(\'[class*="replyTreeLevel\' + (treelevel - 1) + \'"]\');\n-                    parent.find(\'form[name="delete"]\').css(\'display\', \'inline\');\n-                    // remove comment\n-                    $(this).fadeOut(\'fast\', function () {\n-                        $(this).remove();\n-                    });\n-                },\n-                error: function (req, error) {  // jshint ignore:line\n-                    return true;\n-                }\n+            // Add delete button to the parent\n+            var parent = comment.prev(\n+              \'[class*="replyTreeLevel\' + (treelevel - 1) + \'"]\'\n+            );\n+            parent.find(\'form[name="delete"]\').css("display", "inline");\n+            // remove comment\n+            $(this).fadeOut("fast", function() {\n+              $(this).remove();\n             });\n-            return false;\n+          },\n+          error: function(req, error) {\n+            // jshint ignore:line\n+            return true;\n+          }\n         });\n-\n-\n-        /**********************************************************************\n-         * By default, hide the reply and the cancel button for the regular add\n-         * comment form.\n-         **********************************************************************/\n-        $(\'.reply\').find(\'input[name="form.buttons.reply"]\')\n-                    .css(\'display\', \'none\');\n-        $(\'.reply\').find(\'input[name="form.buttons.cancel"]\')\n-                    .css(\'display\', \'none\');\n-\n-\n-        /**********************************************************************\n-         * By default, show the reply button only when Javascript is enabled.\n-         * Otherwise hide it, since the reply functions only work with JS\n-         * enabled.\n-         **********************************************************************/\n-        $(\'.reply-to-comment-button\').removeClass(\'hide\');\n-\n+        return false;\n+      });\n+  };\n+\n+  $(document).ready(function() {\n+    init_comment_eventhandler();\n+\n+    /**********************************************************************\n+     * If the user has hit the reply button of a reply-to-comment form\n+     * (form was submitted with a value for the \'in_reply_to\' field in the\n+     * request), create a reply-to-comment form right under this comment.\n+     **********************************************************************/\n+    var post_comment_div = $("#commenting");\n+    var in_reply_to_field = post_comment_div.find(\n+      \'input[name="form.widgets.in_reply_to"]\'\n+    );\n+    if (in_reply_to_field.length !== 0 && in_reply_to_field.val() !== "") {\n+      var current_reply_id = "#" + in_reply_to_field.val();\n+      var current_reply_to_div = $(".discussion").find(current_reply_id);\n+      $.createReplyForm(current_reply_to_div);\n+      $.clearForm(post_comment_div);\n+    }\n+\n+    /**********************************************************************\n+     * If the user hits the \'reply\' button of an existing comment, create a\n+     * reply form right beneath this comment.\n+     **********************************************************************/\n+    $(".reply-to-comment-button").bind("click", function(e) {\n+      // jshint ignore:line\n+      var comment_div = $(this)\n+        .parents()\n+        .filter(".comment");\n+      $.createReplyForm(comment_div);\n+      $.clearForm(comment_div);\n     });\n \n+    /**********************************************************************\n+     * If the user hits the \'clear\' button of an open reply-to-comment form,\n+     * remove the form and show the \'reply\' button again.\n+     **********************************************************************/\n+    $("#commenting #form-buttons-cancel").bind("click", function(e) {\n+      e.preventDefault();\n+      var reply_to_comment_button = $(this)\n+        .parents()\n+        .filter(".comment")\n+        .find(".reply-to-comment-button");\n+\n+      /* Find the reply-to-comment form and hide and remove it again. */\n+      $.reply_to_comment_form = $(this)\n+        .parents()\n+        .filter(".reply");\n+      $.reply_to_comment_form.slideUp("slow", function() {\n+        $(this).remove();\n+      });\n+\n+      /* Show the reply-to-comment button again. */\n+      reply_to_comment_button.css("display", "inline");\n+    });\n \n-    //#JSCOVERAGE_ENDIF\n+    /**********************************************************************\n+     * By default, hide the reply and the cancel button for the regular add\n+     * comment form.\n+     **********************************************************************/\n+    $(".reply")\n+      .find(\'input[name="form.buttons.reply"]\')\n+      .css("display", "none");\n+    $(".reply")\n+      .find(\'input[name="form.buttons.cancel"]\')\n+      .css("display", "none");\n+\n+    /**********************************************************************\n+     * By default, show the reply button only when Javascript is enabled.\n+     * Otherwise hide it, since the reply functions only work with JS\n+     * enabled.\n+     **********************************************************************/\n+    $(".reply-to-comment-button").removeClass("hide");\n+  });\n \n });\ndiff --git a/plone/app/discussion/browser/javascripts/moderation.js b/plone/app/discussion/browser/javascripts/moderation.js\nindex 2df2b3fe..f74a2d66 100644\n--- a/plone/app/discussion/browser/javascripts/moderation.js\n+++ b/plone/app/discussion/browser/javascripts/moderation.js\n@@ -1,182 +1,228 @@\n /******************************************************************************\n  *\n- * jQuery functions for the plone.app.discussion bulk moderation.\n+ * jQuery functions for the plone.app.discussion moderation.\n  *\n  ******************************************************************************/\n-/* global require, alert */\n-/* jshint quotmark: false */\n \n-if(require === undefined){\n-    require = function(reqs, torun){  // jshint ignore:line\n-        \'use strict\';\n-        return torun(window.jQuery);\n-    };\n+if (require === undefined) {\n+  require = function(reqs, torun) {\n+    "use strict";\n+    return torun(window.jQuery);\n+  };\n }\n \n-require([  // jshint ignore:line\n-    \'jquery\'\n-], function ($) {\n-    \'use strict\';\n-    // This unnamed function allows us to use $ inside of a block of code\n-    // without permanently overwriting $.\n-    // http://docs.jquery.com/Using_jQuery_with_Other_Libraries\n-\n-    //#JSCOVERAGE_IF 0\n-\n-    /**************************************************************************\n-     * Document Ready Function: Executes when DOM is ready.\n-     **************************************************************************/\n-    $(document).ready(function () {\n-\n-        /**********************************************************************\n-         * Delete a single comment.\n-         **********************************************************************/\n-        $("input[name=\'form.button.Delete\']").click(function (e) {\n-            e.preventDefault();\n-            var row = $(this).parent().parent();\n-            var path = $(row).find("[name=\'selected_obj_paths:list\']").attr("value");\n-            var auth_key = $(\'input[name="_authenticator"]\').val();\n-            var target = path + "/@@moderate-delete-comment?_authenticator=" + auth_key;\n-            $.ajax({\n-                type: "GET",\n-                url: target,\n-                success: function (msg) {  // jshint ignore:line\n-                    // fade out row\n-                    $(row).fadeOut("normal", function () {\n-                        $(this).remove();\n-                    });\n-                    // reload page if all comments have been removed\n-                    var comments = $("table#review-comments > tbody > tr");\n-                    if (comments.length === 1) {\n-                        location.reload();\n-                    }\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    alert("Error sending AJAX request:" + target);\n-                }\n-            });\n-        });\n-\n-\n-        /**********************************************************************\n-         * Publish a single comment.\n-         **********************************************************************/\n-        $("input[name=\'form.button.Publish\']").click(function (e) {\n-            e.preventDefault();\n-            var row = $(this).parent().parent();\n-            var path = $(row).find("[name=\'selected_obj_paths:list\']").attr("value");\n-            var auth_key = $(\'input[name="_authenticator"]\').val();\n-            var target = path + "/@@moderate-publish-comment?_authenticator=" + auth_key;\n-            $.ajax({\n-                type: "GET",\n-                url: target,\n-                success: function (msg) {  // jshint ignore:line\n-                    // fade out row\n-                    $(row).fadeOut("normal", function () {\n-                        $(this).remove();\n-                    });\n-                    // reload page if all comments have been removed\n-                    var comments = $("table#review-comments > tbody > tr");\n-                    if (comments.length === 1) {\n-                        location.reload();\n-                    }\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    alert("Error sending AJAX request:" + target);\n-                }\n-            });\n-        });\n-\n-\n-        /**********************************************************************\n-         * Bulk actions for comments (delete, publish)\n-         **********************************************************************/\n-        $("input[name=\'form.button.BulkAction\']").click(function (e) {\n-            e.preventDefault();\n-            var form = $(this).parents("form");\n-            var target = $(form).attr(\'action\');\n-            var params = $(form).serialize();\n-            var valArray = $(\'input:checkbox:checked\');\n-            var selectField = $(form).find("[name=\'form.select.BulkAction\']");\n-            if (selectField.val() === \'-1\') {\n-                // XXX: translate message\n-                alert("You haven\'t selected a bulk action. Please select one.");\n-            } else if (valArray.length === 0) {\n-                // XXX: translate message\n-                alert("You haven\'t selected any comment for this bulk action." +\n-                      "Please select at least one comment.");\n-            } else {\n-                $.post(target, params, function (data) {  // jshint ignore:line\n-                    valArray.each(function () {\n-                        /* Remove all selected lines. */\n-                        var row = $(this).parent().parent();\n-                        row.fadeOut("normal", function () {\n-                            row.remove();\n-                        });\n-                    });\n-                    // reload page if all comments have been removed\n-                    var comments = $("table#review-comments > tbody > tr");\n-                    if (comments.length <= valArray.length) {\n-                        location.reload();\n-                    }\n-                });\n-                // reset the bulkaction select\n-                selectField.find("option[value=\'-1\']").attr(\'selected\', \'selected\');\n-            }\n-        });\n+require(["jquery", "pat-registry"], function($, registry) {\n+  "use strict";\n+\n+  $(document).ready(function() {\n+    init_moderation_eventhandler();\n+  });\n+\n+  function init_moderation_eventhandler() {\n+    /**********************************************************************\n+     * Delete a single comment.\n+     **********************************************************************/\n+    $("input[name=\'form.button.moderation.DeleteComment\']").click(function(e) {\n+      e.preventDefault();\n+      var row = $(this).closest("tr");\n+      var path = row.find("[name=\'selected_obj_paths:list\']").attr("value");\n+      var auth_key = $(\'input[name="_authenticator"]\').val();\n+      var target =\n+        path + "/@@moderate-delete-comment?_authenticator=" + auth_key;\n+      $.ajax({\n+        type: "GET",\n+        url: target,\n+        success: function(msg) {\n+          // fade out row\n+          row.fadeOut(250).fadeIn(250, function() {\n+            row.remove();\n+          });\n+          // reload page if all comments have been removed\n+          var comments = $("table#review-comments > tbody > tr");\n+          if (comments.length === 1) {\n+            location.reload();\n+          }\n+        },\n+        error: function(msg) {\n+          alert("Error sending AJAX request:" + target);\n+        }\n+      });\n+    });\n \n+    /**********************************************************************\n+     * Transmit a single comment.\n+     **********************************************************************/\n+    $(\'input[name="form.button.moderation.TransmitComment"]\').click(function(\n+      e\n+    ) {\n+      e.preventDefault();\n+      let button = $(this);\n+      var row = $(this).closest("tr");\n+      var path = $(row)\n+        .find("[name=\'selected_obj_paths:list\']")\n+        .attr("value");\n+      var workflow_action = $(this).attr("data-transition");\n+      var auth_key = $(\'input[name="_authenticator"]\').val();\n+      // distinction of workflow_action\n+      var target =\n+        path +\n+        "/@@transmit-comment?_authenticator=" +\n+        auth_key +\n+        "&workflow_action=" +\n+        workflow_action;\n+      var moderate =\n+        $(this)\n+          .closest("fieldset")\n+          .attr("id") == "fieldset-moderate-comments";\n+      $.ajax({\n+        type: "GET",\n+        url: target,\n+        success: function(msg) {\n+          if (moderate) {\n+            let url = location.href;\n+            $("#review-comments").load(\n+              url + " #review-comments > *",\n+              function() {\n+                init_moderation_eventhandler();\n+                $(".pat-plone-modal").patPloneModal();\n+              }\n+            );\n+          } else {\n+            location.reload();\n+          }\n+        },\n+        error: function(msg) {\n+          alert(\n+            "Error transmitting comment. (Error sending AJAX request:" +\n+              target +\n+              ")"\n+          );\n+        }\n+      });\n+    });\n \n-        /**********************************************************************\n-         * Check or uncheck all checkboxes from the batch moderation page.\n-         **********************************************************************/\n-        $("input[name=\'check_all\']").click(function () {\n-            if ($(this).val() === \'0\') {\n-                $(this).parents("table")\n-                       .find("input:checkbox")\n-                       .attr("checked", "checked");\n-                $(this).val("1");\n-            } else {\n-                $(this).parents("table")\n-                       .find("input:checkbox")\n-                       .attr("checked", "");\n-                $(this).val("0");\n+    /**********************************************************************\n+     * Bulk actions for comments (delete, publish)\n+     **********************************************************************/\n+    $("input[name=\'form.button.BulkAction\']").click(function(e) {\n+      e.preventDefault();\n+      var form = $(this).closest("form");\n+      var target = $(form).attr("action");\n+      var params = $(form).serialize();\n+      var valArray = $("input:checkbox:checked");\n+      var selectField = $(form).find("[name=\'form.select.BulkAction\']");\n+\n+      if (selectField.val() === "-1") {\n+        // TODO: translate message\n+        alert("You haven\'t selected a bulk action. Please select one.");\n+      } else if (valArray.length === 0) {\n+        // TODO: translate message\n+        alert(\n+          "You haven\'t selected any comment for this bulk action." +\n+            "Please select at least one comment."\n+        );\n+      } else {\n+        $.post(target, params, function(data) {\n+          // reset the bulkaction select\n+          selectField.find("option[value=\'-1\']").attr("selected", "selected");\n+          // reload filtered comments\n+          $("#review-comments").load(\n+            window.location + " #review-comments",\n+            function() {\n+              init_moderation_eventhandler();\n+              $(".pat-plone-modal").patPloneModal();\n             }\n+          );\n         });\n+      }\n+    });\n \n+    /**********************************************************************\n+     * Check or uncheck all checkboxes from the batch moderation page.\n+     **********************************************************************/\n+    $("input[name=\'check_all\']").click(function() {\n+      if ($(this).val() === "0") {\n+        $(this)\n+          .parents("table")\n+          .find("input:checkbox")\n+          .prop("checked", true);\n+        $(this).val("1");\n+      } else {\n+        $(this)\n+          .parents("table")\n+          .find("input:checkbox")\n+          .prop("checked", false);\n+        $(this).val("0");\n+      }\n+    });\n \n-        /**********************************************************************\n-         * Show full text of a comment in the batch moderation page.\n-         **********************************************************************/\n-        $(".show-full-comment-text").click(function (e) {\n-            e.preventDefault();\n-            var target = $(this).attr("href");\n-            var td = $(this).parent();\n-            $.ajax({\n-                type: "GET",\n-                url: target,\n-                data: "",\n-                success: function (data) {\n-                    // show full text\n-                    td.replaceWith("<td>" + data + "</td>");\n-                },\n-                error: function (msg) {  // jshint ignore:line\n-                    alert("Error getting full comment text:" + target);\n-                }\n-            });\n-        });\n-\n-\n-        /**********************************************************************\n-         * Comments approved: Load history for approved date.\n-         **********************************************************************/\n-        $(".last-history-entry").each(function() {\n-            $(this).load($(this).attr("data-href") + " .historyByLine", function() {\n-                $(this).children(".historyByLine").last().remove();\n-            });\n+    /**********************************************************************\n+     * select comments with review_state\n+     **********************************************************************/\n+\n+    $("input[name=\'review_state\']").click(function() {\n+      let review_state = $(this).val();\n+      let url = location.href;\n+      if (location.search) {\n+        url = location.href.replace(\n+          location.search,\n+          "?review_state=" + review_state\n+        );\n+      } else {\n+        url = location.href + "?review_state=" + review_state;\n+      }\n+\n+      $("#fieldset-moderate-comments")\n+        .parent()\n+        .load(url + " #content form > *", function() {\n+          init_moderation_eventhandler();\n+          $(".pat-plone-modal").patPloneModal();\n+          let stateObj = { review_state: review_state };\n+          history.pushState(stateObj, "moderate comments", url);\n         });\n-\n     });\n \n-    //#JSCOVERAGE_ENDIF\n+    /**********************************************************************\n+     * Show full text of a comment in the batch moderation page.\n+     **********************************************************************/\n+    $(".show-full-comment-text").click(function(e) {\n+      e.preventDefault();\n+      var target = $(this).attr("href");\n+      var parent = $(this).parent();\n+      $.ajax({\n+        type: "GET",\n+        url: target,\n+        data: "",\n+        success: function(data) {\n+          // show full text\n+          parent.html(data);\n+        },\n+        error: function(msg) {\n+          alert("Error getting full comment text:" + target);\n+        }\n+      });\n+    });\n \n+    /**********************************************************************\n+     * Comments published: Load history for publishing date.\n+     **********************************************************************/\n+    $(".last-history-entry").each(function() {\n+      var lasthistoryentry = $(this);\n+      $.ajax({\n+        url: lasthistoryentry.attr("data-href"),\n+        success: function(data) {\n+          lasthistoryentry.html(\n+            $(data)\n+              .find(".historyByLine")\n+              .first()\n+          );\n+          // format date\n+          registry.scan(lasthistoryentry);\n+        },\n+        error: function(msg) {\n+          console.error("Error getting history.");\n+        }\n+      });\n+    });\n+  } // end init_moderation_eventhandler\n });\ndiff --git a/plone/app/discussion/browser/moderation.pt b/plone/app/discussion/browser/moderation.pt\nindex 5cef7448..f6d217ab 100644\n--- a/plone/app/discussion/browser/moderation.pt\n+++ b/plone/app/discussion/browser/moderation.pt\n@@ -7,31 +7,39 @@\n       i18n:domain="plone">\n <body>\n \n+<metal:override fill-slot="top_slot"\n+    tal:define="disable_column_one python:request.set(\'disable_plone.leftcolumn\',1);\n+                disable_column_two python:request.set(\'disable_plone.rightcolumn\',1);"/>\n+\n <metal:main fill-slot="main">\n     <tal:main-macro metal:define-macro="main"\n         tal:define="toLocalizedTime nocall:context/@@plone/toLocalizedTime;\n                     items view/comments;\n-                    filter view/filter|nothing;\n+                    filter request/review_state|nothing;\n                     Batch python:modules[\'Products.CMFPlone\'].Batch;\n                     b_size python:30;\n                     b_start python:0;\n                     b_start request/b_start | b_start;\n-                    moderation_enabled view/moderation_enabled;">\n+                    moderation_enabled view/moderation_enabled;\n+                    colorclass python:lambda x: \'state-private\' if x==\'rejected\' else (\'state-internal\' if x==\'spam\' else \'state-\'+x);\n+                    translationhelper nocall:context/@@translationhelper;\n+                    ">\n         <script type="text/javascript"\n             tal:attributes="src string:${context/portal_url}/++plone++plone.app.discussion.javascripts/moderation.js">\n         </script>\n+        <style>\n+            #review-comments th label {\n+                margin-right: 1em;\n+            }\n+        </style>\n \n         <h1 class="documentFirstHeading" i18n:translate="heading_moderate_comments">\n             Moderate comments\n         </h1>\n-        <p>\n-            <a tal:attributes="href string:${context/@@plone_portal_state/navigation_root_url}/comments-approved;">&gt; <span \n-                i18n:translate="heading_comments_approved">Comments approved</span></a>\n-        </p>\n \n         <div class="portalMessage warning"\n              role="status"\n-             tal:condition="not: view/moderation_enabled">\n+             tal:condition="not: moderation_enabled">\n             <strong i18n:translate="">Warning</strong>\n             <span tal:omit-tag="" i18n:translate="message_moderation_disabled">\n                 Moderation workflow is disabled. You have to\n@@ -43,120 +51,162 @@\n             </span>\n         </div>\n \n-        <form tal:condition="not:items">\n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n-                <p id="no-comments-message" i18n:translate="message_nothing_to_moderate">\n-                    No comments to moderate.\n-                </p>\n-            </fieldset>\n-        </form>\n+      <form\n+            method="post"\n+            action="#"\n+            tal:condition="moderation_enabled"\n+            tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n+            tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n+          <fieldset id="fieldset-moderate-comments" class="formPanel">\n \n-        <form method="post"\n-              action="#"\n-              tal:attributes="action string:${context/absolute_url}/@@bulk-actions"\n-              tal:condition="items"\n-              tal:define="batch python:Batch(items, b_size, int(b_start), orphan=1);">\n+              <div metal:use-macro="here/batch_macros/macros/navigation" />\n+              <table id="review-comments" class="listing">\n+                  <thead>\n+                      <tr>\n+                          <th colspan="7">\n+                              <fieldset tal:condition="view/moderation_multiple_state_enabled">\n+                                <input type="radio" id="all" name="review_state" value="all"\n+                                    tal:attributes="checked python:request.review_state==\'all\'">\n+                                <label for="all" i18n:translate="">all</label>\n+                                <tal:workflow-filter tal:repeat="review_state python:[\'pending\', \'published\', \'rejected\', \'spam\']">\n+                                    <input type="radio" name="review_state"\n+                                        tal:attributes="\n+                                            value review_state;\n+                                            id review_state;\n+                                            checked python:request.review_state==review_state">\n+                                    <label tal:attributes="for review_state"><span tal:content="python:translationhelper.translate_comment_review_state(review_state)">review_state</span></label>\n+                                </tal:workflow-filter>\n+                              </fieldset>\n+                          </th>\n+                      </tr>\n+                      <tr tal:condition="items">\n+                          <th id="bulkactions" class="nosort" colspan="7">\n+                              <select name="form.select.BulkAction">\n+                                  <option selected="selected" value="-1" i18n:translate="title_bulkactions">Bulk Actions</option>\n+                                  <tal:comment tal:replace="nothing"></tal:comment>\n+                                  <option value="publish"\n+                                          i18n:translate="bulkactions_publish"\n+                                          tal:condition="python: filter != \'published\'">Approve</option>\n+                                  <option value="mark_as_spam"\n+                                          tal:condition="python: filter != \'spam\'">Spam</option>\n+                                  <option value="delete" i18n:translate="bulkactions_delete">Delete</option>\n+                              </select>\n+                              <input type="hidden" name="filter" tal:attributes="value filter"/>\n+                              <input id="dobulkaction"\n+                                     type="submit"\n+                                     class="standalone allowMultiSubmit"\n+                                     value="Apply"\n+                                     name="form.button.BulkAction"\n+                                     i18n:attributes="value label_apply;" />\n+                          </th>\n+                      </tr>\n+                      <tr tal:condition="items">\n+                          <th class="nosort"><input name="check_all" type="checkbox" value="0" /></th>\n+                          <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n+                          <th class="nosort" i18n:translate="heading_date">Date</th>\n+                          <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n+                          <th class="nosort" i18n:translate="heading_comment">Comment</th>\n+                          <th class="nosort" i18n:translate="heading_changedby">Last Action</th>\n+                      </tr>\n+                  </thead>\n+                  <tbody>\n+                      <tal:block repeat="item batch"\n+                          tal:condition="items">\n+                          <tr class="commentrow"\n+                              tal:define="even repeat/item/even;\n+                                          item_obj item/getObject;\n+                                          email item_obj/author_email;\n+                                          item_url item/getURL;"\n+                              tal:attributes="class python: even and \'odd\' or \'even\'">\n+                              <td class="notDraggable">\n+                                  <input type="checkbox"\n+                                         class="noborder"\n+                                         name="paths:list" id="#"\n+                                         value="#"\n+                                         tal:attributes="value   item/getPath;\n+                                                         id      string:cb_${item/id};\n+                                                         checked item/checked|nothing;\n+                                                         alt     string:Select ${item/Title};\n+                                                         title   string:Select ${item/Title}" />\n+                                  <input type="hidden" name="selected_obj_paths:list" value="#"\n+                                         tal:attributes="value item/getURL" />\n+                              </td>\n+                              <td>\n+                                  <span tal:content="python:item.author_name or item.Creator">Name</span>\n+                                  <tal:email tal:condition="email">\n+                                      <br/>\n+                                      <a tal:attributes="href string:mailto:$email;"\n+                                         tal:content="email">Email\n+                                      </a>\n+                                  </tal:email>\n+                              </td>\n+                              <td style="white-space: nowrap;" tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n+                              <td>\n+                                  <a tal:attributes="href item_url" target="_blank"\n+                                     tal:content="item/in_response_to" />\n+                              </td>\n+                              <td tal:attributes="class  python:colorclass(item.review_state)">\n+                                  <div>\n+                                      <span tal:replace="item/Description"/>\n+                                      <a href=""\n+                                         tal:attributes="href string:$item_url/getText"\n+                                         tal:condition="python:item.Description.endswith(\'[...]\')"\n+                                         i18n:translate="label_show_full_comment_text"\n+                                         class="show-full-comment-text">show full comment text</a>\n+                                  </div>\n+                                  <div class="actions input-group-addon">\n+                                      <input\n+                                          type="hidden"\n+                                          name="selected_obj_paths:list"\n+                                          value="#"\n+                                          tal:attributes="value item/getURL"\n+                                          />\n+                                      <!-- delete -->\n+                                      <input id=""\n+                                          class="destructive comment-delete-button"\n+                                          type="submit"\n+                                          value="Delete"\n+                                          name="form.button.moderation.DeleteComment"\n+                                          i18n:attributes="value label_delete;"\n+                                          tal:attributes="id item/id"\n+                                          />\n+                                      <!-- edit -->\n+                                      <a class="pat-plone-modal context" href="#"\n+                                          tal:attributes="href python:item_url+\'/@@edit-comment?review_state=\' + item.review_state">Edit</a>\n \n-            <fieldset id="fieldset-moderate-comments" class="formPanel">\n+                                      <!-- workflow actions -->\n+                                      <tal:transitions\n+                                          tal:define="\n+                                            transitions python:view.allowed_transitions(item_obj)">\n+                                          <input name="form.button.moderation.TransmitComment"\n+                                              tal:repeat="transition transitions"\n+                                              class="context"\n+                                              type="submit"\n+                                              value="Label"\n+                                              tal:attributes="id string:${item/id}_${transition/id};\n+                                                    data-transition transition/id;\n+                                                    value python:translationhelper.translate(transition[\'title\']);\n+                                                    style python:transition[\'id\']==\'publish\' and \'background-color: #5cb85c;; border-color: #4cae4c;;\' or \'\';\n+                                                    "\n+                                                 />\n+                                      </tal:transitions>\n+                                  </div>\n+                              </td>\n+                              <td>\n+                                  <span class="last-history-entry"\n+                                      tal:attributes="data-href string:$item_url/@@contenthistorypopup">\n+                                      last history entry\n+                                  </span>\n+                              </td>\n+                          </tr>\n+                      </tal:block>\n+                  </tbody>\n+              </table>\n+              <div metal:use-macro="here/batch_macros/macros/navigation" />\n+          </fieldset>\n+      </form>\n \n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n \n-                <table id="review-comments" class="listing">\n-                    <thead>\n-                        <tr>\n-                            <th id="bulkactions" class="nosort" colspan="7">\n-                                <select name="form.select.BulkAction">\n-                                    <option selected="selected" value="-1" i18n:translate="title_bulkactions">Bulk Actions</option>\n-                                    <option value="publish"\n-                                            i18n:translate="bulkactions_publish"\n-                                            tal:condition="python: filter != \'published\' and moderation_enabled">Approve</option>\n-                                    <option value="delete" i18n:translate="bulkactions_delete">Delete</option>\n-                                </select>\n-                                <input type="hidden" name="form.button.Filter" tal:attributes="value filter" value="" />\n-                                <input id="dobulkaction"\n-                                       type="submit"\n-                                       class="standalone allowMultiSubmit"\n-                                       value="Apply"\n-                                       name="form.button.BulkAction"\n-                                       i18n:attributes="value label_apply;" />\n-                            </th>\n-                        </tr>\n-                        <tr>\n-                            <th class="nosort"><input name="check_all" type="checkbox" value="0" /></th>\n-                            <th class="nosort" i18n:translate="heading_commenter">Commenter</th>\n-                            <th class="nosort" i18n:translate="heading_date">Date</th>\n-                            <th class="nosort" i18n:translate="heading_in_reponse_to">In Response To</th>\n-                            <th class="nosort" i18n:translate="heading_comment">Comment</th>\n-                            <th class="nosort" i18n:translate="heading_action">Action</th>\n-                        </tr>\n-                    </thead>\n-                    <tbody>\n-                        <tal:block repeat="item batch">\n-                            <tr class="commentrow"\n-                                tal:define="even repeat/item/even;\n-                                            email python:getattr(item.getObject(), \'author_email\');"\n-                                tal:attributes="class python: even and \'odd\' or \'even\'">\n-                                <td class="notDraggable">\n-                                    <input type="checkbox"\n-                                           class="noborder"\n-                                           name="paths:list" id="#"\n-                                           value="#"\n-                                           tal:attributes="value   item/getPath;\n-                                                           id      string:cb_${item/id};\n-                                                           checked item/checked|nothing;\n-                                                           alt     string:Select ${item/Title};\n-                                                           title   string:Select ${item/Title}" />\n-                                    <input type="hidden" name="selected_obj_paths:list" value="#"\n-                                           tal:attributes="value item/getURL" />\n-                                </td>\n-                                <td>\n-                                    <span tal:content="python:item.author_name or item.Creator">Name</span>\n-                                    <tal:email tal:condition="email">\n-                                        <br/>\n-                                        <a tal:attributes="href string:mailto:$email;"\n-                                           tal:content="email">Email\n-                                        </a>\n-                                    </tal:email>\n-                                </td>\n-                                <td tal:content="python:toLocalizedTime(item.created, long_format=1)"/>\n-                                <td>\n-                                    <a tal:attributes="href item/getURL"\n-                                       tal:content="item/in_response_to" />\n-                                </td>\n-                                <td>\n-                                    <span tal:replace="item/Description" />\n-                                    <a href=""\n-                                       tal:attributes="href string:${item/getURL}/getText"\n-                                       tal:condition="python:item.Description.endswith(\'[...]\')"\n-                                       i18n:translate="label_show_full_comment_text"\n-                                       class="show-full-comment-text">show full comment text</a>\n-                                </td>\n-                                <td class="actions">\n-                                    <input id=""\n-                                           class="context comment-publish-button"\n-                                           type="submit"\n-                                           value="Approve"\n-                                           name="form.button.Publish"\n-                                           i18n:attributes="value label_publish;"\n-                                           tal:attributes="id item/id"\n-                                           tal:condition="python:item.review_state == \'pending\'"\n-                                           />\n-                                    <input id=""\n-                                           class="destructive comment-delete-button"\n-                                           type="submit"\n-                                           value="Delete"\n-                                           name="form.button.Delete"\n-                                           i18n:attributes="value label_delete;"\n-                                           tal:attributes="id item/id"\n-                                           />\n-                                </td>\n-                            </tr>\n-                        </tal:block>\n-                    </tbody>\n-                </table>\n-                <div metal:use-macro="here/batch_macros/macros/navigation" />\n-            </fieldset>\n-        </form>\n     </tal:main-macro>\n </metal:main>\n \ndiff --git a/plone/app/discussion/browser/moderation.py b/plone/app/discussion/browser/moderation.py\nindex e05352e0..05c0236c 100644\n--- a/plone/app/discussion/browser/moderation.py\n+++ b/plone/app/discussion/browser/moderation.py\n@@ -1,9 +1,11 @@\n-# -*- coding: utf-8 -*-\n+# coding: utf-8\n from AccessControl import getSecurityManager\n from AccessControl import Unauthorized\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n+from plone import api\n from plone.app.discussion.events import CommentPublishedEvent\n+from plone.app.discussion.events import CommentTransitionEvent\n from plone.app.discussion.events import CommentDeletedEvent\n from plone.app.discussion.interfaces import _\n from plone.app.discussion.interfaces import IComment\n@@ -13,12 +15,34 @@\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.event import notify\n-from zope.interface import alsoProvides\n+\n+\n+# Translations for generated values in buttons\n+# States\n+_(\'comment_pending\', default=\'pending\')\n+# _(\'comment_approved\', default=\'published\')\n+_(\'comment_published\', default=\'published\')\n+_(\'comment_rejected\', default=\'rejected\')\n+_(\'comment_spam\', default=\'marked as spam\')\n+# Transitions\n+_(\'Recall\')\n+_(\'Approve\')\n+_(\'Reject\')\n+_(\'Spam\')\n+\n+\n+class TranslationHelper(BrowserView):\n+\n+    def translate(self, text=""):\n+        return _(text)\n+\n+    def translate_comment_review_state(self, rs):\n+        return _("comment_" + rs, default=rs)\n \n \n class View(BrowserView):\n-    """Comment moderation view.\n-    """\n+    """Show comment moderation view."""\n+\n     template = ViewPageTemplateFile(\'moderation.pt\')\n     try:\n         template.id = \'@@moderate-comments\'\n@@ -26,56 +50,84 @@ class View(BrowserView):\n         # id is not writeable in Zope 2.12\n         pass\n \n+    def __init__(self, context, request):\n+        super(View, self).__init__(context, request)\n+        self.workflowTool = getToolByName(self.context, \'portal_workflow\')\n+        self.transitions = []\n+\n     def __call__(self):\n         self.request.set(\'disable_border\', True)\n-        context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n-        self.comments = catalog(object_provides=IComment.__identifier__,\n-                                review_state=\'pending\',\n-                                sort_on=\'created\',\n-                                sort_order=\'reverse\')\n+        self.request.set(\'review_state\',\n+                         self.request.get(\'review_state\', \'pending\'))\n         return self.template()\n \n+    def comments(self):\n+        """Return comments of defined review_state.\n+\n+        review_state is string or list of strings.\n+        """\n+        catalog = getToolByName(self.context, \'portal_catalog\')\n+        if self.request.review_state == \'all\':\n+            return catalog(object_provides=IComment.__identifier__,\n+                           sort_on=\'created\',\n+                           sort_order=\'reverse\')\n+        return catalog(object_provides=IComment.__identifier__,\n+                       review_state=self.request.review_state,\n+                       sort_on=\'created\',\n+                       sort_order=\'reverse\')\n+\n     def moderation_enabled(self):\n-        """Returns true if a \'review workflow\' is enabled on \'Discussion Item\'\n-           content type. A \'review workflow\' is characterized by implementing\n-           a \'pending\' workflow state.\n+        """Return true if a review workflow is enabled on \'Discussion Item\'\n+        content type.\n+\n+        A \'review workflow\' is characterized by implementing a \'pending\'\n+        workflow state.\n         """\n-        context = aq_inner(self.context)\n-        workflowTool = getToolByName(context, \'portal_workflow\')\n-        comment_workflow = workflowTool.getChainForPortalType(\n+        workflows = self.workflowTool.getChainForPortalType(\n             \'Discussion Item\')\n-        if comment_workflow:\n-            comment_workflow = comment_workflow[0]\n-            comment_workflow = workflowTool[comment_workflow]\n+        if workflows:\n+            comment_workflow = self.workflowTool[workflows[0]]\n             if \'pending\' in comment_workflow.states:\n                 return True\n         return False\n \n+    @property\n+    def moderation_multiple_state_enabled(self):\n+        """Return true if a \'review multiple state workflow\' is enabled on\n+        \'Discussion Item\' content type.\n \n-class ApprovedView(View):\n-    """Overview comments already approved."""\n-    template = ViewPageTemplateFile(\'comments_approved.pt\')\n-    try:\n-        template.id = \'@@comments-approved\'\n-    except AttributeError:\n-        # id is not writeable in Zope 2.12\n-        pass\n+        A \'review multipe state workflow\' is characterized by implementing\n+        a \'rejected\' workflow state and a \'spam\' workflow state.\n+        """\n+        workflows = self.workflowTool.getChainForPortalType(\n+            \'Discussion Item\')\n+        if workflows:\n+            comment_workflow = self.workflowTool[workflows[0]]\n+            if \'spam\' in comment_workflow.states:\n+                return True\n+        return False\n \n-    def __call__(self):\n-        self.request.set(\'disable_border\', True)\n-        context = aq_inner(self.context)\n-        catalog = getToolByName(context, \'portal_catalog\')\n-        self.comments = catalog(object_provides=IComment.__identifier__,\n-                                review_state=\'published\',\n-                                sort_on=\'created\',\n-                                sort_order=\'reverse\')\n-\n-        # print("*** approved comments")\n-        # print(self.comments)\n-        # for el in self.comments:\n-        #     print(el.id, el.review_state)\n-        return self.template()\n+    def allowed_transitions(self, obj=None):\n+        """Return allowed workflow transitions for obj.\n+\n+        Example: pending\n+\n+        [{\'id\': \'mark_as_spam\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=mark_as_spam\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_review_workflow/transitions/mark_as_spam>, \'title\': \'Spam\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n+        {\'id\': \'publish\',\n+            \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=publish\',\n+            \'icon\': \'\',\n+            \'category\': \'workflow\',\n+            \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_review_workflow/transitions/publish>,\n+            \'title\': \'Approve\',\n+            \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True},\n+        {\'id\': \'reject\', \'url\': \'http://localhost:8083/PloneRejected/testfolder/testpage/++conversation++default/1575415863542780/content_status_modify?workflow_action=reject\', \'icon\': \'\', \'category\': \'workflow\', \'transition\': <TransitionDefinition at /PloneRejected/portal_workflow/comment_review_workflow/transitions/reject>, \'title\': \'Reject\', \'link_target\': None, \'visible\': True, \'available\': True, \'allowed\': True}]\n+        """\n+        if obj:\n+            transitions = [\n+                a for a in self.workflowTool.listActionInfos(object=obj)\n+                if a[\'category\'] == \'workflow\' and a[\'allowed\']\n+                ]\n+            return transitions\n \n \n class ModerateCommentsEnabled(BrowserView):\n@@ -184,57 +236,61 @@ def __call__(self):\n             raise Unauthorized("You\'re not allowed to delete this comment.")\n \n \n-class PublishComment(BrowserView):\n-    """Publish a comment.\n+class CommentTransition(BrowserView):\n+    r"""Publish, reject, recall a comment or mark it as spam.\n \n-       This view is always called directly on the comment object:\n+    This view is always called directly on the comment object:\n \n-           http://nohost/front-page/++conversation++default/1286289644723317/\\\n-           @@moderate-publish-comment\n+        http://nohost/front-page/++conversation++default/1286289644723317/\\\n+        @@transmit-comment\n \n-       Each table row (comment) in the moderation view contains a hidden input\n-       field with the absolute URL of the content object:\n+    Each table row (comment) in the moderation view contains a hidden input\n+    field with the absolute URL of the content object:\n \n-         <input type="hidden"\n-                value="http://nohost/front-page/++conversation++default/\\\n-                       1286289644723317"\n-                name="selected_obj_paths:list">\n+        <input type="hidden"\n+            value="http://nohost/front-page/++conversation++default/\\\n+                1286289644723317"\n+            name="selected_obj_paths:list">\n \n-       This absolute URL is called from a jQuery method that is bind to the\n-       \'delete\' button of the table row. See javascripts/moderation.js for more\n-       details.\n+    This absolute URL is called from a jQuery method that is bind to the\n+    \'delete\' button of the table row. See javascripts/moderation.js for more\n+    details.\n     """\n \n     def __call__(self):\n+        """Call CommentTransition."""\n         comment = aq_inner(self.context)\n         content_object = aq_parent(aq_parent(comment))\n-        workflowTool = getToolByName(comment, \'portal_workflow\', None)\n         workflow_action = self.request.form.get(\'workflow_action\', \'publish\')\n-        review_state = workflowTool.getInfoFor(comment, \'review_state\', \'\')\n-        if review_state == "pending":\n-            workflowTool.doActionFor(comment, workflow_action)\n-            comment.reindexObject()\n-            content_object.reindexObject(idxs=[\'total_comments\'])\n-            notify(CommentPublishedEvent(self.context, comment))\n-            IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment approved.\'),\n-                type=\'info\')\n-        else:\n-            IStatusMessage(self.context.REQUEST).addStatusMessage(\n-                _(\'Comment already approved.\'),\n-                type=\'info\')\n+        api.content.transition(comment, transition=workflow_action)\n+        comment.reindexObject()\n+        content_object.reindexObject(idxs=[\'total_comments\'])\n+        notify(CommentPublishedEvent(self.context, comment))\n+        # for complexer workflows:\n+        notify(CommentTransitionEvent(self.context, comment))\n+        review_state_new = api.content.get_state(comment, \'\')\n+\n+        comment_state_translated = self.context.restrictedTraverse("translationhelper").translate_comment_review_state(review_state_new)\n+\n+        msgid = _(\n+            "comment_transmitted",\n+            default=\'Comment ${comment_state_translated}.\',\n+            mapping={"comment_state_translated": comment_state_translated})\n+        translated = self.context.translate(msgid)\n+        api.portal.show_message(translated, self.context.REQUEST)\n+\n         came_from = self.context.REQUEST.HTTP_REFERER\n         # if the referrer already has a came_from in it, don\'t redirect back\n-        if (len(came_from) == 0 or \'came_from=\' in came_from or\n-                not getToolByName(\n-                content_object, \'portal_url\').isURLInPortal(came_from) or\n-                \'@@confirm-action\' in came_from):\n+        if (len(came_from) == 0\n+            or \'came_from=\' in came_from\n+            or not getToolByName(\n+                content_object, \'portal_url\').isURLInPortal(came_from)):\n             came_from = content_object.absolute_url()\n         return self.context.REQUEST.RESPONSE.redirect(came_from)\n \n \n class BulkActionsView(BrowserView):\n-    """Bulk actions (unapprove, approve, delete, mark as spam).\n+    """Call bulk action: publish/approve, delete (, reject, recall, mark as spam).\n \n        Each table row of the moderation view has a checkbox with the absolute\n        path (without host and port) of the comment objects:\n@@ -256,7 +312,12 @@ class BulkActionsView(BrowserView):\n \n     """\n \n+    def __init__(self, context, request):\n+        super(BulkActionsView, self).__init__(context, request)\n+        self.workflowTool = getToolByName(context, \'portal_workflow\')\n+\n     def __call__(self):\n+        """Call BulkActionsView."""\n         if \'form.select.BulkAction\' in self.request:\n             bulkaction = self.request.get(\'form.select.BulkAction\')\n             self.paths = self.request.get(\'paths\')\n@@ -264,50 +325,40 @@ def __call__(self):\n                 if bulkaction == \'-1\':\n                     # no bulk action was selected\n                     pass\n-                elif bulkaction == \'retract\':\n-                    self.retract()\n-                elif bulkaction == \'publish\':\n-                    self.publish()\n-                elif bulkaction == \'mark_as_spam\':\n-                    self.mark_as_spam()\n                 elif bulkaction == \'delete\':\n                     self.delete()\n                 else:\n-                    raise KeyError  # pragma: no cover\n-\n-    def retract(self):\n-        raise NotImplementedError\n-\n-    def publish(self):\n-        """Publishes all comments in the paths variable.\n+                    self.transmit(bulkaction)\n \n-           Expects a list of absolute paths (without host and port):\n+    def transmit(self, action=None):\n+        """Transmit all comments in the paths variable to requested review_state.\n \n-             /Plone/startseite/++conversation++default/1286200010610352\n+        Expects a list of absolute paths (without host and port):\n \n+        /Plone/startseite/++conversation++default/1286200010610352\n         """\n         context = aq_inner(self.context)\n         for path in self.paths:\n             comment = context.restrictedTraverse(path)\n             content_object = aq_parent(aq_parent(comment))\n-            workflowTool = getToolByName(comment, \'portal_workflow\')\n-            current_state = workflowTool.getInfoFor(comment, \'review_state\')\n-            if current_state != \'published\':\n-                workflowTool.doActionFor(comment, \'publish\')\n-            comment.reindexObject()\n-            content_object.reindexObject(idxs=[\'total_comments\'])\n-            notify(CommentPublishedEvent(content_object, comment))\n-\n-    def mark_as_spam(self):\n-        raise NotImplementedError\n+            allowed_transitions = [\n+                transition[\'id\'] for transition in self.workflowTool.listActionInfos(object=comment)\n+                if transition[\'category\'] == \'workflow\' and transition[\'allowed\']\n+                ]\n+            if action in allowed_transitions:\n+                self.workflowTool.doActionFor(comment, action)\n+                comment.reindexObject()\n+                content_object.reindexObject(idxs=[\'total_comments\'])\n+                notify(CommentPublishedEvent(content_object, comment))\n+                # for complexer workflows:\n+                notify(CommentTransitionEvent(self.context, comment))\n \n     def delete(self):\n-        """Deletes all comments in the paths variable.\n-\n-           Expects a list of absolute paths (without host and port):\n+        """Delete all comments in the paths variable.\n \n-             /Plone/startseite/++conversation++default/1286200010610352\n+        Expects a list of absolute paths (without host and port):\n \n+        /Plone/startseite/++conversation++default/1286200010610352\n         """\n         context = aq_inner(self.context)\n         for path in self.paths:\ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex 61d50c46..08925bb7 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -6,6 +6,7 @@\n from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import ICommentDeletedEvent\n from plone.app.discussion.interfaces import ICommentPublishedEvent\n+from plone.app.discussion.interfaces import ICommentTransitionEvent\n from plone.app.discussion.interfaces import IReplyAddedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\n from zope.interface import implementer\n@@ -62,3 +63,8 @@ class CommentDeletedEvent(DiscussionEvent):\n class CommentPublishedEvent(DiscussionEvent):\n     """ Event to be triggered when a Comment is publicated\n     """\n+\n+\n+@implementer(ICommentTransitionEvent)\n+class CommentTransitionEvent(DiscussionEvent):\n+    """Event to be triggered when a Comments review_state changed."""\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex d7065e82..c03c0bbc 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -422,3 +422,7 @@ class ICommentPublishedEvent(IDiscussionEvent):\n class ICommentDeletedEvent(IDiscussionEvent):\n     """ Notify user on comment delete\n     """\n+\n+\n+class ICommentTransitionEvent(IDiscussionEvent):\n+    """Notify user on comment transition / change of review_state."""\ndiff --git a/plone/app/discussion/profiles/default/metadata.xml b/plone/app/discussion/profiles/default/metadata.xml\nindex c779e86e..49f2d5ec 100644\n--- a/plone/app/discussion/profiles/default/metadata.xml\n+++ b/plone/app/discussion/profiles/default/metadata.xml\n@@ -1,5 +1,5 @@\n <metadata>\n- <version>1001</version>\n+ <version>1002</version>\n  <dependencies>\n   <dependency>profile-plone.resource:default</dependency>\n   <dependency>profile-plone.app.registry:default</dependency>\ndiff --git a/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml b/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml\nindex 6936319f..af19e9e3 100644\n--- a/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml\n+++ b/plone/app/discussion/profiles/default/workflows/comment_review_workflow/definition.xml\n@@ -7,125 +7,130 @@\n              state_variable="review_state"\n              initial_state="pending"\n              i18n:attributes="title; description">\n+             <permission>Access contents information</permission>\n+             <permission>Modify portal content</permission>\n+             <permission>Reply to item</permission>\n+             <permission>View</permission>\n+             <state state_id="pending" title="Pending">\n+                 <description>Submitted, pending review.</description>\n+                 <exit-transition transition_id="mark_as_spam"/>\n+                 <exit-transition transition_id="publish"/>\n+                 <exit-transition transition_id="reject"/>\n+                 <permission-map name="Access contents information" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                     <permission-role>Owner</permission-role>\n+                     <permission-role>Reviewer</permission-role>\n+                 </permission-map>\n+                 <permission-map name="Modify portal content" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                     <permission-role>Owner</permission-role>\n+                     <permission-role>Reviewer</permission-role>\n+                 </permission-map>\n+                 <permission-map name="Reply to item" acquired="False">\n+                 </permission-map>\n+                 <permission-map name="View" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                     <permission-role>Owner</permission-role>\n+                     <permission-role>Reviewer</permission-role>\n+                 </permission-map>\n+             </state>\n+             <state state_id="published" title="Published">\n+                 <description>Visible to everyone, non-editable.</description>\n+                 <exit-transition transition_id="mark_as_spam"/>\n+                 <exit-transition transition_id="recall"/>\n+                 <exit-transition transition_id="reject"/>\n+                 <permission-map name="Access contents information" acquired="True">\n+                 </permission-map>\n+                 <permission-map name="Modify portal content" acquired="False">\n+                     <permission-role>Manager</permission-role>\n+                 </permission-map>\n+                 <permission-map name="Reply to item" acquired="True">\n+                 </permission-map>\n+                 <permission-map name="View" acquired="True">\n+                 </permission-map>\n+             </state>\n+             <state state_id="rejected" title="Rejected">\n+                 <exit-transition transition_id="mark_as_spam"/>\n+                 <exit-transition transition_id="publish"/>\n+                 <exit-transition transition_id="recall"/>\n+             </state>\n+             <state state_id="spam" title="Spam">\n+                 <exit-transition transition_id="publish"/>\n+                 <exit-transition transition_id="recall"/>\n+                 <exit-transition transition_id="reject"/>\n+             </state>\n+             <transition transition_id="mark_as_spam" title="Mark as spam" new_state="spam" trigger="USER" before_script="" after_script="">\n+                 <description>Spam comments are invisible to other users.</description>\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=mark_as_spam" category="workflow" icon="">Spam</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <transition transition_id="publish" title="Reviewer approves content" new_state="published" trigger="USER" before_script="" after_script="">\n+                 <description>Approving the comment makes it visible to other users.</description>\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=publish" category="workflow" icon="">Approve</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <transition transition_id="recall" title="Reviewer recalls comment back to pending state" new_state="pending" trigger="USER" before_script="" after_script="">\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=recall" category="workflow" icon="">Recall</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <transition transition_id="reject" title="Reviewer rejects comment" new_state="rejected" trigger="USER" before_script="" after_script="">\n+                 <description>Rejected comments are invisible to other users.</description>\n+                 <action url="%(content_url)s/content_status_modify?workflow_action=reject" category="workflow" icon="">Reject</action>\n+                 <guard>\n+                     <guard-permission>Review comments</guard-permission>\n+                 </guard>\n+             </transition>\n+             <variable variable_id="action" for_catalog="False" for_status="True" update_always="True">\n+                 <description>Previous transition</description>\n+                 <default>\n \n- <permission>Access contents information</permission>\n- <permission>Modify portal content</permission>\n- <permission>View</permission>\n- <permission>Reply to item</permission>\n+                     <expression>transition/getId|nothing</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="actor" for_catalog="False" for_status="True" update_always="True">\n+                 <description>The ID of the user who performed the previous transition</description>\n+                 <default>\n \n- <state state_id="pending" title="Pending" i18n:attributes="title">\n-  <exit-transition transition_id="publish"/>\n-  <description i18n:translate="">\n-    Submitted, pending review.\n-  </description>\n-  <permission-map name="Access contents information" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="Modify portal content" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="View" acquired="False">\n-   <permission-role>Manager</permission-role>\n-   <permission-role>Owner</permission-role>\n-   <permission-role>Reviewer</permission-role>\n-  </permission-map>\n-  <permission-map name="Reply to item" acquired="False">\n-  </permission-map>\n- </state>\n+                     <expression>user/getUserName</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="comments" for_catalog="False" for_status="True" update_always="True">\n+                 <description>Comment about the last transition</description>\n+                 <default>\n \n- <state state_id="published" title="Published" i18n:attributes="title">\n-  <description i18n:translate="">\n-    Visible to everyone, non-editable.\n-  </description>\n-  <permission-map name="Access contents information" acquired="True">\n-  </permission-map>\n-  <permission-map name="Modify portal content" acquired="False">\n-   <permission-role>Manager</permission-role>\n-  </permission-map>\n-  <permission-map name="View" acquired="True">\n-  </permission-map>\n-  <permission-map name="Reply to item" acquired="True">\n-  </permission-map>\n- </state>\n+                     <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="review_history" for_catalog="False" for_status="False" update_always="False">\n+                 <description>Provides access to workflow history</description>\n+                 <default>\n \n- <transition transition_id="publish" new_state="published"\n-             title="Reviewer approves content"\n-             trigger="USER"\n-             before_script="" after_script=""\n-             i18n:attributes="title">\n-  <description i18n:translate="">\n-    Approving the comment makes it visible to other users.\n-  </description>\n-  <action url="%(content_url)s/content_status_modify?workflow_action=publish"\n-          category="workflow"\n-          i18n:translate="">Approve</action>\n-  <guard>\n-   <guard-permission>Review comments</guard-permission>\n-  </guard>\n- </transition>\n+                     <expression>state_change/getHistory</expression>\n+                 </default>\n+                 <guard>\n+                     <guard-permission>Request review</guard-permission>\n+                     <guard-permission>Review portal content</guard-permission>\n+                 </guard>\n+             </variable>\n+             <variable variable_id="time" for_catalog="False" for_status="True" update_always="True">\n+                 <description>When the previous transition was performed</description>\n+                 <default>\n \n- <variable variable_id="action" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">Previous transition</description>\n-  <default>\n-   <expression>transition/getId|nothing</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="actor" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">\n-    The ID of the user who performed the previous transition\n-  </description>\n-  <default>\n-   <expression>user/getUserName</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="comments" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">\n-    Comment about the last transition\n-  </description>\n-  <default>\n-   <expression>python:state_change.kwargs.get(\'comment\', \'\')</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="review_history" for_catalog="False"\n-           for_status="False" update_always="False">\n-  <description i18n:translate="">\n-    Provides access to workflow history\n-  </description>\n-  <default>\n-   <expression>state_change/getHistory</expression>\n-  </default>\n-  <guard>\n-   <guard-permission>Request review</guard-permission>\n-   <guard-permission>Review portal content</guard-permission>\n-  </guard>\n- </variable>\n-\n- <variable variable_id="time" for_catalog="False"\n-           for_status="True" update_always="True">\n-  <description i18n:translate="">\n-    When the previous transition was performed\n-  </description>\n-  <default>\n-   <expression>state_change/getDateTime</expression>\n-  </default>\n-  <guard>\n-  </guard>\n- </variable>\n-\n-</dc-workflow>\n+                     <expression>state_change/getDateTime</expression>\n+                 </default>\n+                 <guard>\n+                 </guard>\n+             </variable>\n+         </dc-workflow>\ndiff --git a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\nindex a835f964..84d384ff 100644\n--- a/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n+++ b/plone/app/discussion/tests/functional_test_comment_review_workflow.txt\n@@ -112,7 +112,7 @@ Administrators can see all posts and comment actions\n     >>> \'form.button.DeleteComment\' in browser.contents\n     True\n \n-    >>> \'form.button.PublishComment\' in browser.contents\n+    >>> \'form.button.TransmitComment\' in browser.contents\n     True\n \n Anonymous user can not see any posts or comment actions\n@@ -128,7 +128,7 @@ Anonymous user can not see any posts or comment actions\n     >>> \'form.button.DeleteComment\' in unprivileged_browser.contents\n     False\n \n-    >>> \'form.button.PublishComment\' in unprivileged_browser.contents\n+    >>> \'form.button.TransmitComment\' in unprivileged_browser.contents\n     False\n \n The catalog does not list the comments yet:\n@@ -156,7 +156,7 @@ actions.\n     >>> \'form.button.DeleteComment\' in browser.contents\n     True\n \n-    >>> \'form.button.PublishComment\' in browser.contents\n+    >>> \'form.button.TransmitComment\' in browser.contents\n     True\n \n \n@@ -176,7 +176,7 @@ flaw? Though, the comment is published properly.\n     >>> browser.raiseHttpErrors = False\n     >>> browser.getControl(\'Approve\', index=0).click()\n \n-    >>> \'Comment approved\' in browser.contents\n+    >>> \'Comment published\' in browser.contents\n     True\n \n     >>> browser.handleErrors = False\ndiff --git a/plone/app/discussion/tests/functional_test_comments.txt b/plone/app/discussion/tests/functional_test_comments.txt\nindex 2ff35a3e..ac488c10 100644\n--- a/plone/app/discussion/tests/functional_test_comments.txt\n+++ b/plone/app/discussion/tests/functional_test_comments.txt\n@@ -284,7 +284,7 @@ Open the edit comment view\n Change and save the comment\n \n     >>> ctrl.value = \'Comment from admin / was edited\'\n-    >>> browser.getControl(\'Edit comment\').click()\n+    >>> browser.getControl(\'Save\').click()\n \n This used to trigger permissions problems in some portlet configurations.\n Check it ain\'t so.\n@@ -325,19 +325,19 @@ Deleting existing comments | \'Delete comments\' permission\n Anonymous cannot delete comments\n \n     >>> unprivileged_browser.open(urldoc1)\n-    >>> \'form.button.Delete\' in unprivileged_browser.contents\n+    >>> \'form.button.DeleteComment\' in unprivileged_browser.contents\n     False\n \n A member cannot delete his own comments if he can\'t review or he isn\'t a Site Administrator\n \n     >>> browser_member.open(urldoc1)\n-    >>> \'form.button.Delete\' in browser_member.contents\n+    >>> \'form.button.DeleteComment\' in browser_member.contents\n     False\n \n Admin can delete comments\n \n     >>> browser.open(urldoc1)\n-    >>> \'form.button.Delete\' in browser.contents\n+    >>> \'form.button.DeleteComment\' in browser.contents\n     True\n \n Extract the delete comment url from the first "delete comment" button\ndiff --git a/plone/app/discussion/tests/robot/test_moderation.robot b/plone/app/discussion/tests/robot/test_moderation.robot\nnew file mode 100644\nindex 00000000..a33d1d5a\n--- /dev/null\n+++ b/plone/app/discussion/tests/robot/test_moderation.robot\n@@ -0,0 +1,84 @@\n+*** Settings ***\n+\n+Resource  plone/app/robotframework/saucelabs.robot\n+Resource  plone/app/robotframework/selenium.robot\n+\n+Library  Remote  ${PLONE_URL}/RobotRemote\n+\n+Test Setup  Run Keywords  Plone test setup\n+Test Teardown  Run keywords  Plone test teardown\n+\n+\n+*** Test Cases ***\n+\n+Add a Comment to a Document and bulk delete it\n+  Given a logged-in Site Administrator\n+    and workflow multiple enabled\n+    and a document with discussion enabled\n+  When I add a comment and delete it\n+  Then I can not see the comment below the document\n+\n+Last history entry is shown\n+  Given a logged-in Site Administrator\n+    and workflow multiple enabled\n+    and a document with discussion enabled\n+  When I add a comment\n+  Then I can see the last history entry in moderation view\n+\n+\n+*** Keywords ***\n+\n+# Given\n+\n+a logged-in Site Administrator\n+  Enable autologin as  Site Administrator\n+\n+a document\n+  Create content  type=Document  id=my-document  title=My Document\n+\n+a document with discussion enabled\n+  a document\n+  I enable discussion on the document\n+\n+\n+# When\n+\n+I enable discussion on the document\n+  Go To  ${PLONE_URL}/my-document/edit\n+  Wait until page contains  Settings\n+  Click Link  Settings\n+  Wait until element is visible  name=form.widgets.IAllowDiscussion.allow_discussion:list\n+  Select From List  name=form.widgets.IAllowDiscussion.allow_discussion:list  True\n+  Click Button  Save\n+\n+I add a comment\n+  Wait until page contains element  id=form-widgets-comment-text\n+  Input Text  id=form-widgets-comment-text  This is a comment\n+  Click Button  Comment\n+\n+I add a comment and delete it\n+  Wait until page contains element  id=form-widgets-comment-text\n+  Input Text  id=form-widgets-comment-text  This is a comment\n+  Click Button  Comment\n+  Go To  ${PLONE_URL}/@@moderate-comments?review_state=all\n+  Wait until page contains element  name=form.select.BulkAction\n+  Select from list by value   xpath://select[@name=\'form.select.BulkAction\']  delete\n+  Select Checkbox  name=check_all\n+  Click Button  Apply\n+  Wait Until Page Does Not Contain  This is a comment\n+\n+workflow multiple enabled\n+  Go To  ${PLONE_URL}/@@content-controlpanel?type_id=Discussion%20Item&new_workflow=comment_review_workflow\n+  Click Button  Save\n+\n+# Then\n+\n+I can not see the comment below the document\n+  Go To  ${PLONE_URL}/my-document/view\n+  Wait until page contains  My Document\n+  Page should not contain  This is a comment\n+\n+I can see the last history entry in moderation view\n+  Go To  ${PLONE_URL}/@@moderate-comments?review_state=all\n+  Wait until page contains element  name=form.select.BulkAction\n+  Page should contain  Create\ndiff --git a/plone/app/discussion/tests/test_comments_viewlet.py b/plone/app/discussion/tests/test_comments_viewlet.py\nindex 942f0d26..06b32313 100644\n--- a/plone/app/discussion/tests/test_comments_viewlet.py\n+++ b/plone/app/discussion/tests/test_comments_viewlet.py\n@@ -599,10 +599,10 @@ def test_get_replies_with_workflow_actions(self):\n         self.assertTrue(\'actions\' in reply)\n         self.assertEqual(\n             reply[\'actions\'][0][\'id\'],\n-            \'publish\',\n+            \'mark_as_spam\',\n         )\n         expected_url = \'http://nohost/plone/doc1/++conversation++default/{0}\' \\\n-                       \'/content_status_modify?workflow_action=publish\'\n+                       \'/content_status_modify?workflow_action=mark_as_spam\'\n         self.assertEqual(\n             reply[\'actions\'][0][\'url\'],\n             expected_url.format(int(c1)),\ndiff --git a/plone/app/discussion/tests/test_moderation_multiple_state_view.py b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\nnew file mode 100644\nindex 00000000..72b1db02\n--- /dev/null\n+++ b/plone/app/discussion/tests/test_moderation_multiple_state_view.py\n@@ -0,0 +1,124 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.discussion.browser.moderation import BulkActionsView\n+from plone.app.discussion.browser.moderation import DeleteComment\n+from plone.app.discussion.browser.moderation import CommentTransition\n+from plone.app.discussion.browser.moderation import View\n+from plone.app.discussion.interfaces import IConversation\n+from plone.app.discussion.interfaces import IDiscussionSettings\n+from plone.app.discussion.testing import PLONE_APP_DISCUSSION_INTEGRATION_TESTING  # noqa\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.registry.interfaces import IRegistry\n+from Products.CMFCore.utils import getToolByName\n+from zope.component import createObject\n+from zope.component import queryUtility\n+\n+import unittest\n+\n+\n+class ModerationBulkActionsViewTest(unittest.TestCase):\n+\n+    layer = PLONE_APP_DISCUSSION_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer[\'app\']\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.wf = getToolByName(self.portal,\n+                                \'portal_workflow\',\n+                                None)\n+        self.context = self.portal\n+        self.portal.portal_workflow.setChainForPortalTypes(\n+            (\'Discussion Item\',),\n+            \'comment_review_workflow\',\n+        )\n+        self.wf_tool = self.portal.portal_workflow\n+        # Add a conversation with three comments\n+        conversation = IConversation(self.portal.doc1)\n+        comment1 = createObject(\'plone.Comment\')\n+        comment1.title = \'Comment 1\'\n+        comment1.text = \'Comment text\'\n+        comment1.Creator = \'Jim\'\n+        new_id_1 = conversation.addComment(comment1)\n+        self.comment1 = self.portal.doc1.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id_1),\n+        )\n+        comment2 = createObject(\'plone.Comment\')\n+        comment2.title = \'Comment 2\'\n+        comment2.text = \'Comment text\'\n+        comment2.Creator = \'Joe\'\n+        new_id_2 = conversation.addComment(comment2)\n+        self.comment2 = self.portal.doc1.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id_2),\n+        )\n+        comment3 = createObject(\'plone.Comment\')\n+        comment3.title = \'Comment 3\'\n+        comment3.text = \'Comment text\'\n+        comment3.Creator = \'Emma\'\n+        new_id_3 = conversation.addComment(comment3)\n+        self.comment3 = self.portal.doc1.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id_3),\n+        )\n+        self.conversation = conversation\n+\n+    def test_default_bulkaction(self):\n+        # Make sure no error is raised when no bulk actions has been supplied\n+        self.request.set(\'form.select.BulkAction\', \'-1\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+\n+        view = BulkActionsView(self.portal, self.request)\n+\n+        self.assertFalse(view())\n+\n+    def test_publish(self):\n+        self.request.set(\'form.select.BulkAction\', \'publish\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+        view = BulkActionsView(self.portal, self.request)\n+\n+        view()\n+\n+        # Count published comments\n+        published_comments = 0\n+        for r in self.conversation.getThreads():\n+            comment_obj = r[\'comment\']\n+            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n+            if workflow_status == \'published\':\n+                published_comments += 1\n+        # Make sure the comment has been published\n+        self.assertEqual(published_comments, 1)\n+\n+    def test_mark_as_spam(self):\n+        self.request.set(\'form.select.BulkAction\', \'mark_as_spam\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n+\n+        view = BulkActionsView(self.portal, self.request)\n+\n+        view()\n+\n+        # Count spam comments\n+        spam_comments = 0\n+        for r in self.conversation.getThreads():\n+            comment_obj = r[\'comment\']\n+            workflow_status = self.wf.getInfoFor(comment_obj, \'review_state\')\n+            if workflow_status == \'spam\':\n+                spam_comments += 1\n+        # Make sure the comment has been marked as spam\n+        self.assertEqual(spam_comments, 1)\n+\n+    def test_delete(self):\n+        # Initially we have three comments\n+        self.assertEqual(len(self.conversation.objectIds()), 3)\n+        # Delete two comments with bulk actions\n+        self.request.set(\'form.select.BulkAction\', \'delete\')\n+        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath()),\n+                                   \'/\'.join(self.comment3.getPhysicalPath())])\n+        view = BulkActionsView(self.app, self.request)\n+\n+        view()\n+\n+        # Make sure that the two comments have been deleted\n+        self.assertEqual(len(self.conversation.objectIds()), 1)\n+        comment = next(self.conversation.getComments())\n+        self.assertTrue(comment)\n+        self.assertEqual(comment, self.comment2)\ndiff --git a/plone/app/discussion/tests/test_moderation_view.py b/plone/app/discussion/tests/test_moderation_view.py\nindex 7e660c10..76eddb31 100644\n--- a/plone/app/discussion/tests/test_moderation_view.py\n+++ b/plone/app/discussion/tests/test_moderation_view.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.discussion.browser.moderation import BulkActionsView\n from plone.app.discussion.browser.moderation import DeleteComment\n-from plone.app.discussion.browser.moderation import PublishComment\n+from plone.app.discussion.browser.moderation import CommentTransition\n from plone.app.discussion.browser.moderation import View\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n@@ -110,14 +110,6 @@ def test_default_bulkaction(self):\n \n         self.assertFalse(view())\n \n-    def test_retract(self):\n-        self.request.set(\'form.select.BulkAction\', \'retract\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n-\n-        view = BulkActionsView(self.portal, self.request)\n-\n-        self.assertRaises(NotImplementedError, view)\n-\n     def test_publish(self):\n         self.request.set(\'form.select.BulkAction\', \'publish\')\n         self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n@@ -135,15 +127,6 @@ def test_publish(self):\n         # Make sure the comment has been published\n         self.assertEqual(published_comments, 1)\n \n-    def test_mark_as_spam(self):\n-        self.request.set(\'form.select.BulkAction\', \'mark_as_spam\')\n-        self.request.set(\'paths\', [\'/\'.join(self.comment1.getPhysicalPath())])\n-\n-        view = BulkActionsView(self.portal, self.request)\n-\n-        self.assertRaises(NotImplementedError,\n-                          view)\n-\n     def test_delete(self):\n         # Initially we have three comments\n         self.assertEqual(len(self.conversation.objectIds()), 3)\n@@ -195,14 +178,14 @@ def setUp(self):\n     def test_regression(self):\n         page_url = self.page.absolute_url()\n         self.request[\'HTTP_REFERER\'] = page_url\n-        for Klass in (DeleteComment, PublishComment):\n+        for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n             self.assertEqual(page_url, view())\n \n     def test_valid_next_url(self):\n         self.request[\'HTTP_REFERER\'] = \'http://attacker.com\'\n-        for Klass in (DeleteComment, PublishComment):\n+        for Klass in (DeleteComment, CommentTransition):\n             view = Klass(self.comment, self.request)\n             view.__parent__ = self.comment\n             self.assertNotEqual(\'http://attacker.com\', view())\ndiff --git a/plone/app/discussion/tests/test_workflow.py b/plone/app/discussion/tests/test_workflow.py\nindex aafe2222..9f959fcc 100644\n--- a/plone/app/discussion/tests/test_workflow.py\n+++ b/plone/app/discussion/tests/test_workflow.py\n@@ -272,7 +272,7 @@ def test_publish(self):\n                 \'review_state\',\n             ),\n         )\n-        view = self.comment.restrictedTraverse(\'@@moderate-publish-comment\')\n+        view = self.comment.restrictedTraverse(\'@@transmit-comment\')\n         view()\n         self.assertEqual(\n             \'published\',\n@@ -295,7 +295,7 @@ def test_publish_as_anonymous(self):\n         self.assertRaises(\n             Unauthorized,\n             self.comment.restrictedTraverse,\n-            \'@@moderate-publish-comment\',\n+            \'@@transmit-comment\',\n         )\n         self.assertEqual(\n             \'pending\',\ndiff --git a/plone/app/discussion/upgrades.py b/plone/app/discussion/upgrades.py\nindex 7a0e30c1..784184e0 100644\n--- a/plone/app/discussion/upgrades.py\n+++ b/plone/app/discussion/upgrades.py\n@@ -20,7 +20,7 @@ def update_rolemap(context):\n     context.runImportStepFromProfile(default_profile, \'rolemap\')\n \n \n-def upgrade_comment_workflows(context):\n+def upgrade_comment_workflows_retain_current_workflow(context):\n     # If the current comment workflow is the one_state_workflow, running our\n     # import step will change it to comment_one_state_workflow.  This is good.\n     # If it was anything else, we should restore this.  So get the original\n@@ -46,13 +46,16 @@ def upgrade_comment_workflows(context):\n             orig_chain[idx] = \'comment_one_state_workflow\'\n         # Restore the chain.\n         wf_tool.setChainForPortalTypes([portal_type], orig_chain)\n-    new_chain = list(wf_tool.getChainFor(portal_type))\n-    workflows = [wf_tool.getWorkflowById(wf_id)\n-                 for wf_id in new_chain]\n \n+\n+def upgrade_comment_workflows_apply_rolemapping(context):\n     # Now go over the comments, update their role mappings, and reindex the\n     # allowedRolesAndUsers index.\n+    portal_type = \'Discussion Item\'\n     catalog = getToolByName(context, \'portal_catalog\')\n+    wf_tool = getToolByName(context, \'portal_workflow\')\n+    new_chain = list(wf_tool.getChainFor(portal_type))\n+    workflows = [wf_tool.getWorkflowById(wf_id) for wf_id in new_chain]\n     for brain in catalog.unrestrictedSearchResults(portal_type=portal_type):\n         try:\n             comment = brain.getObject()\n@@ -63,5 +66,15 @@ def upgrade_comment_workflows(context):\n             logger.info(\'Could not reindex comment {0}\'.format(brain.getURL()))\n \n \n+def upgrade_comment_workflows(context):\n+    upgrade_comment_workflows_retain_current_workflow(context)\n+    upgrade_comment_workflows_apply_rolemapping(context)\n+\n+\n def add_js_to_plone_legacy(context):\n     context.runImportStepFromProfile(default_profile, \'plone.app.registry\')\n+\n+\n+def extend_review_workflow(context):\n+    """Apply changes made to review workflow."""\n+    upgrade_comment_workflows_retain_current_workflow(context)\ndiff --git a/plone/app/discussion/upgrades.zcml b/plone/app/discussion/upgrades.zcml\nindex 02a7e541..ae72b6ee 100644\n--- a/plone/app/discussion/upgrades.zcml\n+++ b/plone/app/discussion/upgrades.zcml\n@@ -62,4 +62,15 @@\n         />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+    source="1001"\n+    destination="1002"\n+    profile="plone.app.discussion:default">\n+    <genericsetup:upgradeStep\n+        title="Extended review workflow with states pending, published and new: rejected and spam"\n+        description="Additional states allows moderator to review history of publishing and rejection"\n+        handler=".upgrades.extend_review_workflow"\n+        />\n+</genericsetup:upgradeSteps>\n+\n </configure>\n'

