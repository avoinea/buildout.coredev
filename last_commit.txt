Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-02-26T11:05:00+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/84ec6b605ae5217a4c317d06e9c653da63c9730c

Remove selectedTabs and update method from GlobalSectionsViewlet as both are now unused.

Files changed:
A news/231.bugfix
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/sections.pt
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/231.bugfix b/news/231.bugfix\nnew file mode 100644\nindex 00000000..d9ba2edb\n--- /dev/null\n+++ b/news/231.bugfix\n@@ -0,0 +1,2 @@\n+Remove selectedTabs and update method from GlobalSectionsViewlet as both are now unused.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex e50c1e33..6d3e2eef 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -394,46 +394,6 @@ def portal_tabs(self):\n         )\n         return portal_tabs_view.topLevelTabs()\n \n-    def update(self):\n-        context = aq_inner(self.context)\n-        self.selected_tabs = self.selectedTabs(portal_tabs=self.portal_tabs)\n-        self.selected_portal_tab = self.selected_tabs["portal"]\n-\n-    def selectedTabs(self, default_tab="index_html", portal_tabs=()):\n-        portal = getToolByName(self.context, "portal_url").getPortalObject()\n-        plone_url = getNavigationRootObject(self.context, portal).absolute_url()\n-        plone_url_len = len(plone_url)\n-        request = self.request\n-        valid_actions = []\n-\n-        url = request["URL"]\n-        path = url[plone_url_len:]\n-        path_list = path.split("/")\n-        if len(path_list) <= 1:\n-            return {"portal": default_tab}\n-\n-        for action in portal_tabs:\n-            if not action["url"].startswith(plone_url):\n-                # In this case the action url is an external link. Then, we\n-                # avoid issues (bad portal_tab selection) continuing with next\n-                # action.\n-                continue\n-            action_path = action["url"][plone_url_len:]\n-            if not action_path.startswith("/"):\n-                action_path = "/" + action_path\n-            action_path_list = action_path.split("/")\n-            if action_path_list[1] == path_list[1]:\n-                # Make a list of the action ids, along with the path length\n-                # for choosing the longest (most relevant) path.\n-                valid_actions.append((len(action_path_list), action["id"]))\n-\n-        # Sort by path length, the longest matching path wins\n-        valid_actions.sort()\n-        if valid_actions:\n-            return {"portal": valid_actions[-1][1]}\n-\n-        return {"portal": default_tab}\n-\n \n class PersonalBarViewlet(ViewletBase):\n \ndiff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex ca9c2a6a..12085d89 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -18,9 +18,7 @@\n       </div>\n \n       <div class="plone-collapse plone-navbar-collapse" id="portal-globalnav-collapse">\n-        <ul class="plone-nav plone-navbar-nav"\n-            id="portal-globalnav"\n-            tal:define="selected_tab python:view.selected_portal_tab">\n+        <ul class="plone-nav plone-navbar-nav" id="portal-globalnav">\n           <navtree tal:replace="structure view/render_globalnav" />\n         </ul>\n       </div>\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex a29125ee..75113859 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -249,32 +249,6 @@ def _get_navtree(self, context=None):\n         gsv = GlobalSectionsViewlet(context, self.request.clone(), None)\n         return gsv.navtree\n \n-    def test_selectedtabs(self):\n-        """ Test selected tabs the simplest case\n-        """\n-        request = self.layer["request"]\n-        request["URL"] = self.folder.absolute_url()\n-        gsv = GlobalSectionsViewlet(self.folder, request, None)\n-        gsv.update()\n-        self.assertEqual(gsv.selected_tabs, {"portal": "Members"})\n-        self.assertEqual(gsv.selected_portal_tab, "Members")\n-\n-    def test_selectedtabs_navroot(self):\n-        """ Test selected tabs with a INavigationroot folder involved\n-        """\n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        self.portal.invokeFactory("Folder", "navroot", title="My new root")\n-        navroot = self.portal["navroot"]\n-        alsoProvides(navroot, INavigationRoot)\n-        navroot.invokeFactory("Folder", "abc", title="short")\n-        navroot.invokeFactory("Folder", "xyz", title="Folder with a looong name")\n-        request = self.layer["request"]\n-        request["URL"] = navroot["abc"].absolute_url()\n-        gsv = GlobalSectionsViewlet(navroot, request, None)\n-        gsv.update()\n-        self.assertEqual(gsv.selected_tabs, {"portal": "abc"})\n-        self.assertEqual(gsv.selected_portal_tab, "abc")\n-\n     def test_globalnav_respects_types_use_view_action_in_listings(self):\n         """ Test selected tabs with a INavigationroot folder involved\n         """\n'

